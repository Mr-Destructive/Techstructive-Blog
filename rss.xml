<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Techstructive Blog</title><link>https://mr-destructive.github.io/techstructive-blog/rss.xml</link><description>Techstructive Blog Feed</description><atom:link href="https://mr-destructive.github.io/techstructive-blog/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>tbicon.png</url><title>Techstructive Blog</title><link>https://mr-destructive.github.io/techstructive-blog/rss.xml</link></image><language>en</language><lastBuildDate>Tue, 14 Jun 2022 05:54:51 +0000</lastBuildDate><item><title>Why and How to make and use Vim as a text editor and customizable IDE</title><link>https://mr-destructive.github.io/techstructive-blog/vim-text-editor-ide</link><description>We all are asked to use visual studio code and other rich looking editors as a beginners text editor or an IDE but that makes a habit of a rich and pleasing int</description><content:encoded>&lt;p&gt;We all are asked to use visual studio code and other rich looking editors as a beginners text editor or an IDE but that makes a habit of a rich and pleasing interface of running and debugging programs, and that is the reason we don't feel good to use command line or the terminal. Terminal or Command line are quite important to learn and are powerful as well.  &lt;/p&gt;&lt;p&gt;Vim is a text editor, not any text editor but a special and one of the fastest out there if you use it wisely. Vim can be used in the terminal which means it can run terminal commands inside the editor interface. That makes it quite a great option to improve your terminal command skills and also for enhancing your Linux knowledge. You can run program files from vim itself just with a few keystrokes. This text editor is preinstalled in most Linux distributions and hence you could quickly edit some files without going anywhere.  &lt;/p&gt;&lt;p&gt;So that being said, vim is not easy to learn, you have to put some effort to reap the fruits of saving time in the longer run. It takes time to get used to the commands and key combination of Vim.  &lt;/p&gt;&lt;h2 id="download-vim"&gt;Download VIM&lt;/h2&gt;&lt;p&gt;But, let us get our feet wet in learning a few commands in Vim.  &lt;/p&gt;&lt;p&gt;To download vim you can go to the official  &lt;a href="https://www.vim.org/download.php"&gt;Vim website&lt;/a&gt; .  &lt;/p&gt;&lt;p&gt;Firstly let us understand how to open vim from the command line or the terminal  &lt;/p&gt;&lt;p&gt;If you are on windows you have to add the vim.exe file's path to the environment variable PATH. After that open CMD or terminal for windows 10 and type vim and enter. You are in Vim.  &lt;/p&gt;&lt;p&gt;If you are in Linux or macOS, then open the terminal and type vim and enter.  &lt;/p&gt;&lt;p&gt;After you are in Vim, you will surely be trying to type something right? else you are not a geek ; )&lt;/p&gt;&lt;h2 id="vim-basics"&gt;VIM Basics&lt;/h2&gt;&lt;p&gt;You won't see anything happening even if you are typing. This is because are 4 basic modes in Vim, understand it like a room.  The modes are&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Normal Mode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Insert Mode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Command Mode&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Mode&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Wait for a second, you should learn how to move in vim first but you cannot learn everything at once, So take it bit by bit.&lt;/p&gt;&lt;p&gt;To navigate around vim like blazing fast you can use h,j,k, and l.  I know it's wired but you will get used to it.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;h&lt;/strong&gt;  -&amp;gt; move left.    ( hop left)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;l&lt;/strong&gt;   -&amp;gt; move right.   (opposite of left)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;k&lt;/strong&gt;  -&amp;gt; move up.       ( keep it up)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;j&lt;/strong&gt;   -&amp;gt; move down.   ( jump down!!)&lt;/p&gt;&lt;p&gt;If you want to apply certain movements several times you can use numbers before hjkl to move the number of times in that direction.&lt;/p&gt;&lt;p&gt;Let's say you type 23j , here you will go down 23 lines. You can also use : and number to jump to a particular line of that number, :12 moves you to the 12th line. &lt;/p&gt;&lt;p&gt;The default mode is the &lt;strong&gt;Normal mode&lt;/strong&gt; where you can navigate in your file, like a passageway between different rooms. Each other mode is accessible via Normal mode. You have to enter normal mode before switching to the other three modes. By default, after opening vim you are in Normal mode. You start inserting text in the file while being in Normal mode but you can replace text and edit the existing text in the file. &lt;strong&gt;Press ESC to enter Normal mode&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The main mode in VIM is &lt;strong&gt;Insert mode&lt;/strong&gt;, where the actual typing and text editing takes place, &lt;strong&gt;Enter i to enter insert mode&lt;/strong&gt;. After entering i you can type anything you want. After you feel satisfied with writing in VIM, you can escape out of the insert mode (room) and enter the normal mode (passageway). Now the biggest question VIM beginners ask &lt;strong&gt;"HOW ON EARTH SHOULD I EXIT OUT OF VIM ??"&lt;/strong&gt; . Take a breath dear, you need to save your file first. To do that let's explore a different mode.&lt;/p&gt;&lt;p&gt;The next crucial mode is &lt;strong&gt;Command mode&lt;/strong&gt;, where you have to remember some commands to do something. Let's continue from where we left. To save our file,  &lt;strong&gt;Press :  and Voila!! you are in Command mode&lt;/strong&gt;. After it depends you want to save the file, quit vim, save the file and quit vim or quit vim without saving the file. OK, that is too much to take in one go. Be sure to be in Command mode to press the following keys (i.e. press colon before any keys if you were in normal mode).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;w&lt;/strong&gt;     -&amp;gt; save file.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;q&lt;/strong&gt;      -&amp;gt; quit vim.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;wq&lt;/strong&gt;     -&amp;gt; save file and quit vim.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;q!&lt;/strong&gt;      -&amp;gt; quit vim without saving the file.&lt;/p&gt;&lt;p&gt;These are a few of the commands available in VIM :)&lt;/p&gt;&lt;p&gt;So now let's talk about &lt;strong&gt;Visual mode&lt;/strong&gt;, the little helper mode (room) to do cut/ copy in VIM. There are many ways to edit or add text in Visual mode. You have options to choose from character by character, line by line, or block by block. &lt;strong&gt;To enter Visual mode press v&lt;/strong&gt;. This gets you into character by character highlighting whether you want to cut the text or copy (yank) the text. After selecting the portion you can either cut that portion or copy it in vim register. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;y&lt;/strong&gt;     -&amp;gt; Copy the selected portion.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;d&lt;/strong&gt;     -&amp;gt; Cut the selected portion.&lt;/p&gt;&lt;p&gt;You can use &lt;strong&gt;V (Shift+V) to enter Line Visual mode&lt;/strong&gt;, this selects or highlights the portion line by line and not single letter by letter.&lt;/p&gt;&lt;p&gt;You can also use &lt;strong&gt;Ctrl+V to enter Block Visual mode&lt;/strong&gt;, this selects a block of code.&lt;/p&gt;&lt;p&gt;Here is a good way to remember switching between basic modes in VIM -&amp;gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1613912016216/SXavZAkPH.png" /&gt;&lt;/p&gt;&lt;p&gt;Switching between basic modes in VIM&lt;/p&gt;&lt;p&gt;It seems to be quite slower than VS Code, doesn't it? Ya, I know it's kinda slow but with time it picks up pace, just like a train. Spend time in VIM and it will be worth it. No Text editor is so powerful as VIM, it is so for a reason. If you are curious to dive deeper just dive in fully or stay in VS Code and your fancy.  There is a great community around VIM and you'll be happy surely to be a part of it. Oh! The quick fact even VS Code has an extension for VIM ;)&lt;/p&gt;&lt;h2 id="some-more-basics"&gt;Some more Basics&lt;/h2&gt;&lt;p&gt;You can do most of the basic programming using this but to be a bit faster you can use some tweaked commands to do stuff like,&lt;/p&gt;&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;     -&amp;gt; Enter insert mode to the character at the beginning. ( i puts you in insert mode to the cursor)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt;  -&amp;gt; Enter insert mode adjacent right to the cursor.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;   -&amp;gt; Enter insert mode at the end of the line.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;o&lt;/strong&gt;    -&amp;gt; Enter insert mode a line below cursor.&lt;/p&gt;&lt;p&gt;O   -&amp;gt; Enter insert mode a line above cursor.&lt;/p&gt;&lt;p&gt;These commands are an optimized way to enter insert mode in a suitable way. These commands can be used as per needs and quite significantly improve editing speed.&lt;/p&gt;&lt;p&gt;You can also shift from one mode to Normal mode by pressing Ctrl+C or Ctrl+{. Whatever you feel good with.&lt;/p&gt;&lt;p&gt;Pasting is a programmer's everyday task. No, it's good as a beginner and only if you are not running as it is. In VIM you can paste from your previously copied text using Visual mode or deleted chunk just using p to paste. Remember if you are on a character it will paste on starting from where your cursor is, which means your character on the current cursor will be overwritten. You can also use "0p to paste from the copied buffer.&lt;/p&gt;&lt;p&gt;If you are pasting from an external source i.e. out of VIM, you have to use "+p . It pastes from the next character from the cursor.   &lt;/p&gt;&lt;p&gt;If you want to search a word in a file, you can use navigation commands like hjkl but there's a faster way around, If you press / and type the word you are searching for, you will get the first instance of that word. If there are multiple instances of the same word, you can press n to got the next instance. You can also press Shift+N to move to the previous instance of the word.&lt;/p&gt;&lt;p&gt;Some more word searching ahead. Say if you are already on the word which you want to find its instance, then you could press * to move to its next instance and # will do the same backward. Oh ! that was smooth.&lt;/p&gt;&lt;p&gt;You can see that we are just using our keyboards while using vim. This is a great feature of old but gold text editors like vim and others that make you faster on the keyboard and avoid mouse traps. &lt;/p&gt;&lt;p&gt;If you want to jump to the end of the block or a paragraph you can use { and } to go to the beginning and the end of it respectively.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;    -&amp;gt; to the end of the file.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;gg&lt;/strong&gt; -&amp;gt; to the beginning of the file.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;     -&amp;gt; move the cursor to the end of the screen.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:%s/old/new/g&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   in Command mode -&amp;gt; replace the old word with a new word throughout the file(g)&lt;/p&gt;&lt;p&gt;Ctrl p   in Insert mode    -&amp;gt; auto-complete reference from current file.&lt;/p&gt;&lt;p&gt;So these are some quick and pretty good commands to get started with and feel VIM. But this is just VIM used 25% efficiency, you would have to go to the command line or terminal to run and compile the program you have written. It could waste a lot of time. But as a beginner, this is pretty decent and helps to learn the core programming, behind the scenes of compiling and learning new stuff and commands. It gets pretty exciting if you have got the basics cleared. But be sure to make it through.&lt;/p&gt;&lt;p&gt;It's time to use VIM to its actual powers. VIM + terminal. It can get quite fast. So beware!!!&lt;/p&gt;&lt;h1 id="running-programs-from-vim"&gt;Running Programs from VIM&lt;/h1&gt;&lt;p&gt;It turns out that you could go to the command mode and run terminal commands from there just use! before the command first.&lt;/p&gt;&lt;p&gt;Linux/Mac Users: use terminal from vim&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!ls   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; //-&amp;gt; ls command from vim&lt;/p&gt;&lt;p&gt;Windows: use CMD from vim&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!dir&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   -&amp;gt; dir command from vim&lt;/p&gt;&lt;p&gt;You could also use other commands which are appropriate to be executed from vim.&lt;/p&gt;&lt;p&gt;Here is where the trick comes in, you don't have to quit vim now to compile or run the program.&lt;/p&gt;&lt;p&gt;Let's say you are writing a C++/C code and you have a clang compiler. Then you could use c++ and c respectively command with appropriate file handles to compile from vim. Here's the command,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!c++ % -o %:r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, % stands for the current file and :r removes the extension of the file. So we are creating an executable file without the extension and hence :r. And to execute the file, simply type,&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!%:r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;this will execute the program. If Windows users face an issue like a file is not identified as a batch file or executable file, you should add .exe after :r to make it an exe file.&lt;/p&gt;&lt;p&gt;For Python or other interpreted language, it is quite simple, just the interpreters name with the file name as it is&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!python filename.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!python %&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;You could find your preferred language's CLI tool and set it up for your environment and get it plugged with VIM.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Mapping in VIM&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;But this is not it! There is a long way to master VIM. It's not possible to know everything about anything. So for getting faster I'll introduce VIM's fastest tool and the part where it really shines. Mapping!!&lt;/p&gt;&lt;p&gt;You could map (assign) some keys to do a particular task in different modes. Just imagine typing cpp and running the program or py and running the program,no need to go to the mouse to click run button and close the window. It gets really blazing fast. Only your creativity is the limit. Mapping commands are also called macros.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nmap cpp :!c++ % -o %:r  &amp;amp;&amp;amp;  %:r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nmap py :!python %&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;In the above commands, nmap means in Normal mode MAP cpp and then followed by the command which for this case it is executed in the command mode. There can be various permutations you could make like imap or vmap in Insertion mode and Visual mode and so on.  From mapping,its basically left-hand side mapped to right-hand side. The key combination to the left and command to be executed to the right. &lt;/p&gt;&lt;p&gt;You will surely say, "Do I have to do it every time I run the program or every time I use VIM?"&lt;/p&gt;&lt;p&gt;Well, You can :) but you should not. Because there's a way around it and this is the fuel of VIM or the soul for its Speed.&lt;/p&gt;&lt;p&gt;Yes, I am talking about VIM CONFIGURATION FILE or vimrc&lt;/p&gt;&lt;h1 id="vim-run-commands-filevimrc"&gt;VIM Run Commands File(vimrc)&lt;/h1&gt;&lt;p&gt;This is really a nasty feature of vim. You could tailor your vim editor as per your needs. You have to write the command once and it will run from the vimrc file. Making a vimrc file is a bit overwhelming in the beginning so, you should have a concrete knowledge of VIM commands and you should remember commands as well. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Make a file called ~/.vimrc&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You should be using VIM to edit it or write it of course! Type vim ~/.vimrc in terminal or cmd&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Enter some commands such as set file type indent on , set number , you can find a  &lt;a href="https://vim.fandom.com/wiki/Example_vimrc"&gt;sample vimrc file &lt;/a&gt; on google and understand its commands and uses.Paint your plain canvas vimrc with your own creativity.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From here you can add the mappings and other key combinations that you might have been using while learning VIM to your vimrc. VIM also has plugins and more customizable tweaks that can enhance your productivity. &lt;/p&gt;&lt;p&gt;You could always get more help in VIM by using :help commandname. Also you can learn from vimtutor from terminal or CMD.&lt;/p&gt;&lt;p&gt;If you want to dive in more deeper , i link some few resources and video links to get your vim skills to new level.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.vim.org/docs.php"&gt;VIM Official Documentation. &lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://vim.fandom.com/wiki/Vim_Tips_Wiki"&gt;VIM fandom Wiki&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://catswhocode.com/vim-commands/"&gt;130+ VIM commands. &lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide"&gt;Vim Interactive Guide.&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=H3o4l4GVLW0&amp;amp;list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R"&gt;Vim as your editor.&lt;/a&gt; &lt;/p&gt;&lt;p&gt;Vim is a tool that can get quite handy for programmers and it stands out from rest of the text editors. By using Vim you will be in very rare people who can make something from almost nothing. Because in VIM you make everything from commands to mapping from customization to functionality. This cannot be done overnight for sure and you would  say you are wasting time in the initial stage but no, you are actually building a foundation for more efficiency and speed. If still you want to use VS Code ,you can use it freely . Because it won't matter much , at the end of the day its programming skills that win the race.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;This is quite a huge topic and everything could not be explained in a article, it should be self-explored and learnt from various sources to get its best functioning as per needs. This was a quick guide how and why you should be using VIM as a text editor or as a customizable IDE. As you might have seen its functionality is quite customizable and it is quite powerful tool for a programmer. Happy Coding and VIMing ;)&lt;/strong&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/hacktoberfest-2021'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Hacktoberfest 2021&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-un-comment-p1'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Comment/Uncomment Code: Vim for Programmers&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-text-editor-ide</guid><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate></item><item><title>Setting up Vim for Python</title><link>https://mr-destructive.github.io/techstructive-blog/vim-for-python</link><description>Vim is quite a powerful text editor which can add performance to the already fast typed language Python. Vim can be highly customizable and efficient to use as </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Vim is quite a powerful text editor which can add performance to the already fast typed language Python. Vim can be highly customizable and efficient to use as it has the power of &lt;strong&gt;adding custom plugins and plugins managers, key mappings&lt;/strong&gt;, and the most critical weapon of vim - Access to the terminal straight away.This is not a full-featured guide of using vim for python, it's just a quick setup for using python on vim blazingly fast!!&lt;/p&gt;&lt;h2 id="plugin-managers"&gt;Plugin Managers&lt;/h2&gt;&lt;p&gt;So let us start making Vim, the text editor suitable for a python programmer. Firstly we'll need the vim plugin manager. There are different plugin managers out there, each of them has the same purpose to install, upgrade and manage the plugins for vim. You can install any one of them and get up and running.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.vim.org/scripts/script.php?script_id=4828"&gt;Vim Plug&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are some of the finest and well-supported plugin managers in vim. You can use any of these plugin managers, and get started by installing some plugins.&lt;/p&gt;&lt;h2 id="jedi-vim-auto-completion"&gt;JEDI-VIM- Auto completion&lt;/h2&gt;&lt;p&gt;Firstly I will like to install Jedi for code completion in Python. The plugin can be simple and straightforward to install using any of the above plugin managers. Jedi-Vim provides some neat and clean** syntax analytics and autocompletion for Python in Vim**. You'll find the docs and installation process here  &lt;a href="https://github.com/davidhalter/jedi-vim"&gt;JEDI-VIM &lt;/a&gt; &lt;/p&gt;&lt;h2 id="nerdtree-file-manager"&gt;NERDTree-File manager&lt;/h2&gt;&lt;p&gt;Next, It would be great if we install a file manager for managing the files and folders in the code directories. We can simply use the Nerdtree plugin for this. NerdTree is quite a &lt;strong&gt;fantastic plugin for file management in Vim&lt;/strong&gt;. It simply makes Vim feel like VS Code. The installation and docs can be found here  &lt;a href="https://github.com/preservim/nerdtree"&gt;NERDTree&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Nerdtree commands can be longer to write, for that let's start mapping and for that, we can start editing our Vimrc. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt;&lt;span class="nb"&gt;syntax&lt;/span&gt; enable&lt;span class="k"&gt;filetype&lt;/span&gt; indent &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;softtabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;autoindent&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;utf&lt;span class="m"&gt;-8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This can be some addition to your existing vimrc as you might have a setup for plugin managers. You can choose the color scheme of your choice, don't waste time selecting the color scheme. Feel free and modify the vimrc according to your knowledge and choice. &lt;/p&gt;&lt;h2 id="keymappings"&gt;Keymappings&lt;/h2&gt;&lt;p&gt;We move on to the Key mappings for NERDTree and other features. You can make mappings generally in the normal mode but there might be cases where you need to use maps for visual mode or insert mode as well, that entirely depends on the user :)&lt;/p&gt;&lt;p&gt;To map in normal mode, we'll its command to be specific:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :NERDTree&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will map CTRL+n to open the NERDTree file manager to the left, saving a bit of time and avoiding frustration. Feel free to add any keymap of your choice, this is just for demonstration. You can further automate NERDTree for switching between tabs because it makes you type CTRL+w twice, you can reduce that to just typing w.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;w&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="integrated-terminal-macros"&gt;Integrated Terminal Macros&lt;/h2&gt;&lt;p&gt;We can open a terminal window like a split between the editor. We can simply use the command :terminal to split the window horizontally, where the upper split will be terminal and the down window will have the editor. This is quite a neat feature of Vim in that it blends with the terminal so well so that we can switch between the terminal and the editor very quickly. For that, you can create a macro if you need to fire up a terminal again and again.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :terminal&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;If you place the above macro in your vimrc and then type Ctrl+t, the exact thing will happen to fire up a terminal split but with fewer keystrokes and without leaving the normal mode. Also, the NERDTree macro can be also fruitful with this as it will make a full-blown IDE-like feeling inside of Vim.&lt;img alt="Demonstrate macros for NERDTree and terminal split" src="https://s6.gifyu.com/images/screenrecording.gif" /&gt;&lt;/p&gt;&lt;h2 id="running-the-code-with-a-snap"&gt;Running the Code with a snap&lt;/h2&gt;&lt;p&gt;We can automate the process of running python scripts inside of vim. Instead of typing out the entire command for executing python script from vim. We can use keymaps for it as they can significantly boost the time required to run and debug the code. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;py&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;python %&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a small map but can save a lot of time and give some motivation to use vim as you run the code blazingly faster than other editors. I have used py, but it can cause some problems as p is already mapped for pasting. So it's better to use other key combinations such as ty, yh, or any other key combination of your choice. Try it out and add your own flavor that's how we all learn.&lt;/p&gt;&lt;p&gt;So, that's the basic set-up for python on vim, you can make more custom mappings, find more plugins and test out which work out the best for your workflow. Happy Coding and Viming ;)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-registers'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Registers&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-intro'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: What is it?&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-for-python</guid><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Setting up Vim for BASH Scripting</title><link>https://mr-destructive.github.io/techstructive-blog/vim-for-bash</link><description>Bash Scripting is a powerful skill to have as a programmer because we find Linux almost everywhere and to get through it you must have a command over its interf</description><content:encoded>&lt;h2 id="vim-and-bash"&gt;Vim and BASH?&lt;/h2&gt;&lt;p&gt;Bash Scripting is a powerful skill to have as a programmer because we find Linux almost everywhere and to get through it you must have a command over its interface which is generally the BASH shell. Vim is a great option for doing this, or probably the best out there! Because Vim is pre-installed in almost every Linux distribution. This is not an in-depth setup for BASH on Vim, it is a simple editorial on starting up BASH scripting on the Vim editor. So without wasting time on "Vim features" let's dive in with the setup for BASH in Vim.&lt;/p&gt;&lt;h2 id="boilerplate-macro"&gt;Boilerplate macro&lt;/h2&gt;&lt;p&gt;Setting up a bash script doesn't require much code but still in some cases it can be a bit hassle and to avoid the repetitive task, one can easily set up a macro for the boilerplate BASH script.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;bs&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/bin/&lt;/span&gt;bash/&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Ok that was pretty dumb but it can scale pretty quickly and it will be nice to tailor it as per needs, here's some snippet with function pre-loaded.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;bs&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/bin/&lt;/span&gt;bash/&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="nb"&gt;bs&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/bin/&lt;/span&gt;bash/&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ofunction main&lt;span class="p"&gt;()&lt;/span&gt;{&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ki&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;S&lt;span class="p"&gt;-&lt;/span&gt;TAB&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="type bs to load boiler-plate code" src="https://s6.gifyu.com/images/bsclip.gif" /&gt;&lt;/p&gt;&lt;p&gt;When the key bs is typed in normal mode, you enter into insert mode as per the command macro, then we type in the required text and escape to move to the next line and continue the same stuff. This could be extended further like making some input or printing out some text and any other formatted text that you could think it as repetition. &lt;/p&gt;&lt;h2 id="sourcing-scripts"&gt;Sourcing Scripts&lt;/h2&gt;&lt;p&gt;So, after creating the file, sourcing the script, and running it can be a bit slow for some people, as you have to go to the terminal and toggle in the permission to run the script and then run, But pull on your seatbelts as this is VIM! You can die due to slowness!&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;sh&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;chmod &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt; % &amp;amp;&amp;amp; source %&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="type sh to run script" src="https://s6.gifyu.com/images/shclip.gif" /&gt;&lt;/p&gt;&lt;p&gt;When the sh keys are typed in the normal mode, the preceding command after ! (bang) will be executed in the terminal, the &amp;amp;&amp;amp; keywords will execute the second command only when the first command is successfully executed. That just can so fast! Imagine doing this for long scripts and especially for debugging, it will waste 2 minutes every time you leave the editor and for 10 times you do the debugging, you will carelessly was roughly 20 minutes! Improve your debugging skills surely :)&lt;/p&gt;&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;&lt;p&gt;There are very few plugins out there for BASH as for VIM, but it's quite to write scripts even without any plugins. One of the most supported and popular plugins for BASH in Vim is  &lt;a href="https://www.vim.org/scripts/script.php?script_id=365"&gt;Bash-Support-Vim&lt;/a&gt; for auto-completion and &lt;a href="https://www.shellcheck.net"&gt;Shell-Check&lt;/a&gt; for finding/correcting any bugs or error in the script . The mentioned plugin is quite awesome and it can greatly improve the speed of scripting for BASH, some commands such as shortcuts for writing if-else, while, for loops, commenting and other aspects in the scripting. The thorough documentation for such commands is also provided by the  &lt;a href="https://wolfgangmehner.github.io/vim-plugins/bashsupport.html"&gt;plugin website&lt;/a&gt;. This can be used for autocompleting keywords and writing nested if-else and other logical operators in BASH scripting. Again, you can do absolutely fine without plugins in Vim as it is heavily customizable to the user's need and can be very rewarding to set up your own configuration for BASH. You can use standard Vim(barebones) for auto-completion as well with the command CTRL+N and CTRL-P to move down and up respectively.&lt;/p&gt;&lt;h2 id="some-more-tricks"&gt;Some More Tricks&lt;/h2&gt;&lt;p&gt;BASH in Vim can be quite versatile to use as it provides some custom addons to make the script more functional and easier to understand. Some tricks such as using autocompletion can be quite inconvenient to use at once but it can get really smooth after some runs at writing the scripts.- In BASH Scripts there are quite a lot of brackets to play with that's why to jump around swiftly around such parentheses or brackets you can use &lt;strong&gt;% to move from the opened to closed brackets or vice versa&lt;/strong&gt;.- You can execute any terminal command from Vim, be sure to be in command mode and press ! after the command, you would like to execute. This will run the command from the terminal and you don't have to leave the editor, it saves a ton of time and it's blazingly fast.- With the above trick, you kind of have a superpower within Vim to make, build, source, run the files or scripts within Vim, that is not repetition but it can run bash within bash. Ok! that's was pretty fast. Don't die of quickness now!&lt;/p&gt;&lt;p&gt;Writing BASH scripts in Vim can be also boosted by using some built-in commands such as adding comments for multiple lines at once and some unexplored stuff which can be learned in the way to understanding the flow of Vim and BASH together. Happy Coding and Viming :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/pipx-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Pipx: A python package consumption tool for CLI packages&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/bash-intro'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;What is BASH?&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-for-bash</guid><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Keymapping Guide</title><link>https://mr-destructive.github.io/techstructive-blog/vim-keymaps</link><description>Keymapping or Key binding is a process in which a user or a system can assign certain keys or commands to perform a particular task or commands. This can be qui</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Keymapping or Key binding is a process in which a user or a system can assign certain keys or commands to perform a particular task or commands. This can be quite useful in Vim as well as in other text editors to avoid some repetitive tasks and save time. In Vim this can be a great power to have for programmers as it can be really very flexible to set up for any programming language and it's  environment.&lt;/p&gt;&lt;p&gt;In Vim, you can map a particular keystroke combination to trigger a command or any operation. You can also map a key in place of a weird key combination as well. You can map a key to integrate several commands and make it run at a single key or without much of a hassle. Key Mapping is quite powerful in Vim, only your creativity and imagination are the limits here. Vim can really shine in such aspects where the user has the freedom to tailor the editor and his development environment as per his/her needs.&lt;/p&gt;&lt;h2 id="understanding-the-structure-of-key-binding"&gt;Understanding the structure of Key binding&lt;/h2&gt;&lt;p&gt;You can basically map a key depending on the current mode you are in. So that means you can have the same key mapped to different commands depending on the mode. That is really flexible and powerful. Vim allows you to basically map in almost every mode such as normal, insert, visual, command, and any other existing modes. Let us see what a basic key mapping looks like.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{mode}{attribute}map {key} {command}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The key mapping is broken down by adding the mode to map the key, an optional attribute to change/modify the way the mapping behaves and we finally have the key and the command pair. If you want to test a map you can temporarily map in the command mode using the syntax for the map command or if you want a permanent mapping, you can add the mappings in your vimrc file.&lt;/p&gt;&lt;p&gt;For a basic example let us map c to paste from the clipboard.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;map &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;+p&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command maps the "c" key in the &lt;strong&gt;normal/visual mode&lt;/strong&gt; by default to paste the contents from the clipboard. It is just an example of how a basic key mapping or binding can be used to save your time and efforts. This is a very small example to demonstrate the concept of mapping in Vim but it scales quite fantastically and smoothly.&lt;/p&gt;&lt;p&gt;Now let's see how to view the mapping inside of the current vim buffer. We can simply type map, imap, or nmap in the command mode to view the mappings in the respective modes. This will display the maps which are currently present inside of the vim buffer, some might be temporary and most of them will be permanent. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:map &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;If you type in map being in the command mode, it will list out the maps. If you want to stop seeing the list just press q, and you will be back in the editor. You can also view the maps in the normal, visual, insert, or any other modes by prefixing n, v, i, or other modes with map.&lt;/p&gt;&lt;h2 id="key-mapping-in-modes"&gt;Key Mapping in Modes&lt;/h2&gt;&lt;p&gt;To map a key binding explicitly in the normal mode or any other modes, we have to prefix the word such as n for normal, v for visual or i for insert, and so on. The map will only work in the provided mode so the same keys may have several different maps depending on the current mode, but that can create a bit of confusion so avoid doing that. Let's map a key in the normal mode for example,&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;s&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;This is pretty bad for Vim beginners as it will spoil the real Vim experience of saving with :w, If you feel comfortable using Ctrl + s to save a file, the above map will be perfect. It will map the key Ctrl + s by pressing :w and then pressing enter to save changes to the file. &lt;/p&gt;&lt;p&gt;We can also map certain non-alphabetical keys such as CTRL, ALT, and others, it will help you in saving time to leave a mode and enter the mode again to edit the text. The following is a perfect example of such.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;quot;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;pa&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The above command is &lt;strong&gt;mapped in insert mode&lt;/strong&gt; as the mode is set to insert at the command's beginning. The CTRL+c keys are mapped to first Escaping out of insert mode and then pasting from the "+ register which is the device clipboard here. In the end, we again get back to insert mode just to the right of the current cursor position. So, that is how we can map the keys to do the task and save a bit of time. &lt;/p&gt;&lt;h2 id="adding-keymaps-in-vimrc-file"&gt;Adding Keymaps in vimrc file&lt;/h2&gt;&lt;p&gt;So you can now map in any available modes in Vim and test it out in te=he current buffer, but if you notice when you close the buffer, your custom keymaps will not be functioning as they remain in the buffer until you close it. To make it permanent you need to type the exact map command to the vimrc file. Just don't add ":" as it is not a command mode, it should be only the pure command of the map.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;s&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;+p&lt;/span&gt;vmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;y&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;+y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The above commands are pasted in the vimrc file. These keymaps once sourced will stay in permanently unless you remove them from the file.&lt;/p&gt;&lt;h2 id="keymap-modifications"&gt;Keymap Modifications&lt;/h2&gt;&lt;p&gt;We can also add extra arguments to the keymaps such as noremap and remap and others. In remap, the keymap is recursive which means the key pair will get mapped to the keys mapped already somewhere. The keymap will redefine its map depending on the already existing maps.  It is preferred to use noremap as it will not mix up the existing maps and have a fresh key binding. The mapping in Vim is quite versatile and there are quite a lot of modifications you could do to make your key binding feel and work according to you. So for further un depth understanding of modifications of keymap in Vim you can check out their documentation  &lt;a href="https://vim.fandom.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="keymapping-usecases"&gt;Keymapping Usecases&lt;/h2&gt;&lt;p&gt;Now, it's entirely up to you to make keymaps according to your preference and choice. You can use your creativity and knowledge to make powerful and efficient keymaps.&lt;/p&gt;&lt;p&gt;For some insights, I'd like to give in some cool and productive keymaps which I personally use very frequently in coding a particular programming language. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;s&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;py&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;python %&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;                          &lt;span class="c"&gt;&amp;quot; Python run macro&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; cpp :&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt; % &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; %:&lt;span class="k"&gt;r&lt;/span&gt; &amp;amp;&amp;amp; ./%:&lt;span class="k"&gt;r&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;           &lt;span class="c"&gt;&amp;quot; C++ compile and run macro&lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;sh&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;chmod &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt; % &amp;amp;&amp;amp; source %&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="c"&gt;&amp;quot; Bash sourcing macro &lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;clang % &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; %:&lt;span class="k"&gt;r&lt;/span&gt; &amp;amp;&amp;amp; ./%:&lt;span class="k"&gt;r&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;           &lt;span class="c"&gt;&amp;quot; C compile and run macro &lt;/span&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; jv :&lt;span class="p"&gt;!&lt;/span&gt;javac % &amp;amp;&amp;amp; java %:&lt;span class="k"&gt;r&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;              &lt;span class="c"&gt;&amp;quot; Java compile and run macro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above mapping will run the file or compile and run the file you are currently editing in Vim. That is just an overview of how you can use key mappings in Vim for any programming language or tool. Vim allows you to modify and make the keys do the heavy lifting very easily and save a lot of time and frustration. This is how you implement DRY(don't repeat yourself) perfectly. I personally think this is just perfect to do certain things which are quite common and sometimes daunts you to do this again. So just have a look and play around with Vim keymaps, it is the power with which one can excel in saving time and energy. This is just flawless. OK, That was too much from my side. &lt;/p&gt;&lt;h2 id="keymapping-and-macros"&gt;Keymapping and Macros&lt;/h2&gt;&lt;p&gt;Some Keymappings provided above are quite interesting for a person trying to understand macros and key binding. A macro is a bunch of commands packed in together to access it very efficiently, Not the exact definition, but still, it just means to simplify things and saves time. Keymapping is the same thing but to map with the keys. &lt;/p&gt;&lt;p&gt;From some snippets and explanations of VIm keymaps, it must be easier now for a beginner to understand Keymappings in Vim and how to customize accordingly.&lt;/p&gt;&lt;p&gt;I hope it helped, Thank you for listening to my understanding of Vim keymapping. Below are some of my keymaps currently in vim for windows. Some of them were already shown in the code snippets.&lt;img alt="vimkmap.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1623654888460/pBfJO2jkZ.png" /&gt;&lt;/p&gt;&lt;p&gt;So, Keymaps are quite powerful and can be a bit difficult to set up in a single try. Keep experimenting with keymaps and make Vim the powerhouse of productivity and customization. Happy Viming :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: What is it?&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-intro'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: What and Why?&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-keymaps</guid><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate></item><item><title>What is BASH?</title><link>https://mr-destructive.github.io/techstructive-blog/bash-intro</link><description>BASH or Bourne Again Shell is an interface(program) between the user and the Operating System. BASH is just an application just like others, but not an ordinary</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;BASH or Bourne Again Shell is an interface(program) between the user and the Operating System. BASH is just an application just like others, but not an ordinary one. It is quite powerful when used to its potential. It is used in various aspects of computing. No, it's not only for server admins, but it specializes in that field though. We'll see how we can use Bash to perform several tasks quite powerfully. Not just automation, you'll be surprised what Bash is capable of.&lt;/p&gt;&lt;h2 id="bash-the-program-that-powers-the-world"&gt;BASH - The program that powers the world.&lt;/h2&gt;&lt;p&gt;BASH is just like any other shell such as z-shell, c-shell, Korn shell, and Bourne shell. BASH is a variant or update version of the BOURNE shell. Technically it has quite advanced features than the Bourne shell, such as arithmetic operators, signal handling, command-line completion, and tons of quality of life improvements. So what can Bash do? Well pretty much anything, it is close enough to call itself a programming language but not quite enough. You can call it the programming language of the command line. &lt;/p&gt;&lt;p&gt;Bash also has built-in features such as variables, loops, if-else conditional statements, functions, and all but there are no concrete data structures to work with. Some of them quite useful structures are built-in such as arrays and dictionaries. It can perform arithmetic, logical and programmatical operations inside of a terminal or command line. It can make use of some other programs such as grep, awk, sed, cURL, find, wc, the list is quite large. Most of the commands are quite versatile and can be integrated with each other quite well. Certain concepts such as command piping, brace expansion, and others provide a great integration and feasibility to make quite a lot of applications using Bash. Certain commands such as grep, cURL, sed, cat, touch are quite incredible and are used a lot in day-to-day use cases. Let's take a quick look at how actually we can use Bash to perform a basic task.&lt;/p&gt;&lt;p&gt;&lt;img alt="Demonstrating bash commands" src="https://s6.gifyu.com/images/recording1b26b94770ee59bf.gif" /&gt;&lt;/p&gt;&lt;p&gt;From the above gif, I edited a file without leaving the terminal. That can be lame but powerful in certain conditions. Anyways, that was just an example, but you can see where it can go. It can be extremely powerful for some repetitive tasks in programming or any other tasks. It can be also quite vividly used in the upcoming fields.&lt;/p&gt;&lt;h2 id="applications"&gt;Applications&lt;/h2&gt;&lt;p&gt;Well, Bash has some epic applications, some of them might surprise you but they are indeed liable to call themselves features of Bash. Let's dive in then.&lt;/p&gt;&lt;h3 id="automation-of-course"&gt;Automation "of course!"&lt;/h3&gt;&lt;p&gt;This is the most known feature of Bash as it stands upright on top of other tools and programs. Bash is most commonly used by system admins to automate repetitive tasks in managing a system. These tasks may include backing up files, managing file structures, monitoring the performance of a system, and debugging any errors and issues in the system on a regular basis to ensure the smooth functioning of a system. So, it makes quite a lot of sense to automate certain tasks that might waste time and effort to do them over and over again. Hence, Bash is the system admin's best friend and also for programmers to automate certain tasks and compilation of programs.&lt;/p&gt;&lt;h3 id="file-handling"&gt;File handling&lt;/h3&gt;&lt;p&gt;This is another aspect where Bash just makes things flawless, just flawless. It's much more easy, straight forward and intuitive to manage or handle files in Linux/ Unix operating systems. The tools and command-line utilities such as grep, awk, sed for matching patterns using regular expressions,  cat, tac, touch to create and make changes to the file. There are a plethora of ways to make files and directories using Bash utility tools. We can also make a bunch of files at once, make the structure of a file system at once just using Bash and its commands. &lt;/p&gt;&lt;h3 id="programming-environment"&gt;Programming environment&lt;/h3&gt;&lt;p&gt;This is a concept which many people use but are unaware of. People using Linux for programming are mostly using bash as their environment to make, compile, run files of the program. That is quite a powerful environment to work with as it is quite customizable and efficient as compared to Windows at least. Even macOS used Bash till a certain time but migrated to zsh for silly reasons about security issues on Bash. But still, Bash is the tool that most programmers use while interacting with the web servers or any other programs that deal with some kind of interface to the operating system especially Linux/ Unix. So, it is worth noting that Bash is the default development environment for many programmers.&lt;/p&gt;&lt;h3 id="networking"&gt;Networking&lt;/h3&gt;&lt;p&gt;Networking is another aspect where Bash also some quite remarkable tools to play around with. Bash has certain powerful tools like Nmap, aircrack-ng, ping, and many other networking tools which makes it quite a good choice for ethical hacking and network security as well. This domain is quite complex in terms of concepts as it makes the core IT domain. Bash also provides ways to manage the network using some well-equipped tools and programs to make it quite user-friendly.&lt;/p&gt;&lt;h3 id="web-scraping-wait-what"&gt;Web-Scraping "wait what!?"&lt;/h3&gt;&lt;p&gt;Yes, This is possible by making use of certain tools such as cURL to extract the content from the web and then using grep, sed, awk, or any other pattern/ regex matching tools to filter out the content. This might be very useful and informative for beginners trying to understand how web scraping actually works. Web-scraping can be learned this way so as to understand "Under the Hood" working of some utility and frameworks for web-scraping. This is some super great stuff for a simple shell to do in a standalone way though it may require a good skill of regexes and how the web works to make full utilization of the powers of Bash.&lt;/p&gt;&lt;h3 id="maybe-more"&gt;Maybe More&lt;/h3&gt;&lt;p&gt;OK, now I just know about these many applications about Bash but if you know any other please let me know in the comments. Bash is a great tool and I don't why it's not quite famous but still used a lot. Maybe I am wrong here, just an opinion though. So, I hope you might have got some insights to dig deeper into Bash and learn to improve efficiency and skills. &lt;/p&gt;&lt;p&gt;So, that's it from Bash and its application in a high-level view, there is a huge field and community for Bash, just because of some threats Bash is not going anywhere, still, zsh is getting replaced in most cases, but the concept and tools remain the same. At the end of the day, its the skill rather than the version of any tool that matters Happy Coding and have a blast learning Bash :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-for-bash'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Setting up Vim for BASH Scripting&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/why-use-vim'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Why use Vim ?&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-intro</guid><pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate></item><item><title>BASH Scripting Guide - PART - 1</title><link>https://mr-destructive.github.io/techstructive-blog/bash-guide-p1</link><description>If you are new to BASH and Linux, don Without wasting any time on the introduction, let For loop While loop Until loop Firstly, you should have some basic under</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;If you are new to BASH and Linux, don't you worry the community is the driving force here. If someone's stuck somewhere, the platforms, forums, and blogs are ready to help anyone there. BASH is a short term of Bourne-Again Shell, it is a shell interface that has much more capabilities and functions than the simple Bourne shell(sh). It has some quite remarkable features and it is even capable of calling itself a programming language in some sense.&lt;/p&gt;&lt;p&gt;Without wasting any time on the introduction, let's keep the article rolling.In this part, I'll try to cover the basics of the following topics:- &lt;strong&gt;Structure of Bash Script.&lt;/strong&gt;- &lt;strong&gt;Variables.&lt;/strong&gt;- &lt;strong&gt;If-else Conditional Statements.&lt;/strong&gt;- &lt;strong&gt;Loops.&lt;/strong&gt;    1.  For loop    2. While loop    3. Until loop- &lt;strong&gt;Functions.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Firstly, you should have some basic understanding of Linux commands such as listing directories, creating, making editing files, and some tiny little tasks. Bash scripting is the way to do these in a programmatic way, that's why it is called scripting.  &lt;/p&gt;&lt;h2 id="understanding-a-simple-shell-script"&gt;Understanding a Simple Shell script&lt;/h2&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;That is such a simple elegant script, isn't it? Well, the first command is called the she-bang which tells the Shell to execute or run the file as a Bash script or from a Bash interpreter. The next command is a simple echo which is used for printing text to the screen/console. She-bang is the path to the Bash interpreter. So, it basically redirects the shell to execute the file/script in a Bash environment. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624287681383/MP2nc6hGR.png" /&gt;&lt;/p&gt;&lt;p&gt;To execute the script we have many ways, either use Bash, source, or execute it as a shell-script by making it executable from the path. In this case, I used Bash to run the script, we'll see others as well.&lt;/p&gt;&lt;p&gt;The core structure of the Bash script is quite simple, we can make the format of the script according to the paradigm used and objective of the script. For basic scripts which has utility functions we normally declare those in the beginning after the she-bang header. After the function, we can have the core main part of the script. It was enough and important here to understand the purpose of the she-bang header and how to execute a shell script.&lt;/p&gt;&lt;h2 id="variables"&gt;Variables&lt;/h2&gt;&lt;p&gt;Definitely, we need variables to store some value which we are gonna use again and again. Bash has variables but without any specific data types, you can store anything in anything. It becomes a mess in comparing to variables and their values :( Though it might be a feature, not a bug sometimes.&lt;/p&gt;&lt;p&gt;Let's create some variables in a Bash script. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;To create a variable, we simply write the variable name and assign it to whatever we want. &lt;strong&gt;DO NOT leave spaces before and after assignment operator(=), it won't work&lt;/strong&gt;. To access the value of the variable we use the $ symbol. That is about the variables, If you want to perform some arithmetic on variables, it is covered in the further sections. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624287785396/GvIdwi0QP.png" /&gt;&lt;/p&gt;&lt;p&gt;From the above script, we outputted the value of x to the console. We also executed the script file using the source command. &lt;/p&gt;&lt;h2 id="if-else-conditional-statements"&gt;If-else Conditional statements&lt;/h2&gt;&lt;p&gt;If-else conditional statements are quite the fundamentals of any logical operations performed in the programming world, so Bash has them implemented pretty much the same way as other shells do.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; -lt &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Less than 10&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624290119634/JT6QuRTZe.png" /&gt;&lt;/p&gt;&lt;p&gt;We use "If", followed by "then" to execute the mentioned commands after that until it hits "fi" or else statement, we'll see else and if-else block after this. That is a basic If statement, here if we are comparing numbers we use -lt for less than, -gt for greater than, -eq for equals to, -ne for not equals to, -le for less than equals to, and -ge for greater than equals to. For string comparison, we use symbols such as &amp;lt; for less than, &amp;gt; for greater than, = for equals to, != for not equals to. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ERROR&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ERROR&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FAILURE&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SUCCESS&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624289450947/mrd8lawZD.png" /&gt;&lt;/p&gt;&lt;p&gt;In the above example, we have used the if-else block, comparing a string with other and using the = operator to compare. It's quite interesting that Bash has string comparison built-in, unlike C/C++ where we have to depend on external libraries. We have used chmod to make the script file executable to anyone using the system. And then we simply put in the path to the file to run it. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Success&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Failure&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Invalid Input&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624290844242/8FQgLjIQT.png" /&gt;&lt;/p&gt;&lt;p&gt;From the above script, we used if-elif-else statements to evaluate different conditions. We had use -eq to equate the value of the variable to the number we want to compare with. That was self-explanatory logic.&lt;/p&gt;&lt;h2 id="loops"&gt;Loops&lt;/h2&gt;&lt;p&gt;We have 3 types of loop statements in Bash, they are:1. For loop2. While loop3. Until loop&lt;/p&gt;&lt;h3 id="for-loops"&gt;For loops&lt;/h3&gt;&lt;p&gt;In for loop, we have the freedom to use in range-bound or C-like for loops. Let us take a look at both of them using examples.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..5&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;      &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624292601491/Rbuyx_T6p.png" /&gt;&lt;/p&gt;&lt;p&gt;The above loop was used as a range-based loop, which loops through 1 and 5 inclusive. We use {} to use it as the range. As "then" and "fi" in if conditions, we have "do" and "done" in loops. Between the do and done statements, we can type in the statements we want to loop. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the number : &amp;quot;&lt;/span&gt; n&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;i&amp;lt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;i++ &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;      &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624293294293/jPM1so_As.png" /&gt;&lt;/p&gt;&lt;p&gt;The above for loop is a typical C-style for loop which takes 3 arguments, the initializing iterator, the condition, and the incrementor. We surround the arguments with double braces followed by a semi-colon. The rest of the syntax is identical to the previous for loop style.&lt;/p&gt;&lt;h3 id="while-loops"&gt;While loops&lt;/h3&gt;&lt;p&gt;While loops are used quite commonly in Bash and the syntax is quite straightforward.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the number : &amp;quot;&lt;/span&gt; n&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; -gt &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;      &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;    &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;n&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624295626909/qLh2y8RPe.png" /&gt;&lt;/p&gt;&lt;p&gt;The above while loop has a condition for the number to be greater than zero. We take in the input from the user using the command read and store it in the variable n, the -p is an argument to prompt the user with text before the input. We use the decrement operator to decrement the iterator. The syntax is quite similar and easy to understand. As usual in loops, we have do and done to start and end the loop. &lt;/p&gt;&lt;h3 id="until-loops"&gt;Until loops.&lt;/h3&gt;&lt;p&gt;Until loop is a while loop but with the opposite condition, we loop until a certain criterion is not matched. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the number : &amp;quot;&lt;/span&gt; n&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;      &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;    &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;n&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624296796493/SF6-XOEVl.png" /&gt;&lt;/p&gt;&lt;p&gt;In the loop, we iterate over and over again until n becomes 0. Until is simply to exit from the loop until a certain condition is met. The rest of the syntax is again the same as the other loop with do and done statements.  &lt;/p&gt;&lt;h2 id="functions"&gt;Functions&lt;/h2&gt;&lt;p&gt;Functions are the part and parcel of any script, we don't use it necessarily, but they come in handy quite some times and serve the purpose absolutely well. We can customize what we want to return from the function depending on the needs. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; add&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;add &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624348202842/j0t0LT06q.png" /&gt;&lt;/p&gt;&lt;p&gt;In Bash functions, we do not pass arguments inside brackets, we have to pass in parameters as space-separated values after the function name in the function call. This also means that we can pass any number of parameters to a function, but only we should handle them properly. Otherwise, there is no use in passing unlimited parameters to a function. This is really powerful but it needs to be used wisely to have its full potential. Also, it not mandatory to use the keyword "function" before the name, So you could also write just the name and the rest of it as it is.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;add&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;add &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The return statement in functions is also quite an important aspect in logical programs. But it is not like returning values from a function, it is like returning the exit status of a function scope, so it can return inappropriate behavior from the shell depending on the return value. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;add&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;add &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624349678664/yDGL3U70C.png" /&gt;&lt;/p&gt;&lt;p&gt;Here we return the addition of two numbers and we use the internal variable ? To access the exit status of the function. The ? Is an internal variable in Bash, which holds the exit status of the last executed command. In this case, it was the function call and its return statement was stored in it.  As said, it can become quite buggy to exit the function scope with wired return statements, so to avoid those we can make use of global variables.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;add&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;add &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624349769088/VxnjgqETv.png" /&gt;&lt;/p&gt;&lt;p&gt;In the above program, we use n as a global variable to access out of the function scope. Function in Bash can also return multiple values at once but that can be buggy at times, so I don't recommend that.&lt;/p&gt;&lt;p&gt;So, that is the basics of Bash functions covered. &lt;/p&gt;&lt;p&gt;This is it from the Bash scripting guide Part-1, I'll cover more topics in the upcoming parts of the series.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/oop-cpp-p1'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Object-Oriented Programming in C++: Classes and Objects&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/python-feedparser'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Feedparser: Python package for reading RSS feeds&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-guide-p1</guid><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Enhancing Movement Speed</title><link>https://mr-destructive.github.io/techstructive-blog/vim-movement-speed</link><description>![ OK First things first, unmap arrow keys and make a habit of using h,j,k, and l. Yes, this would not make any sense in the initial stage but that will make no</description><content:encoded>&lt;p&gt;&lt;img alt="" src="{{ page.image | relative_url }}" /&gt;&lt;/p&gt;&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;OK! Vim and movement are like bread and butter or failed brakes. To become a proficient Vim user, you need to move in Vim very effectively. You don't have to think about doing certain things, your fingertips should automatically move without wasting time thinking about it. I am sure, it takes time and effort but OH! it is so rewarding in the end.  &lt;/p&gt;&lt;h3 id="why-h-j-k-l"&gt;Why H J K L?&lt;/h3&gt;&lt;p&gt;First things first, unmap arrow keys and make a habit of using h,j,k, and l. Yes, this would not make any sense in the initial stage but that will make no sense for not using it later. The thing with H J K L is that they are quite flexible to work with and if you use it with numbers you would navigate much faster than arrow keys. Such as &lt;code&gt;10j&lt;/code&gt; will move you 10 lines down at a time in normal mode. These keys are used with many of the other key shortcuts and commands which just make it most important to begin learning to move around in Vim with H J K L. &lt;/p&gt;&lt;h2 id="moving-horizontally"&gt;Moving Horizontally.&lt;/h2&gt;&lt;p&gt;This is quite the common movement that every programmer uses most of the time. This is also a much-neglected part when movement in Vim is concerned. To the basics, we use the following commands: &lt;/p&gt;&lt;p&gt;&lt;code&gt;w&lt;/code&gt;   -&amp;gt;  &lt;strong&gt;move forward by a word (considering punctuations as separate words).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;W&lt;/code&gt;   -&amp;gt;  &lt;strong&gt;move forward by a word (punctuations ignored).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;b&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move backward by a word (considering punctuations as separate words).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;B&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move backward by a word (punctuations ignored).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;e&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to end of a word (considering punctuations as separate words).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;E&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to end of a word (punctuations ignored).&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to the beginning of a sentence.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;$&lt;/code&gt;  -   &lt;strong&gt;move to the end of a sentence.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Those are the most useful and common commands for moving across the line. Don't forget to use the number before the command to repeat the task for that number of times. Like for example, if you would like to go 6 words ahead type in &lt;code&gt;6w&lt;/code&gt;. This can improve your thinking and typing as well, good signs of a programmer Eh!&lt;/p&gt;&lt;h2 id="moving-vertically"&gt;Moving Vertically.&lt;/h2&gt;&lt;p&gt;To move vertically we can imagine moving within a file or the block of code. For moving in a file, the following are some useful commands.&lt;/p&gt;&lt;p&gt;&lt;code&gt;gg&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the beginning of a file.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;G&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to the end of a file.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + e&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move the screen down without moving the cursor.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + y&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the screen up without moving the cursor.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + f&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move forward one entire screen.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + b&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move backward one entire screen.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + d&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move forward half screen.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + u&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move backward half screen.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This just was moving around the screen and now a bit programmatic movement. We will see some keystrokes to move in code blocks or code snippets very efficiently.&lt;/p&gt;&lt;p&gt;&lt;code&gt;gd&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the local declaration of any code.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;gD&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the global declaration of any code.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;%&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move between pairs of ( ), { }, [ ] or any other type of such braces.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the next paragraph/ code block/ function/ etc)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;}&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the previous paragraph/ code block/ functions/ etc)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;fa&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the next occurrence of the character 'a' in a sentence.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Fa&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the previous occurrence of the character 'a' in a sentence.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;ta&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to before of the next occurrence of the character 'a' in a sentence.&lt;/strong&gt;  &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ta&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to after of the previous occurrence of the character 'a' in a sentence.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The above might be quite handy key shortcuts in moving in a large code file. Even in files with complex variable names and structures, this can be quite handy. &lt;/p&gt;&lt;h2 id="search-and-navigation"&gt;Search and navigation.&lt;/h2&gt;&lt;p&gt;Searching is quite a time-consuming task, especially when the code is quite complex and has a lot of variables and all. Vim shines in many of such aspects where people think it's dead. It rises from the ashes to produce a performance-driven experience like any other modern IDEs though it requires a bit of research:) Here are some commands that will make searching and navigating around it quite a lot easier.&lt;/p&gt;&lt;p&gt;&lt;code&gt;*&lt;/code&gt; -&amp;gt; &lt;strong&gt;next occurrence of the word under the cursor.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;#&lt;/code&gt; -&amp;gt; &lt;strong&gt;previous occurrence of the word under the cursor.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;n&lt;/code&gt;  -&amp;gt; &lt;strong&gt;next occurrence of the word searched pattern.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;N&lt;/code&gt;  -&amp;gt; &lt;strong&gt;previous occurrence of the word searched pattern.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The above commands will also work if you search the pattern from the command mode.&lt;code&gt;/pattern&lt;/code&gt;  or &lt;code&gt;?pattern&lt;/code&gt; Enter and navigate to the next(&lt;code&gt;*&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;) and previous(&lt;code&gt;#&lt;/code&gt; or &lt;code&gt;N&lt;/code&gt;) occurrence of that pattern match.&lt;/p&gt;&lt;h2 id="moving-across-files"&gt;Moving across files.&lt;/h2&gt;&lt;p&gt;Moving across files without any plugins or file explorer is often considered tricky or impossible for some people but there is a way. You can switch between files using the following commands:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + O&lt;/code&gt;  -&amp;gt;   &lt;strong&gt;move in the previously opened file.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;and &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + I&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move in the next file.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We also can use &lt;code&gt;Ctrl + ^&lt;/code&gt; to move the previous two opened files.&lt;/p&gt;&lt;p&gt;If you want to switch from buffers, you can use &lt;code&gt;:bn&lt;/code&gt; for moving into the next buffer, and &lt;code&gt;:bp&lt;/code&gt; to move in the previous buffer. You always have an option to move from a buffer using the file name &lt;code&gt;:b filename&lt;/code&gt; or using the index as &lt;code&gt;:bindex&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="moving-between-tabs"&gt;Moving between Tabs.&lt;/h2&gt;&lt;p&gt;People rarely use Tabs as far as I have seen, but they are quite useful and provide the polish off just as robust IDEs. &lt;/p&gt;&lt;p&gt;&lt;code&gt;:tabnew filename&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;create a Tab of a file.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;gt&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the next tab.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;ngt&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the nth tab.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;gT&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the previous tab&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;:tabo&lt;/code&gt;  -&amp;gt; &lt;strong&gt;close all the tabs except the current one.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;:tabc&lt;/code&gt;  -&amp;gt; &lt;strong&gt;close the tab.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;:tabm n&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the current tab to nth position.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="movement-in-marks"&gt;Movement in Marks.&lt;/h2&gt;&lt;p&gt;Marks are used for some quite large files and code-bases. It is used to move from one mark(kind of a bookmark) to another using few key commands, marks are generally created when you would go to a particular code block or any part of the file again and again. Some of the quick navigation using maps are the following.&lt;/p&gt;&lt;p&gt;&lt;code&gt;mn&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;set the current position as mark 'n'.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;backtick&amp;gt;n&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the position of mark 'n'.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;/code&gt;0`  -&amp;gt; &lt;strong&gt;jump to the position where vim was last exited.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;/code&gt;"`  -&amp;gt;  &lt;strong&gt;jump to the position when the last edit was made in the file.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="split-windows-movement"&gt;Split Windows Movement&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Ctrl + w + r&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the split down.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w + R&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the split up.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w + h&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the left split.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w + j&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the split down.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w + k&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to the upper split.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w + l&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the left split.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You can use Caps H J K L to move the leftmost, bottom, uppermost, rightmost split respectively. That just was quick to make you enough faster than previous hassles.&lt;/p&gt;&lt;p&gt;That was probably it, these were some tricks and shortcuts to move around Vim pretty effectively and smoothly. Moving around Vim can be quite complicated at once, but it's just finding the key shortcuts to make you feel and glide in VIm. There might be quite a lot of shortcuts missing, If you have any quicker shortcuts, Please let me know in the comments.  Happy Viming :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-deploy-railway'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Project with PostgreSQL Deployment on Railway App&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-views-urls'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Views and URLS&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-movement-speed</guid><pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Terminal Integration</title><link>https://mr-destructive.github.io/techstructive-blog/vim-plus-teminal</link><description>Vim was made to work with the command line. Many beginners do not understand what are the true capabilities of Vim, myself included:) Vim can run terminal comma</description><content:encoded>&lt;h2 id="vim-and-terminal"&gt;Vim and Terminal!?&lt;/h2&gt;&lt;p&gt;Vim was made to work with the command line. Many beginners do not understand what are the true capabilities of Vim, myself included:) Vim can run terminal commands without leaving the text editor, open an instance of a terminal, work with shell environments, and other things depending on the use case.&lt;/p&gt;&lt;h2 id="running-terminal-shell-commands-from-within-vim"&gt;Running Terminal/ shell commands from within Vim&lt;/h2&gt;&lt;p&gt;You can run the commands from inside of Vim by just using &lt;code&gt;:!&lt;/code&gt; before the command, this means you have to be in command mode. Just after being in command mode, the ! or bang operator will execute the command typed after it from the terminal(Linux/ macOS) or your default shell(Windows -&amp;gt; CMD/Powershell).&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:!pwd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The above command from vim will redirect to the terminal and show the output of the command and return on pressing any key. In this case, it will execute the PWD command and just wait for the user to enter any key to return to Vim.&lt;/p&gt;&lt;p&gt;The following is an example of how it could be used from Vim in Windows using Powershell as the default shell.&lt;/p&gt;&lt;p&gt;&lt;img alt="Animation.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624885870237/Ie5C-3u1B.gif" /&gt;&lt;/p&gt;&lt;p&gt;In Windows, dir is equivalent of ls for Linux. That was not the best example of how a terminal can be used at its best, You can also use a logical operator from within vim to run multiple commands at once. &lt;/p&gt;&lt;h3 id="running-programs-code-from-vim-on-terminal"&gt;Running programs/ code from Vim on terminal&lt;/h3&gt;&lt;p&gt;This becomes quite a great feature for making Vim from a text editor to an IDE, this can be paired with Keymaps i.e when the user types certain keys, the command gets executed making the code run from the terminal. I have already used this feature to set up Vim for python, bash, and other programming languages. Also, I have written an article about  &lt;a href="https://dev.to/mrdestructive/vim-keymapping-guide-3olb"&gt;keymapping&lt;/a&gt;  and Vim setup for  &lt;a href="https://dev.to/mrdestructive/setting-up-vim-for-python-ej"&gt;Python&lt;/a&gt;  and  &lt;a href="https://techstructiveblog.hashnode.dev/vim-setup-for-bash-scripting"&gt;Bash&lt;/a&gt;, this will give you an idea of how to setup vim for any programming language. &lt;/p&gt;&lt;p&gt;Vim can really shine in this kind of feature as it just becomes flawless and a smooth experience even for a beginner. We just have to run the compile the code and run its executable/ output file, rather for python and other interpreted languages, we have to just pass the file name to the interpreter and that's it.  &lt;/p&gt;&lt;h2 id="opening-instance-of-terminal-within-vim"&gt;Opening instance of Terminal within Vim.&lt;/h2&gt;&lt;p&gt;Vim can also create an instance of the terminal within its window by making a split. This is quite similar to VS Code and other Text editors that have the functionality to create an instance of the terminal within itself. This feature is useful for developing complex systems and depending on the use case, it can be quite important and efficient as well. &lt;/p&gt;&lt;p&gt;The terminal can be created in various ways the most preferred way is by typing in &lt;code&gt;:term&lt;/code&gt; from Vim. This will create a horizontal split from the current editor and split it into half. You can change the size of the split using the mouse according to your preference. &lt;/p&gt;&lt;p&gt;&lt;img alt="vimtermsplit.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624888468392/wR0JT8SBN.gif" /&gt;&lt;/p&gt;&lt;p&gt;Here Vim has certain variables and shortcuts to make things even simpler, say you want to parse the current file to the terminal for execution. You can surely type the name manually or you can be a bit smarter and use % instead, the &lt;code&gt;%&lt;/code&gt; symbol will parse the file name along with the extension in the terminal. Also &lt;code&gt;%:r&lt;/code&gt; will parse filename without the extensions(.txt/.py/etc) to the terminal.&lt;/p&gt;&lt;p&gt;There are many things you can do with terminals surely, but with Vim that even goes further than the limits. Terminal/command line is quite important in any development environment as it is an interface for the user to interact with the Operating System. Vim is quite powerful and behaves as a gecko for programmers because it changes itself according to our needs flawlessly and &lt;strong&gt;efficiently&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt="vimpython.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1624891655340/5f81Dpp_O.gif" /&gt;&lt;/p&gt;&lt;p&gt;Integrating Terminal into a Text Editor truly lights up the environment for development. It becomes an easy and enjoyable experience to test out the code without wasting much time on the actual execution process. Surely it needs time to set up the environment to speed things, for that understanding of the programming and development environment is required. Happy Viming :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/technical-writer-journey'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;My Journey as a Technical Writer&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/techstructive-blog-init'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;What's in Techstructive Blog&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-plus-teminal</guid><pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate></item><item><title>BASH Scripting Guide - PART - 2</title><link>https://mr-destructive.github.io/techstructive-blog/bash-guide-p2</link><description>In this part, topics such as switch cases, mathematical expression, arrays, and strings. This won Topics to be covered in this part are as follows: User Input U</description><content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;&lt;p&gt;In this part, topics such as switch cases, mathematical expression, arrays, and strings. This won't be an in-depth guide to understand each and every concept, but to make users aware of the things and features in Bash. This also would not be an absolute basic guide, I expect to have some basic programming knowledge such as binary systems, logical and mathematical concepts. Don't worry, you won't be bombarded with commands, I'll just explain with easy examples to get started.&lt;/p&gt;&lt;p&gt;Topics to be covered in this part are as follows:- User Input&lt;/p&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- User Prompt- Changing the Delimiter- Password as Input- Limiting the length of Input&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Cases&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Arrays&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Declaring and Printing Arrays&lt;/li&gt;&lt;li&gt;Number of elements in an array&lt;/li&gt;&lt;li&gt;Splicing the array&lt;/li&gt;&lt;li&gt;Inserting and Deleting elements&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Strings&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Making Substrings&lt;/li&gt;&lt;li&gt;String Concatenation&lt;/li&gt;&lt;li&gt;String Comparison&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Arithmetic in Bash&lt;ul&gt;&lt;li&gt;Integer Arithmetic &lt;/li&gt;&lt;li&gt;Floating-Point Arithmetic&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 id="user-input"&gt;User Input&lt;/h1&gt;&lt;p&gt;Taking user input in Bash is quite straightforward and quite readable as well. We can make use of &lt;code&gt;read&lt;/code&gt; command to take in input from the user. We just specify the variable in which we want to store the input.&lt;code&gt;read x&lt;/code&gt; Here, the input will be stored in x. We can also pass in certain arguments to the read command such as -p (prompt with string), -r ( delimiter variation), -a(pass to the array), and others as well. Each of them will make the foundation of various complicated tasks to perform in logical operations. &lt;/p&gt;&lt;h3 id="user-prompt-argument"&gt;User prompt argument&lt;/h3&gt;&lt;p&gt;The -p argument will prompt the user with a string before they input anything. It makes quite informative and useful user input. This becomes quite a useful argument/parameter to make it quite readable and understand what to do directly with much hassle. The below is the general syntax of passing the argument to the read function.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the number &amp;quot;&lt;/span&gt; n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the number &amp;quot;&lt;/span&gt; n&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The inputted number was &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625118915300/NRF7Ci2rK.png" /&gt;&lt;/p&gt;&lt;p&gt;In this example, we can prompt the user with the string &lt;strong&gt;Enter the number&lt;/strong&gt;, and it gives certain information to the user about what to input. &lt;/p&gt;&lt;h3 id="changing-the-delimiter"&gt;Changing the delimiter&lt;/h3&gt;&lt;p&gt;Next, we can make use of -r which depending on the use case, we can change the delimiter while taking the input.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the file path : &amp;quot;&lt;/span&gt; user project app &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="nv"&gt;$project&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625202319183/R9Eo3lg0oU.png" /&gt;&lt;/p&gt;&lt;p&gt;In the above script, we separated the path of a directory(user-entered) into separate components such as the username, project name, and the app name, this can get pretty important and a great tool for automation of making project and application structures. At the beginning of the command, we use IFS which stands for Internal Field Separator, which does the separation of variables based on the field provided, in this case it was &lt;code&gt;//&lt;/code&gt;, you can use any other field characters appropriate to your needs.&lt;/p&gt;&lt;p&gt;This command will change the delimiter, by default it uses spaces or tabs etc to identify distinct input variables but we change it to other internal field separators such as / ,  ,- , |, etc. This can make the user input more customizable and dynamic. &lt;/p&gt;&lt;h3 id="password-typing"&gt;Password Typing&lt;/h3&gt;&lt;p&gt;We can hide the input from the screen so as to keep it confidential and keep sensitive information such as passwords and keys private and protected. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -sp &lt;span class="s2"&gt;&amp;quot;Password: &amp;quot;&lt;/span&gt; pswd&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;the password was &lt;/span&gt;&lt;span class="nv"&gt;$pswd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625161571993/MkCadbyKW.png" /&gt;&lt;/p&gt;&lt;p&gt;We used the -s to keep the input hidden, the screen doesn't reflect what the user is typing, and -p for the prompt to offer the user some information on the text. &lt;/p&gt;&lt;h3 id="limiting-length-of-input"&gt;Limiting Length of Input&lt;/h3&gt;&lt;p&gt;We can limit the user to only a certain number of characters as input. It becomes quite useful in constrained environments such as usernames and passwords to be restricted with a certain limit. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -n &lt;span class="m"&gt;6&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the name: &amp;quot;&lt;/span&gt; n&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625161752440/8xI5Lovxo.png" /&gt;&lt;/p&gt;&lt;p&gt;In the above script, we demonstrate the limit of characters of 6 in the variable n. This restricts the user with only the first 6 characters, it just doesn't exceed ahead, directly to the next command.&lt;/p&gt;&lt;h3 id="passing-to-the-array"&gt;Passing to the array&lt;/h3&gt;&lt;p&gt;Another important argument to be passed after read command is -a which inserts the value to the array elements.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -a nums -p &lt;span class="s2"&gt;&amp;quot;Enter the elements : &amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;\n&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;In the above script, we have used array, don't worry, I'll explain it in the coming sections of this part. We have assigned an empty array and made the user enter those arrays, they are space-separated values. We have used the -a operator to insert the input to the elements of the array. The for loop is range-based which means it will do certain commands until there are no elements left in nums. The command &lt;code&gt;${nums[@]}&lt;/code&gt; indicates every element in the array nums. &lt;/p&gt;&lt;h1 id="cases"&gt;Cases&lt;/h1&gt;&lt;p&gt;Cases are quite a good way of replacing nested if-else statements to make them nice and readable in the script.  Cases in Bash are quite powerful and easy to use compared with C/ C++ styled switch cases. &lt;/p&gt;&lt;p&gt;The general structure of using a case in Bash is as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; variable &lt;span class="k"&gt;in&lt;/span&gt;    pattern &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        statements        &lt;span class="p"&gt;;;&lt;/span&gt;    pattern &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        statements        &lt;span class="p"&gt;;;&lt;/span&gt;    pattern &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        statements        &lt;span class="p"&gt;;;&lt;/span&gt;    pattern &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        statements        &lt;span class="p"&gt;;;&lt;/span&gt;     *&lt;span class="o"&gt;)&lt;/span&gt;        statements        &lt;span class="p"&gt;;;&lt;/span&gt;&lt;span class="k"&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It follows a particular pattern if it matches it stops the search and executes the statements, finally comes out of the block. If it doesn't find any match it redirects to a default condition if any. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash &lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter a name : &amp;quot;&lt;/span&gt; n&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;     admin&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You are logged as root&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;;;&lt;/span&gt;    unknown&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A hacker probably&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;;;&lt;/span&gt;    manager&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Weolcome Manager!&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;;;&lt;/span&gt;    *&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A normal person&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;;;&lt;/span&gt;&lt;span class="k"&gt;esac&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625160454707/YDYGkU34d.png" /&gt;&lt;/p&gt;&lt;p&gt;Seeing the above example, it is quite clear, that it looks quite structured and readable than the nested ladder of If-else statements. Cases are rendered based on the variable after the &lt;code&gt;case&lt;/code&gt; keyword. We use the patterns before &lt;code&gt;)&lt;/code&gt; as making the match in the variable provided before. Once the interpreter finds a match it returns to &lt;code&gt;esac&lt;/code&gt; command which is &lt;code&gt;case&lt;/code&gt; spelled in reverse just like &lt;code&gt;fi&lt;/code&gt; for &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt; for &lt;code&gt;do&lt;/code&gt; in loops :) If it doesn't match any pattern, we have a default case represented by &lt;code&gt;*)&lt;/code&gt; and it executes for any non-matching expression. &lt;/p&gt;&lt;h2 id="arrays"&gt;Arrays&lt;/h2&gt;&lt;p&gt;Arrays or a way to store a list of numbers is implemented in Bash identical to most of the general programming languages. &lt;/p&gt;&lt;h3 id="declaring-and-printing-arrays"&gt;Declaring and Printing Arrays&lt;/h3&gt;&lt;p&gt;We declare an array similar to a variable but we mention the index of the element in the array(0 based index).  We can also simply declare an empty array using the declare command &lt;code&gt;declare -A nums&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash &lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt; \n&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625124595563/TzBEaH1E4.png" /&gt;&lt;/p&gt;&lt;p&gt;The above script initializes an array with some hard-coded elements, surely you can input those from the user. For printing and accessing those elements in the array, We can use a loop, here we have used a range-based for loop. You can use any other loop you prefer. The iterator is " i " and we use $ to access the values from the array, we use &lt;code&gt;{}&lt;/code&gt; as we have nested expression for indexing the element and &lt;code&gt;*&lt;/code&gt; for every element in the array ( &lt;code&gt;@&lt;/code&gt; will also work fine ), that's why range-based for loops make it quite simple to use. And we have simply printed " i " as it holds a particular element based on the iteration. &lt;/p&gt;&lt;p&gt;OR&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -A &lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;44&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625128343654/NCKUzurXe.png" /&gt;&lt;/p&gt;&lt;p&gt;The above script uses declare an array, it can be empty as well after the name declaration. We used the &lt;code&gt;()&lt;/code&gt; to include the values in the array, using indices in the array we assigned the values to the particular index.&lt;/p&gt;&lt;p&gt;If you just want to print the elements, we can use &lt;code&gt;${nums[@]}&lt;/code&gt; or &lt;code&gt;${nums[*]}&lt;/code&gt;, this will print every element without using any iteration loops.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625125456166/85zXjapQ_.png" /&gt;&lt;/p&gt;&lt;h3 id="number-of-elements-in-the-array"&gt;Number of Elements in the array&lt;/h3&gt;&lt;p&gt;To get the length of the array, we can use # in the expression &lt;code&gt;${nums[@]}&lt;/code&gt;, like &lt;code&gt;${#nums[@]}&lt;/code&gt; to get the number of elements from the array.&lt;/p&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625125770005/VzIr8CD7-.png" /&gt;&lt;/p&gt;&lt;p&gt;Since we had 4 elements in the array, it accurately printed 4. &lt;/p&gt;&lt;h3 id="inserting-and-deleting-elements-from-array"&gt;Inserting and Deleting elements from Array&lt;/h3&gt;&lt;p&gt;We can push elements to the array using the assignment operator. &lt;/p&gt;&lt;p&gt;&lt;code&gt;nums=(${nums[@]} 76)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This will push 76 into the array, i.e. in the last index( length -1 index). &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="m"&gt;76&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Length of nums = &lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625126198675/A8IAE-2FR.png" /&gt;&lt;/p&gt;&lt;p&gt;As you can see the element was added at the end of the array, you can also specify the index you want to insert. We can use &lt;code&gt;unset nums[3]&lt;/code&gt; to delete the element at the particular location or we can pop back (delete from the end) an element from the array using the index &lt;code&gt;-1&lt;/code&gt; from the array using the following command.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; nums&lt;span class="o"&gt;[&lt;/span&gt;-1&lt;span class="o"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Any index provided will delete the element at that location by using unset. By using -1, we intend to refer to the last element. This can be quite handy and important as well in certain cases.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; nums&lt;span class="o"&gt;[&lt;/span&gt;-1&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Length of nums = &lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625126770211/LYK2Q0Rp0.png" /&gt;&lt;/p&gt;&lt;p&gt;There you can see we removed the element using unset. &lt;/p&gt;&lt;h3 id="splicing-an-array"&gt;Splicing an Array&lt;/h3&gt;&lt;p&gt;We can splice the array to print/ copy a portion of the array to another one. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]:&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using two colons and numbers in between them, we can print in this case certain elements in the array from a particular range. Here the first number after the colon is the starting index to print from(inclusive) and the next number after the second colon is the length to which we would like to print the element, it is not the index but the number of elements after the start index to be spliced&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;nums&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="m"&gt;76&lt;/span&gt;&lt;span class="nv"&gt;newarr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]:&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;newarr&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625127387739/IH2Fc6ghk.png" /&gt;&lt;/p&gt;&lt;p&gt;In this case, we have copied the slice of an array to another new array using the double colon operator. We added the elements from the 1st index till &lt;code&gt;1+3&lt;/code&gt; indices i.e till 4. 3 is not the index but the length till you would like to copy or print. &lt;/p&gt;&lt;p&gt;This was a basic introduction to arrays, definitely, there will be much more stuff I didn't cover. Just to give an overview of how an array looks like in BASH scripting. Next, we move on to strings.&lt;/p&gt;&lt;h1 id="strings"&gt;Strings&lt;/h1&gt;&lt;p&gt;Strings are quite important as it forms the core of any script to deal with filenames, user information, etc all contain strings or array of characters. Let's take a closer look at how strings are declared, handled, and manipulated in Bash scripting. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625129318948/02V3bpP1I.png" /&gt;&lt;/p&gt;&lt;p&gt;Strings are again declared as normal variables but are enclosed in double quotation marks.  And we access them in the exact same way as we do with variables. If you were to use single quotes instead of double quotes Bash would not interpret the variable name as a variable, it would print the name literally and not the value of the variable, So prefer using double quotes in echo and other commands to make variables accessible.&lt;/p&gt;&lt;h3 id="making-substrings"&gt;Making Substrings&lt;/h3&gt;&lt;p&gt;We can even splice the string as we did with the arrays, in strings we can call it substrings. The syntax is almost identical as we just have to get the variable name.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nv"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$q&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above script, we had a base string 's' which was then sliced from the 6th index to the end, If we do not pass the second number and colon, it interprets as the end of the string and if we do not pass the first number, it will interpret as the first character in the string. We sliced s from the 6th index till the end of the string and copied it in the string 'p''. In the 'q' string, we sliced the first 5 characters from the string 's'. In the 't' string we sliced starting from the 4th index and 3 characters in length i.e till  7th index, not the 7th index.&lt;/p&gt;&lt;p&gt;We can use the # before the variable name to get the length of the string as we saw in the array section. So we can use the &lt;code&gt;echo ${#s}&lt;/code&gt; command to print the length of the string where s is the string variable name. &lt;/p&gt;&lt;h3 id="string-concatenation"&gt;String Concatenation&lt;/h3&gt;&lt;p&gt;String concatenation on Bash is quite straightforward as it is just the matter of adding strings in a very simple way. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$q&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625135997314/_n05RIoTTM.png" /&gt;&lt;/p&gt;&lt;p&gt;The space between the two variables is quite literal, anything you place between this space or the double quotes will get stored in the variable or get printed.&lt;/p&gt;&lt;h3 id="string-comparison"&gt;String Comparison&lt;/h3&gt;&lt;p&gt;Moving on to the string comparison in Bash. String comparison is quite complex in certain programming languages but it's quite straightforward in some languages such as Bash. We can compare strings quite easily in Bash, either they are equal or they are not, it's just comparison operators to perform the heavy-lifting for us. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Equal&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not equal&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625138020711/UWlRN8aPq.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625137884154/7bNPkpGd3.png" /&gt;&lt;/p&gt;&lt;p&gt;From the above code, it is quite clear that the strings as not equal and we compared them with the "equality" operator (=) and checked if that condition was true, and perform commands accordingly. We can also check if the strings are not equal using &lt;code&gt;!=&lt;/code&gt; operator and we can perform commands based on the desired logic. We also have operators to compare the length of the strings. We can use &lt;code&gt;\&amp;lt;&lt;/code&gt; operator to check if the first string is less than the second string(compared characters in ASCII).  And check if the first string is greater than the second string using &lt;code&gt;\&amp;gt;&lt;/code&gt; operator. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="se"&gt;\&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="s2"&gt; is Less than &lt;/span&gt;&lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="s2"&gt; is greater than &lt;/span&gt;&lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Equal&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625137393683/u3WbgDIrN.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625137467448/NP1UXZAbv.png" /&gt;&lt;/p&gt;&lt;p&gt;Here, we are using the ASCII equivalent of strings to compare them as it gives an idea in terms of the value of the strings. We see that 'h'( 104)has a greater ASCII value than 'H" (72) which is why we see the shown outcome. &lt;/p&gt;&lt;p&gt;We also have operators to check for the string being empty or not using the -z operator. Also, we have arguments to pass to the string comparison to check for non-empty strings as well, specifically for input validation and some error handling. &lt;/p&gt;&lt;p&gt;We can quite easily use -n to check for non-empty string and -z for the length of the string being zero.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter a string : &amp;quot;&lt;/span&gt; s&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -s &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;     &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Empty Input&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;   &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Valid input&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625138907051/tbjRDda0U1.png" /&gt;&lt;/p&gt;&lt;p&gt;So the string topic is quite straightforward and self-explanatory as it doesn't how that much complexity but is still powerful and convenient to use.&lt;/p&gt;&lt;h1 id="arithmetic-in-bash"&gt;Arithmetic in Bash&lt;/h1&gt;&lt;p&gt;Performing any Arithmetic operations is the core for scripting. Without arithmetic, it feels incomplete to programmatically create something, it would be quite menial to write commands by hand without having the ability to perform arithmetic operations. &lt;/p&gt;&lt;h3 id="integer-arithmetic"&gt;Integer Arithmetic&lt;/h3&gt;&lt;p&gt;Firstly we quite commonly use operations on variables, so let us see how to perform an arithmetic operation on variables in Bash. We use double curly braces to evaluate certain results of the operations performed on variables. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625139582135/Sb4hdE990.png" /&gt;&lt;/p&gt;&lt;p&gt;We use double curly braces in order to evaluate the operations performed on the variables inside them. We definitely have to use the $ symbol to extract the value of the variable. &lt;/p&gt;&lt;p&gt;We can surely use operators such as addition(&lt;code&gt;+&lt;/code&gt;), subtraction(&lt;code&gt;-&lt;/code&gt;), multiplication(&lt;code&gt;*&lt;/code&gt;), division(&lt;code&gt;/&lt;/code&gt;), and modulus(&lt;code&gt;%&lt;/code&gt;, it stores the remainder of the division,17%3 gets you 2) in statements. We can also perform operations such as &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; to do left bitwise shift and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; right bitwise shift to shift the binary digits in left tor right respectively in a variable. There are also logical operations such as Bitwise and logical AND(&lt;code&gt;&amp;amp;&lt;/code&gt;), OR(&lt;code&gt;|&lt;/code&gt;), EX-OR(&lt;code&gt;^&lt;/code&gt;), and ternary expressions.  &lt;/p&gt;&lt;p&gt;Alternative to double curly braces is &lt;code&gt;expr&lt;/code&gt;, expr allows you to freely wherever you need to evaluate an arithmetic operation. Though this is not native in-built in shells, it uses a binary process to evaluate the arithmetic operations. It can also defer depending on the implementation of such commands in various environments. &lt;/p&gt;&lt;p&gt;We can also use the &lt;code&gt;let&lt;/code&gt; command to initialize a variable and perform expressions in the initialization itself. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;a*a&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b/(a*2)&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can perform quite complex operations using simple implementation using &lt;code&gt;let&lt;/code&gt;, this allows much readable and bug-free scripts.  If you would like to perform operations with brackets and other operations you can enclose the expression in double quotation marks. &lt;/p&gt;&lt;h3 id="floating-point-arithmetic"&gt;Floating-Point Arithmetic&lt;/h3&gt;&lt;p&gt;Performing floating-point arithmetic in Bash is not quite well though. We won't get 100% accurate answers in the expressions this is because it is &lt;strong&gt;not designed&lt;/strong&gt; for such things. Doing &lt;strong&gt;things related to floating-point is a bad idea&lt;/strong&gt;, Still, you can improve the precision to a little extent to do some basic things. I &lt;strong&gt;don't recommend this&lt;/strong&gt; only do this if there are no other options. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; %.9f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result of this is 3.0000000..064 roughly, which is pretty bad. Bash at its core doesn't support floating-point calculations. But there is good news, we have  &lt;a href="https://en.wikipedia.org/wiki/AWK"&gt;awk&lt;/a&gt;  and other tools such as  &lt;a href="https://en.wikipedia.org/wiki/Bc_(programming_language)"&gt;bc&lt;/a&gt;  and others which is planned for the next part in the series. I'll explain awk just for floating-point here, in the next part, I'll cover it in depth. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk -v &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print a/3}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="bashs2.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625157391350/gHudsNntM4.png" /&gt;&lt;/p&gt;&lt;p&gt;WOW! That is to the point, but that was a lot of hassle using echo but printing nothing! HH? OK, you see certain things can get really annoying when things aren't supported natively. Firstly, we use  | to pipe echo command with awk, the echo command doesn't do anything just a way to use awk command in assigning variables here. Then the general syntax of the awk command is &lt;code&gt;awk -options -commands&lt;/code&gt;. In this case, we are using -v as an argument and passing in an as a variable which is equal to a, which is stupid and silly but that is what it is, you can name any variable name you want. Then we simply have to use the variable in the print function which generally evaluates the expressions or other operations and returns to the interpreter. And that is how we print the expression, Phew! That took a while to do some silly things, But hey! That's possible though. &lt;/p&gt;&lt;p&gt;That is the basic overview of Arithmetic in Bash, you can also perform logical operations in it which is very easy and can be understood on a quick run-through in the  &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Arithmetic-Expansion"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I hope you understood the mentioned topics and what are their use cases depending on the requirements. Some topics such as positional parameters, tools and utilities, dictionaries, and some other important aspects of Bash scripting will be covered in the next part. Happy Coding.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-arrays'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Arrays&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/podevcast-project'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Podevcast: A single source for developer podcasts&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-guide-p2</guid><pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Learning BASH by making a Number game</title><link>https://mr-destructive.github.io/techstructive-blog/bash-game-numberjack</link><description>OK The game will ask a number between 0 and 9 to the user. Then a list of 10 numbers shuffled in a random order will appear from of the user along with another </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;OK! Learning BASH can be quite confusing without a proper goal in hand. So this will be a pretty good idea to start learning BASH and have a ton of fun. In this little time, we'll make a Number game which I have designed myself last year in C++, which took about 3 months due to lazy research and wasting time. But I was surprised that I made this game within two hours in BASH. You can refer to the game instructions in this  &lt;a href="https://github.com/Mr-Destructive/NumberJack"&gt;repository at Github&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="concept"&gt;Concept&lt;/h2&gt;&lt;p&gt;The game will ask a number between 0 and 9 to the user. Then a list of 10 numbers shuffled in a random order will appear from of the user along with another list used for indexing the numbers from the array. The user has to select the index beneath its chosen number to proceed ahead. The game loops until the user has failed to enter the correct index of the number or the time for input was exceeded by 5 seconds. The user will get a point for every successful hit. So that is probably the introduction of the game so, let's dive into the specifications.&lt;/p&gt;&lt;h2 id="specifications-of-the-game-in-bash"&gt;Specifications of the Game in BASH&lt;/h2&gt;&lt;p&gt;The game is a number based which means it will need Arithmetic operators a lot. In fact, we'll need a few complex functions such as shuf. We will very frequently use while and for loops to perform some tasks such as filling and printing array and the game loop. We'll use some flag variables to indicate the current situation in the game and finally some arithmetic on arrays and numbers. &lt;/p&gt;&lt;h2 id="script-explanation"&gt;Script Explanation&lt;/h2&gt;&lt;p&gt;The game is quite simple to understand. You just have to select the number beneath your chosen number within 5 seconds in the shell script. We will create a menu-like display in the terminal by simple echo command and formatting. Before the menu, we will have a while loop that will iterate until the user enters 3 which is stored in variable &lt;code&gt;ch&lt;/code&gt; which is initialized to 0 in the beginning so as to enter the loop for the first time. A while loop starts with the do statement and ends at the done statement.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; condition &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="c1"&gt;# statements&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;For loop can be different based on the scenario. We'll use a range-based for loop to iterate over a range of numbers using the { } operators. For loop also has do as the beginning of the loop and done as the end of the loop.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..5&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="c1"&gt;#statements&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We'll also use some If-else statements just to check for the correct user input and checking the exit status. The if statements have &lt;code&gt;then&lt;/code&gt; to start the block and &lt;code&gt;fi&lt;/code&gt; to end the if block. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; condition &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="c1"&gt;#statements&lt;/span&gt;&lt;span class="k"&gt;elif&lt;/span&gt;    &lt;span class="c1"&gt;#statements&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;    &lt;span class="c1"&gt;#statements&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;We use a read statement with the argument -p to have a prompt to the user for some information on the input. The input of choice from the menu i.e 1 to play, 2 for Instructions, and 3 to exit are stored in the variable &lt;code&gt;ch&lt;/code&gt;. If the input is 1, the game will start and it will ask the user for the number &lt;code&gt;n&lt;/code&gt;, which is the number used throughout the loop until the game is over. &lt;/p&gt;&lt;p&gt;Now we have the number for the rest of the game, we need to generate the list for the user to select the number from. We will have a flag sort of to check if the user has entered the correct number which is &lt;code&gt;c&lt;/code&gt;, this will store 0 for correct input(number x) and 1 for incorrect input. It is initialized with 0, again to enter the while loop once before the generation of numbers. &lt;/p&gt;&lt;p&gt;To generate and &lt;strong&gt;shuffle 10 numbers which should not have any repeated numbers&lt;/strong&gt;, as it can have multiple numbers which might be unfair also it might happen that the number chosen by the user might not be present due to repetition. So to avoid that mischief of pseudo-random numbers we have to generate distinct 10 numbers from 0 to 9 in this case. For that, we are gonna use a command in BASH called &lt;code&gt;shuf&lt;/code&gt; which can create some permutation of the elements in a list/array or a sequence of numbers in an input stream. We are gonna use &lt;code&gt;shuf&lt;/code&gt; to generate a random sequence of 10 numbers from 0 to 9 using the command &lt;code&gt;shuf -i 0-9 -n 10&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625748675622/1Li6h3_vX.png" /&gt;&lt;/p&gt;&lt;p&gt;You can see it generated a list of shuffled numbers between 0 to 9 so there are 10 numbers. We'll store this in result an array to access and print them later. You can refer to  &lt;a href="https://www.geeksforgeeks.org/shuf-command-in-linux-with-examples/"&gt;this&lt;/a&gt;  and  &lt;a href="https://www.howtoforge.com/linux-shuf-command/"&gt;these&lt;/a&gt;  articles for understanding shuf.  &lt;/p&gt;&lt;p&gt;The main thing is taken care of, now we need to print the list and also print another list to indicate the index of numbers to the user. We will print the list without a for loop using the &lt;code&gt;@&lt;/code&gt; variable. If you are new to BASH and want a bit guide on BASH please do check out my series on  &lt;a href="https://techstructiveblog.hashnode.dev/series/bash-scripting"&gt;BASH scripting&lt;/a&gt;, I have this all covered. So using &lt;code&gt;@&lt;/code&gt; we can print the entire array in BASH. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625749273007/hf_y4Fm53.png" /&gt;&lt;/p&gt;&lt;p&gt;To print the lower list of indices, we'll use a range-based for loop i.e it will iterate over a range(in this case between 1 to 10), and assign each element the value of the counter i.e from 1 to 10. We are using &lt;code&gt;r&lt;/code&gt; as the shuffled list and &lt;code&gt;a&lt;/code&gt; as the indices list. And print this array with the same method.&lt;/p&gt;&lt;p&gt;After the generation and printing of lists are complete, we'll take the input from the user for the index of his/her number. We'll use an argument in read known as timeout, which will give a stop to the input stream after several seconds provided in the argument. In this case, we will use 5 seconds as a timeout for the input of the index. &lt;code&gt;read -t 5 -p "Enter the index of your number : " x&lt;/code&gt;We'll store the input in &lt;code&gt;x&lt;/code&gt; variable and access it later for verification. &lt;/p&gt;&lt;p&gt;Next, we will check if the input was done before the timeout or not. For this, if the user input before timeout, we can proceed ahead but if the time was over, then we'll get an exit status above 128 so we use this as a checker for the timeout in the input. I came to this via this  &lt;a href="https://www.linux.org/threads/exit-script-by-timeout-if-delay-of-read-input-in-command-line.15905/"&gt;article&lt;/a&gt;, really very helpful. We will break the loop and make the flag &lt;code&gt;c&lt;/code&gt; as 1 indicating an improper input and thus it'll show "GAME OVER". But if you were fast enough then we'll check that the index of the shuffled array has your chosen number or not, we used this &lt;code&gt;${r[$(($x))-1]} -eq $n&lt;/code&gt; to check for the correct number. Why -1? If you remember indexing in the array by default starts with 0, as we have started the second list from 1 hence every element will become offset by 1 hence to avoid that we'll subtract one to refer to that index. &lt;/p&gt;&lt;p&gt;If the index of the number was equal and correct, well done we'll increment the counter of points &lt;code&gt;p&lt;/code&gt; by one and if it was incorrect, the flag will be set to one as previously said and we'll break the loop. After coming out of the loop, we'll check if the status flag &lt;code&gt;c&lt;/code&gt; was 1 if yes, then print the GAME OVER and display the points earned. And that is it. Let's take a look at some gameplay :)&lt;/p&gt;&lt;p&gt;&lt;img alt="numbjackbash.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625753634816/CCUD8OD_K.gif" /&gt;&lt;/p&gt;&lt;h2 id="bash-script"&gt;BASH Script&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\n NumberJack \n&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$ch&lt;/span&gt; -ne &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;  &lt;/span&gt;&lt;span class="s2"&gt;         PLAY : Hit 1 and enter.&lt;/span&gt;&lt;span class="s2"&gt;         HELP : Hit 2 and enter.&lt;/span&gt;&lt;span class="s2"&gt;         EXIT : Hit 3 and enter.&lt;/span&gt;&lt;span class="s2"&gt;         &amp;quot;&lt;/span&gt;    &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter your choice : &amp;quot;&lt;/span&gt; ch    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$ch&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;    &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter any number between 0 and 9 : &amp;quot;&lt;/span&gt; n    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="k"&gt;do&lt;/span&gt;        &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;        &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shuf -i &lt;span class="m"&gt;0&lt;/span&gt;-9 -n &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..10&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="k"&gt;do&lt;/span&gt;            a&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;            &lt;span class="k"&gt;done&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;        &lt;span class="nb"&gt;read&lt;/span&gt; -t &lt;span class="m"&gt;5&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the index of your number : &amp;quot;&lt;/span&gt; x        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -gt &lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;             &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="nb"&gt;break&lt;/span&gt;        &lt;span class="k"&gt;fi&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="p"&gt;-1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -eq &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Great&amp;quot;&lt;/span&gt;            &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;p+1&lt;span class="o"&gt;))&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;            &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;            &lt;span class="nb"&gt;break&lt;/span&gt;        &lt;span class="k"&gt;fi&lt;/span&gt;    &lt;span class="k"&gt;done&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$ch&lt;/span&gt; -eq &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HELP: INSTRUCTIONS TO PLAY THE GAME. &amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;        &lt;span class="nb"&gt;break&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;            &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\nGAME OVER\n&amp;quot;&lt;/span&gt;            &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You scored &lt;/span&gt;&lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="s2"&gt; points&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;        &lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625753738352/qBDF1PFQG.png" /&gt;&lt;/p&gt;&lt;p&gt;This is the final bare-bones script without any help instructions just keeping the script simple. I hope you learned something from the game development in BASH. This is just a fun little project and a cool way of learning certain concepts in BASH such as loops, conditional statements, and arithmetic. Have FUN. Happy CODING :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/podevcast-project'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Podevcast: A single source for developer podcasts&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-deploy-heroku'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django + PostgreSQL Deployment on Heroku&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-game-numberjack</guid><pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate></item><item><title>BASH Scripting Guide - PART - 3</title><link>https://mr-destructive.github.io/techstructive-blog/bash-guide-p3</link><description>Bash or shell won The topics to be covered in this part include the following: Hash tables/dictionaries in BASH Positional parameters Aliases in BASH Some Tools</description><content:encoded>&lt;p&gt;Bash or shell won't be much popular and powerful if they didn't have some tools and utilities baked in. But even further they are supported natively in Bash, which just makes every task and challenge quite hassle-free to deal with. In this part of the series, I'll try to cover an overview of some quite powerful and robust tools and utilities in Bash(shell in general) and also some of the advanced topics like dictionaries and positional parameters. Enough talk let's dive in.&lt;/p&gt;&lt;p&gt;The topics to be covered in this part include the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hash tables/dictionaries in BASH&lt;/li&gt;&lt;li&gt;Positional parameters&lt;/li&gt;&lt;li&gt;Aliases in BASH&lt;/li&gt;&lt;li&gt;Some Tools and utilities&lt;ul&gt;&lt;li&gt;grep/sed/awk&lt;/li&gt;&lt;li&gt;cat/tac/head/tail&lt;/li&gt;&lt;li&gt;cURL&lt;/li&gt;&lt;li&gt;find&lt;/li&gt;&lt;li&gt;bc&lt;/li&gt;&lt;li&gt;wc&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="bash-dictionaries"&gt;Bash dictionaries&lt;/h2&gt;&lt;p&gt;Bash dictionaries or hash tables are just like any other hash tables or keymaps in other programming languages. Bash dictionaries are quite similar to arrays but they have a key instead of the index(0,1,2...) and a value just like arrays. This can be quite useful for storing passwords with emails or usernames or any other way in which a value can be accessed only via a unique key. &lt;/p&gt;&lt;p&gt;To declare a dictionary/ hash table, we can simply write &lt;code&gt;declare -A name&lt;/code&gt;, this will declare an empty hash map for us. Further, we can populate the hash map with keys and values using the same syntax as of array just instead of numbers we can also have strings. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -A fruitsfruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the name of fruit : &amp;quot;&lt;/span&gt; name &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The fruit is &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt; and its color is &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626167875237/A2TxYPNoS.png" /&gt;&lt;/p&gt;&lt;p&gt;The above example depicts a way to declare, define and access the key values in a dictionary. The example may look silly but you get the idea. We can also access every key or value using the &lt;code&gt;@&lt;/code&gt; variable and access the number of key-value pairs using the &lt;code&gt;#&lt;/code&gt; variable just like an array. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -A fruitsfruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!fruits[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There are &lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; key-value pairs.&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626171398570/14jJl2eFs.png" /&gt;&lt;/p&gt;&lt;p&gt;OK, this is very tricky they are the same variables but used slightly differently. Firstly in the range-based for loop &lt;code&gt;${!fruits[@]}&lt;/code&gt;, focus on the &lt;code&gt;!&lt;/code&gt; before the hash table name, this will expand(depict) the hash map's keys. This is used to access every key from the hash table and we can also see &lt;code&gt;#&lt;/code&gt; at the beginning of the hash map name as it is used to represent the entire hash map further in the &lt;code&gt;{#fruits[@]}&lt;/code&gt; we can also use &lt;code&gt;{#fruits[*]}&lt;/code&gt;.  Inside the for loop, &lt;code&gt;i&lt;/code&gt; will be the key, and &lt;code&gt;{fruits[$i]}&lt;/code&gt; will be the value for that &lt;code&gt;i&lt;/code&gt; th key.&lt;/p&gt;&lt;p&gt;Also, you can notice the bash interpreter automatically arranges the map in the alphabetical order of the values and not keys. This is quite a neat little feature that can come in handy a lot of times.&lt;/p&gt;&lt;p&gt;If you want to delete or add any key-value pairs we can do that by the following commands:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; -A fruitsfruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grapes&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!fruits[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There are &lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; key-value pairs.&amp;quot;&lt;/span&gt;&lt;span class="nb"&gt;unset&lt;/span&gt; fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mango&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There are &lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; key-value pairs.&amp;quot;&lt;/span&gt;fruits&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;strawberry&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pink&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;!fruits[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There are &lt;/span&gt;&lt;span class="si"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; key-value pairs.&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626172120966/yCeXpaM9w.png" /&gt;&lt;/p&gt;&lt;p&gt;The above code example is a bit complex but easy enough to understand. We can delete the key-value pair using the unset command and pass in the key along with the hash map name. We can create a key-value pair by simple command as depicted in the above example. This was a basic overview of hash maps/dictionaries in BASH.&lt;/p&gt;&lt;h2 id="positional-parameters"&gt;Positional parameters&lt;/h2&gt;&lt;p&gt;We often use user input from within the script but there is another way to pass in parameters outside of the script using positional parameters. It basically allows us to pass in arguments or parameters from the command prompt/ shell and inside of the script, we can access them via Positional Parameters ( $1, $2, $3....$9, ${10} and so on).&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;first parameter : &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;second parameter : &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eleventh parameter : &amp;quot;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;11&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626159559317/XSyVwkC9U.png" /&gt;&lt;/p&gt;&lt;p&gt;You can see from the above script we have passed the parameters from the command line just after typing the filename. The positional parameter $0 is the file name and from 1 onwards the parameters are optional to run if only your script needs any parameters or input to work with. The numbers are just random and just used for demonstration. The 11th parameter or double-digit parameter starting from 10 onwards, you need to encapsulate the number in {curly braces}&lt;code&gt;${number}&lt;/code&gt; because it won't interpret &lt;code&gt;$10&lt;/code&gt; or any other number as just &lt;code&gt;$1&lt;/code&gt; and print 0. &lt;/p&gt;&lt;p&gt;So we can pass a list of parameters that should be space-separated. We can pass any relevant information such as a string, number, or file names as well. &lt;/p&gt;&lt;p&gt;If we want to access all the parameters passed to the script, we can use &lt;code&gt;@&lt;/code&gt; variable. You may know this symbol from the array section of part-II, it is used to access every element in the array. But here it is used to access every parameter passed to the script just behaving like a list of values.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The parameters passed are: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626160205206/eH6BD1r_Yu.png" /&gt;&lt;/p&gt;&lt;p&gt;To get the number of the parameters passed to the script, we can use &lt;code&gt;#&lt;/code&gt; variable. This is also a variable used in the array section for accessing the number of elements in the array, in this case, the number of parameters in the list.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The parameters passed are: &amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626160630991/jVvJqtCqs.png" /&gt;&lt;/p&gt;&lt;p&gt;Positional parameters allow to not take explicit input from the user from the script. This might not be used for the simple scripts but for administration purposes for the admins and users who know what does the script needs and it allows them to pass in arguments without designing the input system.&lt;/p&gt;&lt;h2 id="bash-aliases"&gt;Bash aliases&lt;/h2&gt;&lt;p&gt;Bash aliases are a great way of reducing the command length and making it much easier to type and work with the scripts or any development-related work. Alias is a file called bash_aliases inside the .bashrc folder that contains our shortcut commands, it has a particular order to map certain commands with others. &lt;/p&gt;&lt;p&gt;Let's see what is an alias first and then we'll see how to set it up.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;cdc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd C:/Users/acer/Desktop/New\ folder/Code/&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will make it viable to just type cdc and I will be in this directory instead of printing all of the jargon. The command we need to use to replace the big command is &lt;code&gt;cdc&lt;/code&gt;. The right command is the variable assigned the command and the left or its value is the command to be replaced with it.&lt;/p&gt;&lt;p&gt;&lt;img alt="shalias.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626163036098/lDwlSdiry.gif" /&gt;&lt;/p&gt;&lt;p&gt;This command will definitely defer on your machine and OS as the filesystems are different in each major operating system. We can quickly make other such alias or shortcuts so to speak for making the development process faster and efficient. &lt;/p&gt;&lt;p&gt;Now let us see how we set up this environment for bash alias, it's quite straightforward. You need to create a hidden file named "bashrc" i.e the file name will be &lt;code&gt;.bashrc&lt;/code&gt;. This file has to be in the root directory (the folder to which bash defaults). I do not mean the &lt;code&gt;root&lt;/code&gt; directory in Linux but the repository in which your bash interpreter opens. Once you have created the file put any alias in the file and source the file using the command:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;And that would do the trick, you can now test your macro or shortcut by opening a new instance of the terminal. If this doesn't work for you, then you can check  &lt;a href="https://opensource.com/article/19/7/bash-aliases"&gt;this article&lt;/a&gt;  for a broader understanding of the setup.&lt;/p&gt;&lt;h2 id="bash-tools-utilities"&gt;Bash tools &amp;amp; utilities&lt;/h2&gt;&lt;p&gt;What would you call BASH without grep or sed man! It's a sad life:( BASH comes with some absolutely powerful and handy tools and utilities such as grep, sed, awk, at, wc, find, tar, gzip, which, make, ping, cURL, wget, ssh, .... my words there is an unstoppable long list. Really they are quite important and lay the foundation for some quite complex tasks. Some web servers can become redundant if some of the tools went missing. Let us find why they are so powerful.&lt;/p&gt;&lt;h3 id="grep"&gt;grep&lt;/h3&gt;&lt;p&gt;GREP or global regular expression print is a tool or command that can find patterns using regular expressions in files/strings or any other piece of data. It's not just printing or searching for the text, besides all that it can also edit the file and store the output in the desired file or any variable by proving some arguments to it. Grep supports Pearl's regular expression as well. There is a lot of customization options and arguments available in grep that can just do anything. It becomes an irreplaceable tool for some complex tasks. &lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626179054053/9ttkV-MZZ.png" /&gt;&lt;/p&gt;&lt;p&gt;The above code finds the pattern "more text" in the file specified and prints the line to the screen, but we can modify the output we want, extract the output in a file and do all kinds of wizardry with this tool. This is just a basic, to get started example but trust me it's more than you think, this tool is used widely for web scrapping and pattern matching in quite a lot of use cases.&lt;/p&gt;&lt;h3 id="sed"&gt;sed&lt;/h3&gt;&lt;p&gt;SED or stream editor is another beast in BASH's toolkit, this is just a flawless tool. No words for this. This is a great tool but still underrated. This can actually edit the text inside the terminal, no graphical environment, no interface at all just commands, but it can do what a huge text editor can't! Save time, just edit text without opening anything except a terminal, becomes unbeatable in large files. This is surely a tiny little application that can skyrocket the efficiency development process. &lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626179410079/BkvdAqkfDS.png" /&gt;&lt;/p&gt;&lt;p&gt;The above example replaces the word &lt;code&gt;more&lt;/code&gt; with &lt;code&gt;less&lt;/code&gt; using the sed command if you type 3g or nth line preceded by g, you will replace the word on the nth line only. In this case, only&lt;code&gt;g&lt;/code&gt; will replace every occurrence of the word.This is again a basic example of a sed command, its more if you go deeper, its more than a tool, its kind of a text-editor for wizards ;) &lt;/p&gt;&lt;h3 id="awk"&gt;awk&lt;/h3&gt;&lt;p&gt;awk or Aho, Weinberger, and Kernighan XD are the names of the developers of this application. This is another mind-blowing tool that can programmatically do a lot of stuff. This is like a programming language to a whole new level that can extrapolate and extract data from files and other forms of data. This is quite a great option if you want to quite neatly do something. It has great support libraries and functions that can even perform complex mathematical and scientific operations.&lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626180322400/hWkEVhPl_.png" /&gt;&lt;/p&gt;&lt;p&gt;These are the topics for separate articles because it is insufficient to explain everything at once.&lt;/p&gt;&lt;h3 id="cat-tac-head-tail"&gt;cat / tac / head / tail&lt;/h3&gt;&lt;p&gt;CAT or concatenate is a tool used for printing out files, create files, sorting the contents of files, editing files, and a plethora of stuff. This command is generally used for printing the file but there is more to it like creating a file directly in the terminal, merging two files, and a ton of other operations. &lt;/p&gt;&lt;p&gt;TAC or reverse of CAT is a tool used for everything that CAT can do but in reverse:) This is a wired tool but still quite useful sometimes.&lt;/p&gt;&lt;p&gt;Head is a tool that will print or edit the text in the first 10 lines of the file, it can be used to extrapolate multiple files with similar content. Tail is a tool that will print or edit the text in the last 10 lines of the file, it can be used just like head but for the last few lines.&lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626180451092/Z5VUpIxCm.png" /&gt;&lt;/p&gt;&lt;p&gt;It turns out, you can not only print the first or last 10 lines but n lines by passing the -n as an argument, there is a ton of stuff to discover, this just drives me crazy.&lt;/p&gt;&lt;h3 id="curl"&gt;cURL&lt;/h3&gt;&lt;p&gt;cURL or client URL is a tool that can be used to transfer data via various network protocols. You might not believe but it is used in cars, televisions, routers, and other embedded systems for exchanging relevant data via appropriate protocols. &lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626181263235/JPocJwoEd.png" /&gt;&lt;/p&gt;&lt;p&gt;This example depicts how we can fetch data from an API using cURL and extract data in JSON format and use it for relevant tasks.This is again one of the best utility out there as it becomes quite remarkable and vintage. Despite being almost 30 years old, it shines bright in the tech world.&lt;/p&gt;&lt;h3 id="find"&gt;find&lt;/h3&gt;&lt;p&gt;Find as the name suggests it is used to find files among the folders and directories in a file system. it becomes quite helpful in complex projects where the directory structure is deep and large. &lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626181386566/zpP9Yaom4.png" /&gt;&lt;/p&gt;&lt;p&gt;The command &lt;code&gt;find *.txt&lt;/code&gt; finds every txt file available on this directory. As simple as it can get. This is surely looking silly and idiotic but it finds its glory in large and complicated codebases. &lt;/p&gt;&lt;h3 id="bc"&gt;bc&lt;/h3&gt;&lt;p&gt;bc or basic calculator is a utility tool for performing mathematical and arithmetical operations in the terminal, this commands gets integrated with other commands such as awk really well and can be used for further extending the limits of what the command line development can do.&lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626182601487/z8X4KeDGG.png" /&gt;&lt;/p&gt;&lt;p&gt;AWW! I could hear the excitement. That just added new dimensions into BASH. Just creativity and resonance to anything is the limit here. I am using  &lt;a href="http://repl.it/"&gt;REPL.IT&lt;/a&gt;  here for using bash as I do not have it on my windows machine :( But that command is truly insane.&lt;/p&gt;&lt;h3 id="wc"&gt;wc&lt;/h3&gt;&lt;p&gt;wc or word count is a utility tool for counting and analyzing the size or count of characters, words, lines, or files in a given file structure. This is quite a handy tool for monitoring and keeping track of a system, also for general development purposes.&lt;/p&gt;&lt;p&gt;&lt;img alt="possh.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626182319602/r8UidHV2z.png" /&gt;&lt;/p&gt;&lt;p&gt;The above command prints out the word and lines in the provided file. This command &lt;code&gt;wc&lt;/code&gt; can even compute the size of files and even more properties of files.Those were some of the quite powerful commands, tools, or utilities in BASH/shell. There are plenty of other commands not covered here because this an extremely large topic and even making separate articles or resources there will certainly and surely be some things that will get missed out, that's the beauty Linux or in general Computer Science has.Ok, that was a lot, but I hope you got some insights for learning more BASH or Linux in general. This is a wide topic and can't be covered entirely in a single article. &lt;/p&gt;&lt;p&gt;Now that is it from this part, everything cannot be covered in any number of parts but at least it will help someone to get started in BASH scripting and its specifications for development. Have a Blast learning BASH. Happy Coding :)&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-guide-p3</guid><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Cryptocurrency Price Scrapping using BASH and Coingecko API</title><link>https://mr-destructive.github.io/techstructive-blog/bash-crypto-scrapper</link><description>Cryptocurrency is in such a hype that it is attracting even nerds and terminal fanboys, it is quite comfortable for such people to view the price inside of thei</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Cryptocurrency is in such a hype that it is attracting even nerds and terminal fanboys, it is quite comfortable for such people to view the price inside of their terminal, also for normal people to learn about how to interact with an API from the local machine. We are gonna make a script about 20 lines in BASH to extract data from the  &lt;a href="https://www.coingecko.com/en/api#explore-api"&gt;coingecko cryptocurrency API&lt;/a&gt; and some tools such as grep and sed. That being said let's start scripting.&lt;/p&gt;&lt;p&gt;&lt;img alt="crypsh.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626354050031/0BRlM7tfs.gif" /&gt;&lt;/p&gt;&lt;p&gt;This is how the script will work like. It is not a fancy script just some basic commands to extract data from the API.&lt;/p&gt;&lt;h2 id="getting-familiar-with-the-api"&gt;Getting familiar with the API&lt;/h2&gt;&lt;p&gt;This is quite an important step as this will decide what type of data we will get from it.  So head out to  &lt;a href="https://www.coingecko.com/en/api#explore-api"&gt;coingecko cryptocurrency API&lt;/a&gt; and start exploring some things yourselves. I am gonna cover everything you need for the script but just for your knowledge and if you are really into crypto. &lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626336264054/dFqhnBjFl.png" /&gt;&lt;/p&gt;&lt;p&gt;Hopefully, you should see the following screen and after clicking on "Get Started", you will see a list of the API endpoints. After playing with it for several hours, I found the perfect and precise endpoint to achieve our target. Many o them work well but the problem with many of them was the precision of the price, there it could not show a reliable price for some low-valued coin/tokens. There are tons of options to choose from, but every option has its own advantage and disadvantage. &lt;/p&gt;&lt;p&gt;Based on my tiny experience, the best fit for the required task will be the "Get historical market data to include price, market cap, and 24h volume (granularity auto)" option in the coin section. It will give the price with very nice precision and also in any national currency as well. So when you find the option, which looks like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626338409604/TPxpUAJ91.png" /&gt;&lt;/p&gt;&lt;p&gt;If you click on that option you will get a button to &lt;strong&gt;"Try it out"&lt;/strong&gt;, just click on it and now you can parse data to the API and respond with the JSON response file like the text below as output. &lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626340029764/-hVg5t0iv.png" /&gt;&lt;/p&gt;&lt;h3 id="filling-in-the-coin-id"&gt;Filling in the coin id&lt;/h3&gt;&lt;p&gt;You need the &lt;strong&gt;id&lt;/strong&gt;which is the code of the cryptocurrency on coingecko so a few ids of famous cryptocurrencies are: &lt;code&gt;bitcoin&lt;/code&gt;, &lt;code&gt;ethereum&lt;/code&gt;, &lt;code&gt;dogecoin&lt;/code&gt;, &lt;code&gt;shiba-inu&lt;/code&gt;, &lt;code&gt;basic-attention-token&lt;/code&gt;, and if you want more coins you can check the coingecko API coins list  &lt;a href="https://api.coingecko.com/api/v3/coins/list"&gt;here&lt;/a&gt; and now you can search using the shortcut F3 and type the name of the coin you require. &lt;/p&gt;&lt;h3 id="filling-in-the-currency"&gt;Filling in the currency&lt;/h3&gt;&lt;p&gt;We need a currency to display the price of the selected coin in terms of a particular currency or its equivalent price in the currency. Every national currency has a code attached to it, for example, USD is the code for US Dollar, INR for Indian Rupee, EUR for Euro, AUD for Australian Dollar, and so on. You can find the list &lt;a href="https://www.iban.com/currency-codes"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="the-number-of-days"&gt;The number of days&lt;/h3&gt;&lt;p&gt;We also need the number of days to indicate the price of the coin before the provided day, but we want today's and latest price, so we can enter the number of days as 0. You can get the price as your wish but we want the current price so we are using 0. &lt;/p&gt;&lt;p&gt;So your request should look somewhat like this, just for particular coin pair:&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626340121389/YkRdtMm-o.png" /&gt;&lt;/p&gt;&lt;p&gt;After filling in with your favorite coin-currency pair, you can now click on &lt;strong&gt;"Execute"&lt;/strong&gt;. You will get a list of prices, volume, market cap, and all of that stuff. It should look somewhat like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626340386948/QepcJHtUV.png" /&gt;&lt;/p&gt;&lt;p&gt;If you look carefully and are aware of the current price, the second item in the prices object is the actual price of ethereum at some point in time. We need to extract that using tools and utilities in BASH. They have also provided a cURL command to fetch the API, how nice of Coingecko :)&lt;/p&gt;&lt;p&gt;So, that was the introduction to the Coingecko API, you can now explore various endpoints and what they respond to, and what are inputs they take. Many of them do not give precise enough price, so check out that as well. &lt;/p&gt;&lt;h2 id="fetching-data-from-the-api"&gt;Fetching data from the API&lt;/h2&gt;&lt;p&gt;Now, we'll finally start coding. Firstly we'll need input from the user, the coin-id, currency code, and optionally the number of days. We will read the input by using the read command and providing the prompt argument. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the coin name: &amp;quot;&lt;/span&gt; coin&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter your national currency: &amp;quot;&lt;/span&gt; crncy&lt;span class="nv"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;#read -p &amp;quot;Enter the number of days before today to get its price: &amp;quot; days&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;I am not inputting the number of days before the equivalent price as it's not our mission, but if have commented on the part if you want to get the price before some days. The day value is hardcoded to 0 meaning the current day. &lt;/p&gt;&lt;p&gt;Now we need the golden piece of this script, the cURL command. The command is just pre-written for us XD. But hey we need to modify it a bit. We need to store the output of the cURL command in a fie for modifying it further. We can use piping the command and avoid using files but that would make the command quite big. So, I just use the files to handle and trim the output according to what I need. &lt;/p&gt;&lt;p&gt;This is the default command that coingecko gave us:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;curl -X &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&amp;amp;days=0&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;  -H &lt;span class="s1"&gt;&amp;#39;accept: application/json&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We send a GET request to the API endpoint with the provide URL and we accept the response in the form of JSON. The -X is for providing the option of either GET, POST, or any other API interaction code. But this is a REST API and we do not want to mess up the database by posting, deleting, or updating anything just to GET the data from the API. We use -H to pass the URL to the head and the type of response in this case JSON. &lt;/p&gt;&lt;p&gt;We'll change the default command to this, &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -o temp.json -X &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;https://api.coingecko.com/api/v3/coins/&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$coin&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/market_chart?vs_currency=&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$crncy&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;days=&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$days&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;  -H &lt;span class="s1"&gt;&amp;#39;accept: application/json&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/null&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We need to modify the URL a bit to make it dynamic. The ethereum or any coin name should be dynamic, the currency should be dynamic, so we will use the variables created before to use now. We will use &lt;code&gt;'$variable'&lt;/code&gt; in between the URL to embed the variable value in it. We change the ethereum or any coin name with &lt;code&gt;'$coin'&lt;/code&gt; and the currency name with &lt;code&gt;'$crncy'&lt;/code&gt; and the same for the days as well. We have to store the output in the temp.json file, we use -o to output the result in the specified file in the cURL command. It's optional to add &lt;code&gt;&amp;amp;&amp;gt; /dev/null&lt;/code&gt; because it just flushes the output of cURL, it looks neater if we add it. &lt;/p&gt;&lt;p&gt;And that is it, we have obtained the JSON response and stored it in a file, we have the access to the data and we just need to edit the file.&lt;/p&gt;&lt;h2 id="editing-the-response-json-file"&gt;Editing the response JSON file&lt;/h2&gt;&lt;p&gt;Now we start the actual editing and pattern finding in BASH. We have a plethora of tools to use like grep, sed, awk, and others, but I'll use only grep to keep things simple. Firstly we need to see the output( JSON file) again. &lt;/p&gt;&lt;p&gt;&lt;img alt="JSON file response" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626345122090/ERfxLQPX-.png" /&gt;&lt;/p&gt;&lt;p&gt;But the file stored locally has everything in a single line, like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626349631809/B0y8F9ruE.png" /&gt;&lt;/p&gt;&lt;p&gt;So, we just need the numbers between &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;]],"market_caps"&lt;/code&gt; right? &lt;/p&gt;&lt;p&gt;OR&lt;/p&gt;&lt;p&gt;The text between &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;]],"m&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;It is quite simple to extract the required value, we will use grep and Pearl Regular Expression. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -o -P &lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=,).*(?=]],&amp;quot;m)&amp;#39;&lt;/span&gt; temp.json &amp;gt; price.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We are finding anything between the &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;]],"m&lt;/code&gt; from the temp.json file and storing the output in the price.txt file.  As simple to use and we have the current price of the coin in terms of the provided currency in the file price.txt.&lt;/p&gt;&lt;p&gt;Now we have obtained the result in a crystal clear way, we need to store the price in a variable just for further usage and simplicity.We'll use a while loop that iterates over the file until it is End of the File. We'll store the value in the variable in the following way:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; val&lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; price.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The value in the &lt;code&gt;p&lt;/code&gt; variable. But we are not done yet, because if we see some values of certain coins which have quite low value, it displays in the scientific format. We'll tackle this in the next section.&lt;/p&gt;&lt;h2 id="converting-the-price-from-scientific-notation-to-decimal"&gt;Converting the price from scientific notation to decimal&lt;/h2&gt;&lt;p&gt;If you try to print the values of coins with pretty low value like &lt;code&gt;shiba-inu&lt;/code&gt; or &lt;code&gt;baby-doge-coin&lt;/code&gt; or any other coin with less value then a penny. The value is expressed in scientific notation i.e like &lt;code&gt;1.998e-5&lt;/code&gt; i.e &lt;code&gt;0.00001998&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626351434484/3GeTI-kn0.png" /&gt;&lt;/p&gt;&lt;p&gt;This is not good-looking, is it? &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%.15f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The above command is quite similar to the C language. We are printing the value in the &lt;code&gt;p&lt;/code&gt; variable with a precision of 15 decimal values, that is enough for any serious small value coin.&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626351561755/uPyHXMhd7.png" /&gt;&lt;/p&gt;&lt;p&gt;Now that was much better. That is it! How simple was that. Really BASH has some powerful commands and tools.&lt;/p&gt;&lt;h2 id="printing-the-price"&gt;Printing the price&lt;/h2&gt;&lt;p&gt;Finally, we need to print the output, and to keep it simple, we can print using the echo command.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The value of &lt;/span&gt;&lt;span class="nv"&gt;$coin&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="nv"&gt;$crncy&lt;/span&gt;&lt;span class="s2"&gt; is = &lt;/span&gt;&lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="coing.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626353654753/ajVMws8d6.png" /&gt;&lt;/p&gt;&lt;h2 id="script"&gt;Script&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the coin name : &amp;quot;&lt;/span&gt; coin&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter your national currency : &amp;quot;&lt;/span&gt; crncy&lt;span class="nv"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="c1"&gt;#read -p &amp;quot;Enter the number of days past today: &amp;quot; days&lt;/span&gt;touch temp.json price.txtcurl -o temp.json -X &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;https://api.coingecko.com/api/v3/coins/&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$coin&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/market_chart?vs_currency=&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$crncy&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;days=&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$days&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;  -H &lt;span class="s1"&gt;&amp;#39;accept: application/json&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt; /dev/nullgrep -o -P &lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=,).*(?=]],&amp;quot;m)&amp;#39;&lt;/span&gt; temp.json &amp;gt; price.txt&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; val&lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; price.txt&lt;span class="nv"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%.15f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The value of &lt;/span&gt;&lt;span class="nv"&gt;$coin&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="nv"&gt;$crncy&lt;/span&gt;&lt;span class="s2"&gt; is = &lt;/span&gt;&lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;rm temp.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That was it, I hope you liked it and learned something along with me. BASH truly has the potential to do a whole lot of stuff. This was just one of the many examples where we can do some data gathering or scraping from the web using various tools and utilities. Thank you for listening to me. Happy Coding:)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/flask-django-frameworks'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Flask and Django - the backend web frameworks&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-arrays'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Arrays&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-crypto-scrapper</guid><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Enhancing Editing Speed</title><link>https://mr-destructive.github.io/techstructive-blog/vim-editing-speed</link><description>Editing/ Writing is a crucial part of any text editor, the swiftness with which one can make changes in a file(s) or a structure is a bit dependent on the edito</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Editing/ Writing is a crucial part of any text editor, the swiftness with which one can make changes in a file(s) or a structure is a bit dependent on the editor we use as well. Vim can be a bit hassle for beginners in the initial stage but it becomes second nature soon. It also depends majorly on the level of usage and the area of usage. If you are an advanced programmer, you will use these commands extensively, and might not be a big deal for you, But for a beginner, it might take some time to get used to the workflow in Vim.&lt;/p&gt;&lt;p&gt;This article won't be covering the basics of editing in Vim but the ways to save time on the basic level commands to improve efficiency. That being said, beginners can also read to be aware of the possibilities and tricks in Vim. &lt;/p&gt;&lt;p&gt;Below are some quick basic commands for getting started in editing and improving the overall workflow. &lt;/p&gt;&lt;h3 id="entering-in-into-the-insert-mode"&gt;Entering in into the Insert Mode&lt;/h3&gt;&lt;p&gt;&lt;code&gt;i&lt;/code&gt;  -&amp;gt; Enter into &lt;strong&gt;Insert mode&lt;/strong&gt; from the cursor.&lt;/p&gt;&lt;p&gt;&lt;code&gt;I&lt;/code&gt;   -&amp;gt; Enter into &lt;strong&gt;Insert mode&lt;/strong&gt; from the beginning of the current line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt;   -&amp;gt; Enter into &lt;strong&gt;Insert mode&lt;/strong&gt;  just after the cursor.&lt;/p&gt;&lt;p&gt;&lt;code&gt;A&lt;/code&gt;   -&amp;gt; Enter into &lt;strong&gt;Insert mode&lt;/strong&gt; from the end of the current line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;o&lt;/code&gt;   -&amp;gt; Enter into &lt;strong&gt;Insert mode&lt;/strong&gt; below the current line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;O&lt;/code&gt;   -&amp;gt; Enter the &lt;strong&gt;Insert mode&lt;/strong&gt; above the current line.&lt;/p&gt;&lt;p&gt;The above commands are purely to add text in the line or above or below the line without deleting anything.&lt;/p&gt;&lt;p&gt;The following commands will delete some characters/words/lines and then entering into the Insert mode.&lt;/p&gt;&lt;p&gt;&lt;code&gt;s&lt;/code&gt;   -&amp;gt; delete the character under the cursor and enter into &lt;strong&gt;Insert mode&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cw&lt;/code&gt;  -&amp;gt; Delete the word under cursor and enter into &lt;strong&gt;Insert mode&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;S&lt;/code&gt;   -&amp;gt; delete the entire line under the cursor and enter into &lt;strong&gt;Insert mode&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id="cut-copy-paste-commands"&gt;Cut Copy Paste Commands&lt;/h2&gt;&lt;p&gt;This set of commands are quite helpful as a programmer and it is used quite frequently. These commands can surely boost the time to cut-copy-paste but also they will provide more customization to the way you do these tasks.&lt;/p&gt;&lt;h3 id="cutdelete-commands"&gt;Cut/Delete Commands&lt;/h3&gt;&lt;p&gt;The below-mentioned commands can be used in Normal or any Visual/ Selection mode as it depends whether you have selected the text or you want to work in Normal mode itself. &lt;/p&gt;&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;  -&amp;gt; Delete the current entire line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;dw&lt;/code&gt;  -&amp;gt; Delete the word on the cursor.&lt;/p&gt;&lt;p&gt;&lt;code&gt;d0&lt;/code&gt; -&amp;gt; Deletes the line from the current cursor position to the beginning of the line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;D&lt;/code&gt; or &lt;code&gt;d$&lt;/code&gt; -&amp;gt; Deletes the line from the current cursor position to the end of the line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;d&lt;/code&gt;  -&amp;gt; Delete the selected text (only in Visual/Visual-Line/Visual-Block/Selection mode).&lt;/p&gt;&lt;p&gt;&lt;code&gt;x&lt;/code&gt;  -&amp;gt; Delete the character under the cursor.&lt;/p&gt;&lt;h3 id="yankcopy-commands"&gt;Yank/Copy Commands&lt;/h3&gt;&lt;p&gt;The following commands are used in the Normal mode as they perform the copying of text with words and lines only.&lt;/p&gt;&lt;p&gt;&lt;code&gt;yw&lt;/code&gt; -&amp;gt; yank(copy) the word on the cursor.&lt;/p&gt;&lt;p&gt;&lt;code&gt;y$&lt;/code&gt;  -&amp;gt; yank(copy) line till the end from the current cursor position.&lt;/p&gt;&lt;p&gt;&lt;code&gt;yy&lt;/code&gt;  -&amp;gt; yank(copy) the current entire line to the unnamed register ("").&lt;/p&gt;&lt;p&gt;You have to be in Visual/ Visual line/ Selection mode to yank the text for the next set of yanking commands. &lt;/p&gt;&lt;p&gt;&lt;code&gt;y&lt;/code&gt;  -&amp;gt; yank(copy) the selected text to the unnamed register ("").&lt;/p&gt;&lt;p&gt;&lt;code&gt;"+y&lt;/code&gt; -&amp;gt; yank(copy) the selected text to the system clipboard ("+ register).&lt;/p&gt;&lt;h3 id="paste-commands"&gt;Paste Commands&lt;/h3&gt;&lt;p&gt;&lt;code&gt;p&lt;/code&gt;   -&amp;gt; Paste the content of the unnamed register("") below the cursor.&lt;/p&gt;&lt;p&gt;&lt;code&gt;P&lt;/code&gt;   -&amp;gt; Paste the content of the unnamed register("") above the cursor.&lt;/p&gt;&lt;p&gt;&lt;code&gt;"+p&lt;/code&gt;  -&amp;gt; Paster the content of system clipboard ("+ register) to the cursor.&lt;/p&gt;&lt;h3 id="replacing-text"&gt;Replacing Text&lt;/h3&gt;&lt;p&gt;Replacing is a great option for instant productivity, if you want to make some minor changes, you don't have to go into insert mode and delete and then edit the text. Instead, the replace commands such as &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; allow us to replace some characters being in Normal and Replace mode respectively. This can be used very heavily if you just want to replace it instead of adding/removing text.&lt;/p&gt;&lt;p&gt;&lt;code&gt;r&lt;/code&gt;   -&amp;gt; replace the character under the cursor with the following key entered from the keyboard.&lt;/p&gt;&lt;p&gt;&lt;code&gt;R&lt;/code&gt;   -&amp;gt; Enter into &lt;strong&gt;Replace mode&lt;/strong&gt;( replace the character with the specified word from the keyboard). &lt;/p&gt;&lt;h3 id="undoing-and-redoing"&gt;Undoing and Redoing&lt;/h3&gt;&lt;p&gt;We often make mistakes and want to revert to the changes we have to make and start from the last save. The following sets of commands will make us do exactly that.&lt;/p&gt;&lt;p&gt;&lt;code&gt;u&lt;/code&gt;   -&amp;gt; Undo the last made changes before saving.&lt;/p&gt;&lt;p&gt;&lt;code&gt;U&lt;/code&gt; -&amp;gt; Restore the changes in the entire line.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;C-R&amp;gt;&lt;/code&gt;   -&amp;gt; Redo the last undo (un-undo -&amp;gt; revert back changes).&lt;/p&gt;&lt;h3 id="search-and-replacement"&gt;Search and Replacement&lt;/h3&gt;&lt;p&gt;Some of the below-mentioned commands are a great set for bulk replacement and addition. We can either replace a particular pattern in the entire file or in specific parts of the file as mentioned and explained as follows:&lt;/p&gt;&lt;p&gt;&lt;code&gt;:%s/old/new&lt;/code&gt;  -&amp;gt; Replace the word &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in the entire file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;:4s/old/new&lt;/code&gt;  -&amp;gt; Replace the word &lt;code&gt;old&lt;/code&gt; with the word &lt;code&gt;new&lt;/code&gt; on line 4( where 4 can be any number of lines in the file).&lt;/p&gt;&lt;p&gt;&lt;code&gt;:2, 9s/old/new&lt;/code&gt;  -&amp;gt; Replace the word &lt;code&gt;old&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; between the lines 2 and 9 inclusive(where 2 and 9 can be any number of lines in the file).&lt;/p&gt;&lt;p&gt;&lt;code&gt;:%s/^/This&lt;/code&gt;  -&amp;gt; Add &lt;code&gt;This&lt;/code&gt; to the beginning of each line in the file.&lt;/p&gt;&lt;p&gt;&lt;code&gt;:%s/$/That&lt;/code&gt;  -&amp;gt; Append the word &lt;code&gt;That&lt;/code&gt; to the end of each file.&lt;/p&gt;&lt;p&gt;You can notice that the &lt;code&gt;%&lt;/code&gt; symbol here indicates the entire file. We can skip prefixing s with &lt;code&gt;%&lt;/code&gt; to make changes only in the current line or any number of lines specified instead of it. This command is quite a lot customizable and powerful, I can't show each and every combination of this command. It should be used as per requirement and thus should be modified accordingly.&lt;/p&gt;&lt;h3 id="indenting-text"&gt;Indenting Text&lt;/h3&gt;&lt;p&gt;Indenting is quite important in certain languages like Python, YAML, Haskell, etc. This can get really frustrating if you even miss a single indentation, you have to format everything to a proper indentation scratch. But thanks to powerful Text-editors and IDEs which have made the indentation quite easy and even auto-correct the wrong indentation. Vim has some commands to make those indentations much easier and it also has a customizable number of spaces in its config file called vimrc.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;  -&amp;gt; Indent or shift the current line to the right. (normal mode)&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;  -&amp;gt; Unindent shift the current line to the left. (normal mode)&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;   -&amp;gt; Indent or shift the selected text to right. (Visual/Visual-line/VIsual-block/Select mode)&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;  -&amp;gt; Unindent or shift the selected text to left. (Visual/Visual-line/VIsual-block/Select mode)&lt;/p&gt;&lt;p&gt;If your file is saved as a particular language that supports indentation, it will automatically indent lines for you but it cannot be reliable. So, we need to &lt;a href="https://github.com/Yggdroot/indentLine"&gt;IndentLine&lt;/a&gt;, and others as well. &lt;/p&gt;&lt;h2 id="miscellaneous"&gt;Miscellaneous&lt;/h2&gt;&lt;p&gt;&lt;code&gt;~&lt;/code&gt; -&amp;gt; Convert the character under the cursor to upper case/ lower case.&lt;/p&gt;&lt;p&gt;&lt;code&gt;vip&lt;/code&gt; -&amp;gt; Yank a entire paragraph ( till empty line).&lt;/p&gt;&lt;p&gt;&lt;code&gt;gu&lt;/code&gt; -&amp;gt; Convert the selected text into lowercase. (Visual/Select Mode)&lt;/p&gt;&lt;p&gt;&lt;code&gt;gU&lt;/code&gt; -&amp;gt; Convert the selected text into Uppercase. (Visual/Select Mode)&lt;/p&gt;&lt;p&gt;All of the above commands were somewhat basic and commonly used but if used along with other key shortcuts for movement can also improve the editing speed quite considerably. Just keep using these commands and you'll be amazed by the speed you've developed. Thanks for reading. Happy Coding :)&lt;/p&gt;&lt;p&gt;References:  &lt;a href="https://catswhocode.com/vim-commands/"&gt;catswhocode&lt;/a&gt;  &lt;a href="https://thevaluable.dev/vim-advanced/"&gt;The valuable dev&lt;/a&gt; &lt;a href="https://vim.rtorr.com/"&gt;rtorr.com&lt;/a&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-database-conf'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Database Configurations&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/hacktoberfest-2021'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Hacktoberfest 2021&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-editing-speed</guid><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Registers</title><link>https://mr-destructive.github.io/techstructive-blog/vim-registers</link><description>Have you ever found it difficult to manage and operate text in Vim, especially in Cut/Copy/Paste stuff. You cannot figure out how on earth am I supposed to retr</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Have you ever found it difficult to manage and operate text in Vim, especially in Cut/Copy/Paste stuff. You cannot figure out how on earth am I supposed to retrieve my un-saved, un-committed changes in Vim. Then this my dear friend is an article for you. You will learn what are Vim registers and where your deletes and copied stuff resides. This won't be a comprehensive guide but enough to let you through in performing the wizardry of registers in Vim.&lt;/p&gt;&lt;h2 id="what-are-vim-registers"&gt;What are Vim Registers?&lt;/h2&gt;&lt;p&gt;Vim Registers are memory addresses that store data. Technically they are spaces of memory that Vim can store to retrieve later. It can store text, operations, commands, and anything you can do with text in Vim. &lt;/p&gt;&lt;h2 id="access-vim-register"&gt;Access Vim Register&lt;/h2&gt;&lt;p&gt;To store something in register &lt;code&gt;x&lt;/code&gt; we can use the format &lt;code&gt;"[register-name][command]&lt;/code&gt;. This will perform the command and store the output in the register specified.&lt;/p&gt;&lt;p&gt;A register can be accessed by using the double quotes &lt;code&gt;"&lt;/code&gt; before its name. Let's say we have stored something in x register we can access its content using "x in the normal mode and lastly we can perform commands here.&lt;/p&gt;&lt;p&gt;&lt;img alt="vimreg.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626940084837/x99b92Wsq.gif" /&gt;&lt;/p&gt;&lt;p&gt;For example, in the above gif, I tanked the selected text using the yank command but I stored it in the register x by prefixing the command with &lt;code&gt;"x&lt;/code&gt;. Hence the command became &lt;code&gt;"xy&lt;/code&gt; and similarly for pasting from the x register we can use &lt;code&gt;"xp&lt;/code&gt;, quite simple, right? But what is the purpose of it? This can really shine in handling multiple files and imagine you lost your yanked text by using yank somewhere else. Vim registers add extra dimensions in storing and retrieving text, it is not used often but can shine really well in certain tricky situations. &lt;/p&gt;&lt;h2 id="commonly-used-vim-registers"&gt;Commonly used Vim Registers&lt;/h2&gt;&lt;p&gt;You will use some Registers daily in Vim if you use it all the time. Some common ones are the clipboard registers/ selection registers &lt;code&gt;"+&lt;/code&gt; and &lt;code&gt;"*&lt;/code&gt;. These are used to perform operations on the content stored in the system clipboard. They come quite handy in copy and paste in Vim from other applications such as Stack Overflow XD. Just kidding, it can be used in any other application on the system. We can add &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; after the registers to paste and respectively in Vim, so to paste and yank text to and from Vim, you can use &lt;code&gt;"+p&lt;/code&gt; and &lt;code&gt;"+y&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="types-of-vim-registers"&gt;Types of Vim Registers&lt;/h2&gt;&lt;p&gt;There are many different types of vim registers used for particular needs and also some for custom editing. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="26-named-registers-a-to-z"&gt;26 Named registers (&lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are the registers just for you. You can use this for whatever copy/pasting/editing and other creative stuff you could do with this. In the example where we utilized the &lt;code&gt;x&lt;/code&gt; register, which was one of them. We can use a to z any register we want, it just boils down to the ease of the key combination as per preference. &lt;strong&gt;Remember anything you yank into any register will also be stored in the unnamed register (discussed later)&lt;/strong&gt;. &lt;/p&gt;&lt;p&gt;Also, if you try to use capital named registers (A-Z), the content will be appended to the lowercase named registers as well along with the unnamed register. Making it a bit safer to work with but messy at the same time. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="10-numbered-registers-0-to-9"&gt;10 numbered registers (&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are the registers updated automatically filled in by Vim, they store the recently yanked or deleted content in the current buffer. - The &lt;code&gt;0&lt;/code&gt; register stores the most recent yanked/copied text.- The &lt;code&gt;1&lt;/code&gt; register stores the most recent deletion of text.- The &lt;code&gt;2&lt;/code&gt; register stores the 2nd most recent deletion. &lt;/p&gt;&lt;p&gt;.. and so on.&lt;/p&gt;&lt;p&gt;The content of the 9th register is flushed away every single time you delete something. The contents are shifted to the next numbered registers every time there is a deletion. For example, If we delete something the content is stored in the &lt;code&gt;1&lt;/code&gt; register but its previous content gets shifted to the &lt;code&gt;2&lt;/code&gt; register, and so on. So we have 9 clipboards for our deletion history. That is undoubtedly a powerful thing.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="selection-and-drop-registers-and"&gt;Selection and drop registers (&lt;code&gt;*&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , and &lt;code&gt;~&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As discussed earlier, Selection registers are used for storing the contents of the system clipboard. There are differences in the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; for Unix-like operating systems but they can do similar things. In Unix-like Operating systems, the &lt;code&gt;*&lt;/code&gt; register stores the text from the mouse selection in the X Window, whereas the &lt;code&gt;+&lt;/code&gt; register is used to store the text system clipboard. On Windows and other operating systems besides Unix-like, both of them function similarly.&lt;/p&gt;&lt;p&gt;The Drop register &lt;code&gt;~&lt;/code&gt; is available only for the Gvim version as it stores the text from the last drag and drops/drag down operations performed. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="read-only-registers-and"&gt;Read-only registers (&lt;code&gt;:&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The registers &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt; are Read-only, which means you cannot change their content, they are modified and maintained by VIm automatically. &lt;/p&gt;&lt;p&gt;Using the &lt;code&gt;:&lt;/code&gt; register, we can get the content of any register in the Insert mode so that we can copy the contents and edit if we have stored it in some registers. This is quite a neat little feature, not used most of the time but it can become the most powerful tool in corner cases and tricky situations. &lt;/p&gt;&lt;p&gt;&lt;img alt="vimc-r.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626946965392/KBSZmxOHvi.gif" /&gt;From the example in the gif, we deleted the line, and hence the content was stored in register 1 so when we press &lt;code&gt;Ctrl + R&lt;/code&gt; in Insert mode, we can now paste in the contents of any register. Here we used the register &lt;code&gt;1&lt;/code&gt; to get our content back. &lt;/p&gt;&lt;p&gt;The &lt;code&gt;%&lt;/code&gt; register holds the name of the current file, this is really a great and life-saving editor, as it is also used in automating the compilation and running of the source files from Vim itself. &lt;/p&gt;&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; register contains the last inserted text, this can also be used in various scenarios. They make Vim a bit polished and well organized.&lt;/p&gt;&lt;p&gt;&lt;img alt="vimc-r.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626948017124/dQCky3kfC.gif" /&gt;&lt;/p&gt;&lt;p&gt;From the above gif, we inserted some text, and using the Read-only register, we inserted the last inserted text to the screen using the &lt;code&gt;.&lt;/code&gt; register and also we used the register &lt;code&gt;%&lt;/code&gt; to get the current file name.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="expression-and-search-pattern-register"&gt;Expression and Search pattern register (&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The register &lt;code&gt;=&lt;/code&gt; is used to perform operations and store them in the register. Vim has some built-in functions and some of them are listed  &lt;a href="https://renenyffenegger.ch/notes/development/vim/script/vimscript/functions/index"&gt;here&lt;/a&gt;. We can use these functions after we type &lt;code&gt;Ctrl + R&lt;/code&gt; in insert mode and &lt;code&gt;=&lt;/code&gt; to assign it to the register &lt;code&gt;=&lt;/code&gt;. I have used some simple multiplication operations in the above gif, but you can take this further however you like and desire. &lt;/p&gt;&lt;p&gt;The register &lt;code&gt;/&lt;/code&gt; takes searching in Vim even further. We use /pattern in normal mode to search for the pattern. But the actual work is done with help of the register. We actually store the text in the register and Vim accesses it later t find the next pattern or any other operations performed with the pattern. This is again a read-only register but you can change its content using some methods and practices. It is not preferred to change the read-only registers as it can mess up the functions of Vim.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="small-delete-and-the-alternate-file-register-"&gt;small delete and the alternate file register (&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Small delete is quite a meaningful and sensible word to put in the context of its functioning. The &lt;code&gt;-&lt;/code&gt; register or small delete register stores the content of some small deletes like characters or words. Basically, anything smaller than a line is small for Vim. If you delete something let's say a word from a line, it'll be stored in the &lt;code&gt;-&lt;/code&gt; register. &lt;/p&gt;&lt;p&gt;The '#' register or alternate file register is the register that stores the alternate file in Vim. An alternate file is a file edited before the current file in Vim. If you edited a &lt;code&gt;file-x&lt;/code&gt; and now you are in the &lt;code&gt;file-y&lt;/code&gt;, the &lt;code&gt;file-x&lt;/code&gt; becomes your alternate file. &lt;/p&gt;&lt;p&gt;&lt;img alt="vimc-r.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626950574633/P7U01Ssy_.gif" /&gt;&lt;/p&gt;&lt;p&gt;This example shows how we can use the small delete register to retrieve back the small deletions. Also, we saw the current file and alternate files in Vim and in which registers they are stored.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="unnamed-and-black-hole-register-_"&gt;Unnamed and black hole register (&lt;code&gt;"&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;)&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Unnamed register &lt;code&gt;"&lt;/code&gt;, simply to put in it is a register which stores everything from deletions to yank. It stores the text performed by the d, D, x, X, s, S, c, C, y, Y, some variants of these commands. This is quite good and a bad feature sometimes. It is nice to have such types of registers in hand. &lt;/p&gt;&lt;p&gt;Wear your space goggles as we see will how Black holes work :) Blackhole register is an elegant touch to the series of registers we have. The register acts as a sink for our deletions. We can simply dump anything we don't care about in this register. This register helps in scenarios where we want to avoid adding stuff from deletions to the named or numbered registers. Isn't it like Blackholes? Just Swallow the things. &lt;/p&gt;&lt;p&gt;&lt;img alt="vimc-r.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626951775215/OEanNfA4a.gif" /&gt;The above example makes it clear that we simply dump the deletion to the &lt;code&gt;_&lt;/code&gt; register and avoid changing the rest of the registers which may replace the deletion and lose the saved configuration or set up of registers. We first deleted the line &lt;code&gt;solve(s);&lt;/code&gt; and dumped the statement &lt;code&gt;string s = "0110&lt;/code&gt; into the black hole register &lt;code&gt;_&lt;/code&gt;, when we retrieve with thee unnamed register &lt;code&gt;"&lt;/code&gt; we get back the deleted statement rather than the dumped statement. Quite neat and elegant.&lt;/p&gt;&lt;h2 id="where-can-you-use-vim-registers"&gt;Where can you use Vim registers&lt;/h2&gt;&lt;p&gt;Well, this may differ as per the experience with your programming journey, you may find it useless as a beginner but mind you this is some extraordinary stuff that can boost some development time. You may be tempted to use it the scenarios where there is a huge depth in file systems and the code to be edited is a lot for you. When you have a ton of things to be edited systematically, this concept can add  lights and dimensions to your work and make it comfortable and risk-free. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;&lt;img alt="vimregistertable.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1626953924487/2bPqejVkT.png" /&gt;The above chart is quite simple to remember if you are really into making Vim for complex projects and even for staying productive in Vim editor. Hope you find it interesting and easy to remember.This was a small introduction to Vim-registers but is a small topic with extensive usage and skill-dependent concept. Vim is already a customizable editor, registers add an extra dimension to its customizability in editing and programming. Thank you for listening to me. Happy Coding :)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; : &lt;a href="https://www.baeldung.com/linux/vim-registers"&gt;baeldung.com&lt;/a&gt;, &lt;a href="https://www.brianstorti.com/vim-registers/"&gt;brianstorti.com&lt;/a&gt;&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-operators'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Operators&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-for-python'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Setting up Vim for Python&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-registers</guid><pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Scrapping the meaning of a word from dictionary.com using BASH script.</title><link>https://mr-destructive.github.io/techstructive-blog/bash-dictionary-scrapper</link><description>Web Scraping is quite an interesting and powerful tool or skill to have in a Programmer For this article, we aim to fetch the meaning of a word entered by the u</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Web Scraping is quite an interesting and powerful tool or skill to have in a Programmer's toolkit.  It helps in analyzing data and getting some information in various formats. Web Scraping is a process in which a user fetches a website's content using some pattern in those HTML tags and the desired content to be fetched or scraped.&lt;/p&gt;&lt;p&gt;For this article, we aim to fetch the meaning of a word entered by the user from the dictionary.com website. We need to print just the meaning of the word from the HTML tags in it. We must have a good understanding of HTML and some basic Linux tools such as cURL, grep, sed, and others for doing all of these. &lt;/p&gt;&lt;p&gt;&lt;img alt="Inspecting the Target Website" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625737499658/FGLusWSII.png" /&gt;&lt;/p&gt;&lt;h2 id="inspecting-the-target-website"&gt;Inspecting the Target Website&lt;/h2&gt;&lt;p&gt;To begin with, scrapping the website, first, it is absolutely important to inspect the website and view its source code. For that, we can make use of Inspect tool in our Browsers. Just Right-click on the website you are viewing or the website for scraping, a list of options appears in front of you. You have to select Inspect option( also Shift + Ctrl + I), this will open a side window with a plethora of options. You simply have to select Elements from the top of the menus. The code that you will see is the source code of the website. No, don't think you can change the content of the website from here :)&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1625737510444/KonUrEpcq-.png" /&gt;Inspect Tool in the browser.&lt;/p&gt;&lt;p&gt;Now we have to analyze the website with the content which we want to scrape. You can go on for clicking the &lt;code&gt;select the element in the page to inspect it&lt;/code&gt; option or icon in the top left-hand side corner. This will allow you to inspect the particular element that you selected on the webpage. You can now see the element tag, id, class, and other attributes required to fetch the element's content.&lt;/p&gt;&lt;h2 id="selecting-the-particular-element-from-the-website-to-view-the-source-code"&gt;Selecting the particular element from the website to view the source code.&lt;/h2&gt;&lt;h3 id="accessing-the-website-from-the-command-lineterminal"&gt;Accessing the website from the Command line/terminal&lt;/h3&gt;&lt;p&gt;Now the website structure is being understood we can actually move to scrap it. For that, we need to have the web site's content on our local machine. First of all, we need to access the website from elsewhere not from the browser, because you cannot copy-paste content from there. So let's use Command Line here. We have a popular tool known as &lt;code&gt;cURL&lt;/code&gt;, which stands for client URL. The tool fetches the contents of the provided URL. It also has several parameters or arguments that can be used to modify its output. We can use the command&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -o meaning.txt https://www.dictionary.com/browse/computer#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command fetches the HTML page for the word Computer, it could be any word you might be searching for.&lt;/p&gt;&lt;h3 id="understanding-the-website-structure"&gt;Understanding the Website Structure.&lt;/h3&gt;&lt;p&gt;Here comes the time to explain the structure of dictionary.com. When you search a word on the website(dictionary.com), you are routed to &lt;code&gt;/browse&lt;/code&gt; which then fetches the word for you and defaults you to the &lt;code&gt;/browse/word#&lt;/code&gt; (the word can be any word you searched). The curl command dumps the output in the &lt;code&gt;meaning.txt&lt;/code&gt; or any specified file. If you see the contents of the file, it is the same as on the web.  So we are going to store the meaning of the searched word in the meaning.txt file, you can customize the name and command however you like.&lt;/p&gt;&lt;p&gt;Voila! you successfully scraped a webpage. Now the next target is to filter the webpage content.&lt;/p&gt;&lt;h3 id="filtering-content-from-website-local-file"&gt;Filtering Content from Website local file&lt;/h3&gt;&lt;p&gt;Now we have the content of the webpage on our local machine, we need to search or filter out the useful content and remove the unwanted tags and elements. For that, we can use commands such as &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt;. &lt;/p&gt;&lt;h3 id="finding-tags-to-extract-content"&gt;Finding Tags to Extract content.&lt;/h3&gt;&lt;p&gt;We need to find patterns and similarities in the tags that contain the text of the meaning of the specified word. From the analysis of the webpage, we see that the element &lt;code&gt;&amp;lt;span class="one-click-content css-nnyc96 e1q3nk1v1"&amp;gt;&lt;/code&gt; contains the actual meaning. We just need the basic meaning, we may not need examples and long lengthy definitions on our Terminal, So we will go with filtering out the span tag with a class called &lt;code&gt;one-click-content css-nnyc96 e1q3nk1v1&lt;/code&gt;. To do that we can use the grep command, which can print the text or line matching the specified expression or text. Here we need the span element with the particular class name so we will use regular expressions to find it more effectively.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -oP &lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=&amp;lt;span class=&amp;quot;one-click-content css-nnyc96 e1q3nk1v1&amp;quot;&amp;gt;).*?(?=&amp;lt;/span&amp;gt;)&amp;#39;&lt;/span&gt; meaning.txt &amp;gt;temp.txt &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="using-grep-command-to-filter"&gt;Using GREP command to filter.&lt;/h3&gt;&lt;p&gt;The above command will search and return only lines that are contained in the span tags with that particular class name from the meaning.txt file which we appended to fill the webpage's source code. The &lt;code&gt;-oP&lt;/code&gt; are the arguments that return Only the matching cases and &lt;code&gt;-P&lt;/code&gt; the coming expression is a Perl Regex. The command will return everything in between those tags. Finally, we are storing the result or output in &lt;code&gt;temp.txt&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Now, if you think we are done, then it's wrong, the webpage can have internal or external links embedded inside of the elements as well, so we need to again filter out the HTML tags from the &lt;code&gt;temp.txt&lt;/code&gt; file. For that, we will introduce another tool to filter text called &lt;code&gt;sed&lt;/code&gt; or Stream editor. This tool allows us to filter the stream field and print or store the outcome. The following code will remove the HTML tags from the scrapped text.&lt;/p&gt;&lt;h3 id="using-sed-command-to-remove-embedded"&gt;Using SED command to remove embedded&lt;/h3&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; sed -i &lt;span class="s1"&gt;&amp;#39;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g&amp;#39;&lt;/span&gt; temp.txt &amp;gt;meaning.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The above command filters the text and removes the HTML tags from the &lt;code&gt;temp.txt&lt;/code&gt;file using regular expressions. The &lt;code&gt;-i&lt;/code&gt; command allows us to store the output in a file &lt;code&gt;meaning.txt&lt;/code&gt;.  We have used Regex to remove &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; tags from the file and hence anything in between these is also removed and we get the only pure text but it may also contain special characters and symbols. To remove that we'll again use &lt;code&gt;grep&lt;/code&gt; and filter the fine meaning in our file.&lt;/p&gt;&lt;h3 id="removing-special-characters-from-the-content-using-grep-commands"&gt;Removing Special Characters from the Content using GREP commands.&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; grep -v &lt;span class="s1"&gt;&amp;#39;^\s*$\|^\s*\#&amp;#39;&lt;/span&gt; temp.txt &amp;gt;meaning.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now from the above command removes the special characters such as &lt;code&gt;$,#&lt;/code&gt;, and others from the temp.txt file. We finally store everything filtered in the meaning.txt file. If you understood till here, the next concrete step will be super easy for you, as we will assemble everything here in a shell script.&lt;/p&gt;&lt;h2 id="making-the-shell-script"&gt;Making the Shell Script&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot;Enter the word to find meaning : &amp;quot;&lt;/span&gt; word&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meaning.txt&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.dictionary.com/browse/&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="s2"&gt;#&amp;quot;&lt;/span&gt;curl -o &lt;span class="nv"&gt;$output&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt; cleargrep -oP &lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=&amp;lt;span class=&amp;quot;one-click-content css-nnyc96 e1q3nk1v1&amp;quot;&amp;gt;).*?(?=&amp;lt;/span&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt; &amp;gt;temp.txt sed -i &lt;span class="s1"&gt;&amp;#39;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g&amp;#39;&lt;/span&gt; temp.txt &amp;gt;&lt;span class="nv"&gt;$output&lt;/span&gt;grep -v &lt;span class="s1"&gt;&amp;#39;^\s*$\|^\s*\#&amp;#39;&lt;/span&gt; temp.txt &amp;gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; meaning &lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$meaning&lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can clearly see most of the commands are the same, but some have been modified to avoid repetition and automation. Firstly, I have taken user input of word from the user and stored it in with an appropriate variable name.  Next, I have created another variable to store the file name in which we are going to store the meaning of the word, Also a variable for the URL of the website we are searching for. We have used a variable to access the required URL. Then we invoke &lt;code&gt;cURL&lt;/code&gt; to the file which we want to store using the variable we created and the URL variable So creating variables makes our script quite easy to manage and also it improves the readability of the script. &lt;/p&gt;&lt;h2 id="updating-curl-command"&gt;Updating cURL command&lt;/h2&gt;&lt;p&gt;We can also update the curl command by adding &lt;code&gt;"&amp;amp;&amp;gt; /dev/null"&lt;/code&gt; this will dump the curl output of network analysis. So we will only get the output of the meaning.txt file.  It is optional to add the following into your code as it depends on the operating system so we can optionally use clear command to wipe out the curl output.&lt;/p&gt;&lt;h2 id="printing-the-output-file-line-by-line"&gt;Printing the output file line by line.&lt;/h2&gt;&lt;p&gt;To print the meaning in the output file, we need to print each line separately as the meanings are distinct. Therefore, we will use a while loop with the output file and echo the line variable we have used as the loop iterator.&lt;/p&gt;&lt;h2 id="script-screenshots"&gt;Script Screenshots:&lt;/h2&gt;&lt;p&gt;&lt;img alt="dict.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627366344193/We_heehuL.gif" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627365131696/YH8Vaqoh_.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627365274090/D9IETfRAh.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627365304653/A9AXuHDH8.png" /&gt;&lt;/p&gt;&lt;h2 id="output-conclusion"&gt;Output Conclusion&lt;/h2&gt;&lt;p&gt;From the above output, we have scrapped the meaning of the word &lt;code&gt;Mathematics&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, and &lt;code&gt;python&lt;/code&gt;.  It works only for the words which are on the dictionary.com website. We have successfully made a scrapper that scraps the meaning of the input word from the dictionary.com website, &lt;/p&gt;&lt;h2 id="appropriate-use-of-web-scrapping"&gt;Appropriate use of Web-Scrapping.&lt;/h2&gt;&lt;p&gt;We must be careful and not scrape any website without reading its privacy policy. If they allow scraping from their website, then only you should scrape the content and not use it for any monetization of the content. This was just used for demonstrating some idea about web scrapping using BASH and just meant for teaching purposes.&lt;/p&gt;&lt;p&gt;Therefore, it is quite easy to scrape the website's content especially if you find any patterns in the code structure. We were able to make a script that can print the meaning of the input word from the base of the website dictionary.com.&lt;/p&gt;&lt;p&gt;We can see how Bash can be powerful in terms of web scrapping. I hope you found this interesting and inspiring. Thank you for reading. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/find-filter-github-issues'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Filter and Find an Issue on GitHub&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/pipenv-intro'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Pipenv: Python's Official Package Management tool&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/bash-dictionary-scrapper</guid><pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Tabs</title><link>https://mr-destructive.github.io/techstructive-blog/vim-tabs</link><description>So, you are playing with Vim and getting good at but something pulls you off. Basically can To open a tab, you can press  If you already have an existing file i</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;So, you are playing with Vim and getting good at but something pulls you off. Basically can't get used to switching between files or windows, and that's totally fine. Some may prefer using Window splitting, file managers, and whatnot. But let me introduce you to TABS in Vim. A simple and elegant way to open multiple files in Vim. &lt;/p&gt;&lt;h2 id="opening-tabs"&gt;Opening Tabs&lt;/h2&gt;&lt;p&gt;To open a tab, you can press &lt;code&gt;:tabnew&lt;/code&gt;  or  &lt;code&gt;:tabedit&lt;/code&gt; to open a blank Tab with no file open in it. This basically works like the &lt;code&gt;:e&lt;/code&gt; command, which opens a buffer for you with no named file.&lt;/p&gt;&lt;p&gt;If you already have an existing file in the current folder you are in, then you can press &lt;code&gt;:tabf filename&lt;/code&gt; or &lt;code&gt;:tabnew filename&lt;/code&gt; or &lt;code&gt;:tabedit filename&lt;/code&gt;. This also applies to opening folders or directories, which will open the file structure in Vim buffer. &lt;/p&gt;&lt;p&gt;&lt;img alt="tabop.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627994196949/A-ZMWZefa.gif" /&gt;&lt;/p&gt;&lt;p&gt;From the above illustration, we can see that the new tab was created using the filename with the &lt;code&gt;tabf&lt;/code&gt; command and an empty tab was created with &lt;code&gt;tabnew&lt;/code&gt; command. Ya, we can use &lt;code&gt;tabnew&lt;/code&gt; for both cases but it saves time to write two more letters. It depends on the preference as you don't have to remember one more command in this case. You can also customize the commands if you feel they are too big to type in like a simple mapping would do the trick for opening the tabs for you.&lt;/p&gt;&lt;h3 id="to-open-a-tab-with-a-file-specified"&gt;To open a Tab with a file specified.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabf filename&lt;/code&gt; &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabnew filename&lt;/code&gt; &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabedit filename&lt;/code&gt;   &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="open-a-tab-without-any-file-specified"&gt;Open a Tab without any file specified.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabnew&lt;/code&gt; &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabedit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can open the tabs as per your choice like it could be ideal if you are gonna use certain files for a longer duration of time. This could be very ideal for various programming cases especially in Web, Android, Application Development where we need to edit a few files again and again. If you prefer Window-Splitting, that's totally fine, this is just to tell that there exist other ways as well.&lt;/p&gt;&lt;h2 id="switching-tabs"&gt;Switching Tabs&lt;/h2&gt;&lt;p&gt;Now if you are comfortable with opening tabs, we can now move on to switching between tabs. If you just have few tabs open, you can easily switch to the next tab using &lt;code&gt;gt&lt;/code&gt; and to the previous tab using &lt;code&gt;gT&lt;/code&gt; commands. But if you are in a great mode and want to open ten-twenty tabs XD, then you can use the numbers before the &lt;code&gt;gt&lt;/code&gt; command. Like you can type &lt;code&gt;5gt&lt;/code&gt; to move to the 5th Tab. If you do not know which tab is which, you can type in &lt;code&gt;:tabs&lt;/code&gt; and this will open up the currently open tabs along with the numbers.&lt;/p&gt;&lt;p&gt;&lt;img alt="tabsw.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627996436129/vApSyRD6o.gif" /&gt;&lt;/p&gt;&lt;p&gt;You can see my keystrokes(except the last keystroke) in the lower right corner. We can easily switch between tabs using the three sets of commands and surely configure them as per your preference. We also saw the &lt;code&gt;:tabs&lt;/code&gt; command which can be pretty handy if you are working with a number of tabs.&lt;/p&gt;&lt;p&gt;You can move around Tabs using some special commands like &lt;code&gt;:tablast&lt;/code&gt; to move to the last tab and &lt;code&gt;:tabfirst&lt;/code&gt; to move to the first tab. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;gt&lt;/code&gt;  -&amp;gt; Move to the &lt;strong&gt;NEXT&lt;/strong&gt; Tab being in Normal mode.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;gT&lt;/code&gt; -&amp;gt; Move to the &lt;strong&gt;PREVIOUS&lt;/strong&gt; Tab being in Normal mode.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ngt&lt;/code&gt;  -&amp;gt; Move to the Nth Tab in Normal mode. (n is any number of tab which are opened).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tablast&lt;/code&gt; -&amp;gt; Move to the &lt;strong&gt;LAST&lt;/strong&gt; Tab.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabfirst&lt;/code&gt; -&amp;gt; Move to the &lt;strong&gt;FIRST&lt;/strong&gt; Tab.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;tabs&lt;/code&gt;  -&amp;gt; Get a list of Tabs which are currently opened. (includes file opened in the tab and the number)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="closing-tabs"&gt;Closing Tabs&lt;/h2&gt;&lt;p&gt;So, after opening tabs you want to close em right? That is quite simple as expected. Just type &lt;code&gt;:tabc&lt;/code&gt;, this will delete the current tab. You can close the specific tab by prefixing &lt;code&gt;tabc&lt;/code&gt; with the number of that tab. Like if you want to delete the 2nd tab, use &lt;code&gt;:2tabc&lt;/code&gt; to close the 2nd tab. &lt;/p&gt;&lt;p&gt;If you want to reopen the closed tab, you can look out for the buffer name using &lt;code&gt;:ls&lt;/code&gt; and then after finding the number of buffers in which your tab was open, you can type &lt;code&gt;:tabnew +nbuf&lt;/code&gt;, here n is that number of the buffer. &lt;/p&gt;&lt;p&gt;If you want to close all the tabs except the current one, you can use &lt;code&gt;:tabo&lt;/code&gt;. This will clear the tabs except in which you are in, hence it will also collapse the top tab bar showing the file opened in those tabs.&lt;/p&gt;&lt;p&gt;&lt;img alt="tabce.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1627997764101/HhUmFFQLZ.gif" /&gt;&lt;/p&gt;&lt;p&gt;As from the above GIF, we can see we located the number of the buffer last closed as we knew the name of the file which was opened in that tab. We also saw how to delete the specific tab using its number and the current tab.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabc&lt;/code&gt; -&amp;gt; Close the current tab.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:ntabc&lt;/code&gt;-&amp;gt; Close the Nth Tab.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;:tabo&lt;/code&gt;  -&amp;gt; Close all the tabs except the current Tab.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="re-ordering-tabs"&gt;Re-ordering Tabs&lt;/h2&gt;&lt;p&gt;This is a very tiny little detail but becomes a super tool in many cases. Let's say you want some reference of some content in the file, again and again, it's quite likely you should make the tabs nearby instead of switching tabs again and again. You can use Window splitting in this case, though we will see how to reorder tabs just for having the grasp on using Tabs in Vim.&lt;/p&gt;&lt;p&gt;To reorder tabs, you are basically moving a tab from one position to other. Let's say you have a Tab at position &lt;code&gt;5&lt;/code&gt; which is your current tab, you want it at position 2. So what you can do is move the current tab to position two, as simple as to speak &lt;code&gt;:tabm 1&lt;/code&gt;. This will move the current tab which is at number 5 to the 2nd position. Remember the tab order is 0 based so just use the number you are thinking minus 1. So the command becomes &lt;code&gt;:tabm n&lt;/code&gt;, where n is the index of the tab(starts from 0, the left-most tab). If you want to move to the last tab, you would not specify any number just type the &lt;code&gt;tabm&lt;/code&gt; command, and that's it.&lt;/p&gt;&lt;p&gt;&lt;img alt="tabmv.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628001405055/m0XQAfdQJ.gif" /&gt;&lt;/p&gt;&lt;p&gt;From the above example, we were able to move around the tabs to our desired location without a hassle. This is some basic stuff you can do with Tabs in Vim, surely you can add in your custom mappings to enhance the productivity and improve the workflow in Tabs in Vim.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;:tabm n&lt;/code&gt; -&amp;gt; Move the current opened Tab to the Nth position (Starts from 0).&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, we have seen how we can use Tabs and move around in between files and folders, we are now able to open, close, move, navigate around the tabs in Vim. By using some custom mappings, this can be overhauled for much fewer keystrokes that get in it. There are many other navigation techniques in VIm, and using Tabs is one of them, surely it won't suit everyone but there will be someone who will prefer using this. Thank you for reading till here. I hope you learned something from this to enhance your grasp in Vim. Happy Coding and Viming :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-window-splits'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Window Splits&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-models'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Creating Models&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-tabs</guid><pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Window Splits</title><link>https://mr-destructive.github.io/techstructive-blog/vim-window-splits</link><description>Have you ever been stuck in Vim opening multiple files within a single window? Didn Creating Window splits is quite straightforward. You should keep in mind the</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Have you ever been stuck in Vim opening multiple files within a single window? Didn't anyone tell you, you can create multiple windows and split them within a single tab. Definitely, the window splits will be in separate buffers. In this way you can create multiple windows inside of a single Tab, what are Tabs? You can learn some basics about it from my previous article about  &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/03/Vim-Tabs.html"&gt;Tabs in Vim&lt;/a&gt;. We can either create Vertical or Horizontal splits within the window making it flexible to work with multiple files in Vim. This article will look into the creation, navigation, closing, and rearrangement of Window Splits.&lt;/p&gt;&lt;h2 id="creating-a-window-split"&gt;Creating a Window Split&lt;/h2&gt;&lt;p&gt;Creating Window splits is quite straightforward. You should keep in mind the following things though:- You can create a horizontal or a vertical split within a window.- Creating a Split either vertically or horizontally can shorten the current window's size, making it equally spaced.&lt;/p&gt;&lt;p&gt;Let's take a look at creating the vertical and horizontal splits one by one: &lt;/p&gt;&lt;h3 id="vertical-splits"&gt;Vertical Splits&lt;/h3&gt;&lt;p&gt;Vertical Split as the name suggests, it will split the current window into &lt;strong&gt;two halves vertically&lt;/strong&gt; or a &lt;strong&gt;standing split between two windows&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;The below image clearly shows a vertical split between two windows. Here we are splitting a single window into two windows. We can also think it of in splitting the window from left to right.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628232885853/xtBgWb-Yg.png" /&gt;&lt;/p&gt;&lt;p&gt;To create a vertical split, you can use &lt;code&gt;:vsp&lt;/code&gt; or &lt;code&gt;:vsplit&lt;/code&gt; to create a split of the same file/ blank file.&lt;/p&gt;&lt;p&gt;&lt;img alt="vsp.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628233753115/4seJbY-h9.gif" /&gt;&lt;/p&gt;&lt;p&gt;If you already have a file open, it will open the same file in the split as long as you don't specify which file to open. You can specify the name of the file after the command &lt;code&gt;:vsp filename&lt;/code&gt; or &lt;code&gt;:vsplit filename&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="vsp.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628233871768/B3D_3NNGo.gif" /&gt;&lt;/p&gt;&lt;p&gt;It's not like that you can create only a single split, you can create multiple vertical splits. That can get pretty wild pretty quickly.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628234228391/vmJxW5HOo.png" /&gt;&lt;/p&gt;&lt;p&gt;In the above screenshot, I have created 5 vertical splits from a single window, so making them equally wide and evenly spaced. This might not be useful every time but can get quite handy in some tricky situations.&lt;/p&gt;&lt;h3 id="horizontal-splits"&gt;Horizontal Splits&lt;/h3&gt;&lt;p&gt;Similar to Vertical splits, we have horizontal Splits indicating to split from top to bottom. We can &lt;strong&gt;split a single window into two halves horizontally&lt;/strong&gt; or a &lt;strong&gt;sleeping split between the windows&lt;/strong&gt;. &lt;/p&gt;&lt;p&gt;The below image clearly shows a horizontal split between two windows. Here we are splitting a single window into two windows. We can also think it of in splitting the window from top to bottom.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628233063400/5PVdEsGHZ.png" /&gt;&lt;/p&gt;&lt;p&gt;To create a horizontal split, you can use &lt;code&gt;:sp&lt;/code&gt; or &lt;code&gt;:split&lt;/code&gt; to create a horizontal split of the same file/ blank file. This will create a blank file inside a horizontal split.&lt;/p&gt;&lt;p&gt;&lt;img alt="sp.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628235156757/ckfDxh-1D.gif" /&gt;&lt;/p&gt;&lt;p&gt;Similar to the vertical splits, you can open files by creating the split. You can use the command &lt;code&gt;:sp filename&lt;/code&gt; or &lt;code&gt;:split filename&lt;/code&gt; to create the horizontal split between the windows and opening a specified file in it.&lt;/p&gt;&lt;p&gt;&lt;img alt="sp.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628235452142/eVGrEZmHVK.gif" /&gt;&lt;/p&gt;&lt;p&gt;Again as seen in the vertical split, we can create as many splits as we like. This looks very ugly but who knows when you may need this. We can basically create Splits in any order of vertical or horizontal, we'll see it in the later section to the same.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628235679425/9dtK5TV6G.png" /&gt;&lt;/p&gt;&lt;h3 id="vertical-and-horizontal-splits-together"&gt;Vertical and Horizontal Splits Together&lt;/h3&gt;&lt;p&gt;We can also create Vertical split and horizontal splits independently like we are not restricted to only creating the only kinds of splits at a time. You can create a vertical split once and then can create a horizontal split within the vertical split created, in this way we can make good use of both the splits as per our needs.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628236573469/7FOJIgP-z.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628236677571/CCeVePLkp.png" /&gt;&lt;/p&gt;&lt;h2 id="moving-around-splits"&gt;Moving around Splits&lt;/h2&gt;&lt;p&gt;Now let's talk about the navigation around these splits, it's again a simple thing. We can use &lt;code&gt;Ctrl+w&lt;/code&gt; as our primary command along with Vim navigation to move around the splits. Like for example &lt;code&gt;Ctrl + w + h&lt;/code&gt; will take you to the left split to your current open window. You can also use &lt;code&gt;Ctrl+w&lt;/code&gt;** twice** to hop around to the next window split in a repeating loop. &lt;/p&gt;&lt;p&gt;So, we can use:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt;+ &lt;code&gt;w&lt;/code&gt; -&amp;gt; Switch to the next split (in the order of creation of those splits).&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;h&lt;/code&gt; -&amp;gt; Move to the left split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; -&amp;gt; Move to the right split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;j&lt;/code&gt;  -&amp;gt; Move to the below split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;k&lt;/code&gt;  -&amp;gt; Move to a upper split.&lt;/p&gt;&lt;p&gt;These commands might be good enough to pull you through any splits from anywhere, it just becomes easy to use Vim navigation inside of these. You can use arrow keys if you are stuck somewhere but using Vim key bindings will work out of the box.&lt;/p&gt;&lt;h2 id="creating-splits-using-keyboard-shortcuts"&gt;Creating Splits using Keyboard shortcuts&lt;/h2&gt;&lt;p&gt;If you think you are wasting time going into the command mode and typing the commands to create splits, well there are some shortcuts for you. &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; -&amp;gt; Create a vertical split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt;+ &lt;code&gt;s&lt;/code&gt; -&amp;gt; Create a horizontal split.&lt;/p&gt;&lt;p&gt;This will open the split with the current file in the original window, so if you need to change the file, you can use the edit command (&lt;code&gt;:e filename&lt;/code&gt;) inside the split. &lt;/p&gt;&lt;h2 id="rearranging-the-window-splits"&gt;Rearranging the Window Splits&lt;/h2&gt;&lt;p&gt;If you have a  specific set of splits of a kind open, you can rotate between those. Like for example, if we have a horizontal split, you can rotate the split to move the upper split down and below split up.  &lt;/p&gt;&lt;p&gt;&lt;img alt="cwr.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628240624930/HBIKPummz.gif" /&gt;&lt;/p&gt;&lt;p&gt;From the above illustration, we can see we rotated(swapped) the splits. We can also use certain commands to arrange the splits into appropriate positions according to the user. &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;r&lt;/code&gt; -&amp;gt; Swap the two splits(either horizontal or vertical)&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;H&lt;/code&gt; -&amp;gt; Move the split to the left ( &lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;Shift + h&lt;/code&gt;). &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;J&lt;/code&gt; -&amp;gt; Move the split down ( &lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;Shift + j&lt;/code&gt;). &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;K&lt;/code&gt; -&amp;gt; Move the split up ( &lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;Shift + k&lt;/code&gt;). . &lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt; -&amp;gt; Move the split to the right ( &lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;Shift + l&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;&lt;img alt="spr.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628242295049/_HadBQPrs.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can see that we were able to swap the splits to a location suitable according to our wish. We can definitely switch the splits internally as well.&lt;/p&gt;&lt;p&gt;We can resize the splits as per the requirement and remove the equality in those splits. We have a couple of options to do this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; + &lt;code&gt;+&lt;/code&gt; -&amp;gt;  Increase the height of the current split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt; -&amp;gt;  Decrease the height of the current split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; + &lt;code&gt;&amp;gt;&lt;/code&gt; -&amp;gt;  Increase the width of the current split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; +  &lt;code&gt;&amp;lt;&lt;/code&gt; -&amp;gt;  Decrease the width of the current split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; + &lt;code&gt;=&lt;/code&gt; -&amp;gt;  Make the splits equal in width and height.&lt;/p&gt;&lt;p&gt;&lt;img alt="spr.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628243827459/nL3mus88d.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can also use &lt;code&gt;:resize {number}&lt;/code&gt; to manually set the size of the horizontal split and &lt;code&gt;:vertical resize {number}&lt;/code&gt; to manually set the size of the vertical split. This is really risky, like if you know what you are doing then it's totally fine. The commands demonstrated earlier are really adjustable and user-friendly. &lt;/p&gt;&lt;p&gt;We can also use &lt;code&gt;Ctrl + w&lt;/code&gt; + &lt;code&gt;_&lt;/code&gt; to minimize all the window split except the current one.&lt;/p&gt;&lt;h2 id="closing-the-splits"&gt;Closing the Splits&lt;/h2&gt;&lt;p&gt;Now after doing all sorts of wizardry with the window splits the finishing touch is to close those splits after use. We can surely use &lt;code&gt;:q&lt;/code&gt; to close the current window split but that is not intuitive to enter each split and manually close all of them, we can use:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; + &lt;code&gt;c&lt;/code&gt; -&amp;gt;  Close the current split.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Ctrl +w&lt;/code&gt; + &lt;code&gt;o&lt;/code&gt; -&amp;gt;  Quit all other splits except the current one. &lt;/p&gt;&lt;p&gt;&lt;img alt="closesp.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628244089101/Ebdup7wNE.gif" /&gt;&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, we have seen the basics of using Window Splits in Vim. Please let me know if there is some important point that is missing. Thank you for reading through here. We have seen how to create, navigate, rearrange, closing and other basic stuff related to Window splits in Vim.&lt;/p&gt;&lt;h3 id="references"&gt;References:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://sodocumentation.net/vim/topic/1705/split-windows"&gt;Sodocumentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://linuxhint.com/vim_split_screen/"&gt;Linux Hint Vim Split Screen&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://gist.github.com/Starefossen/5957088"&gt;Starefossen&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Hopefully, this might have given you some good idea to deal with Vim in windows splits. Happy Coding and Viming :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-packages'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Packages&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-tabs'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Tabs&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-window-splits</guid><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Vim: Buffers</title><link>https://mr-destructive.github.io/techstructive-blog/vim-buffers</link><description>I have talked about Vim  Vim buffers are the chunks of memory that hold the text in a file. Vim buffers are used from opening a file to using, installing, upgra</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;I have talked about Vim &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/03/Vim-Tabs.html"&gt;tabs&lt;/a&gt;,  &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/06/Vim-Window-Splits.html"&gt;window splits&lt;/a&gt;  in the previous articles, and now I am quite keen on explaining the finest unit of file that you can open using Vim and that is a buffer. Tabs are a collection of windows, Windows are the viewport on buffers (collection to view the buffers), and Buffers are the memory that holds text in the file. So let us explore buffer in detail. This article won't cover each and every tiny detail about buffers but surely enough to make you understand what a buffer is and how to manage those.&lt;/p&gt;&lt;h2 id="what-is-a-vim-buffer"&gt;What is a Vim buffer&lt;/h2&gt;&lt;p&gt;Vim buffers are the chunks of memory that hold the text in a file. Vim buffers are used from opening a file to using, installing, upgrading the Plugins, using file managers, and everything you can edit and work within Vim. &lt;/p&gt;&lt;p&gt;So, why bother using Vim buffer, you'll ask. Well, you will need it to make some complex tasks possible in Vim, such as configuring it as your IDE or having much more control over what and how you open and close files in Vim. You might not need it in the broader sense but having a grasp of what you are using and understanding the process under the hood is vital whatsoever. &lt;/p&gt;&lt;h2 id="creating-a-buffer"&gt;Creating a buffer&lt;/h2&gt;&lt;p&gt;No need to create a buffer, if you are editing a file, that's already a buffer :) If you open Vim, a fresh open, then you already have that current buffer as an empty buffer. You can create an empty buffer by entering the command &lt;code&gt;:enew&lt;/code&gt;. This will actually make a new empty buffer, if you have edited the contents of the previous buffer you need to specify to write/save the buffer in a file.&lt;/p&gt;&lt;p&gt;You can see the details of the buffers opened currently by using the command &lt;code&gt;:ls&lt;/code&gt; or &lt;code&gt;:buffers&lt;/code&gt;. This will open a list of buffers currently loaded in the Vim instance. You will see the output somewhat like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628681203173/qSSRrlB2J.png" /&gt;&lt;/p&gt;&lt;p&gt;We can see the name of the current buffer which in this case it is &lt;code&gt;"No name"&lt;/code&gt; this will be replaced with a file name if we had a file open. This won't only print the current buffer but all the loaded buffers in the present Window of Vim. We will explore the details of this command in the next section.&lt;/p&gt;&lt;h2 id="navigating-through-the-buffers-list"&gt;Navigating through the buffers list&lt;/h2&gt;&lt;p&gt;&lt;img alt="buff1.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628681927410/t9DDPbDEs.gif" /&gt;&lt;/p&gt;&lt;p&gt;In the first column in the only row, you can see &lt;code&gt;1&lt;/code&gt; indicating the number of the buffer, secondly, there are indicators &lt;code&gt;%a&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; and others as well. These are used for referencing the buffers using certain attributes those have like :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;%&lt;/code&gt; stands for the buffer in the current window.&lt;/li&gt;&lt;li&gt;&lt;code&gt;a&lt;/code&gt; stands for the currently active buffer.&lt;/li&gt;&lt;li&gt;&lt;code&gt;#&lt;/code&gt; stands for the alternate buffer (previously edited).&lt;/li&gt;&lt;li&gt;&lt;code&gt;h&lt;/code&gt; stands for the hidden buffer ( used for navigating to other files without saving changes ).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also have additional attributes or indicators for the buffers like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;+&lt;/code&gt; indicating the buffer is modified.&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&lt;/code&gt; indicating the buffer cannot be modified. &lt;/li&gt;&lt;li&gt;&lt;code&gt;=&lt;/code&gt; indicating the buffer is read only.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To use the attribute &lt;code&gt;h&lt;/code&gt;, you have to set the option in the current window only, you can use &lt;code&gt;:set hiddden&lt;/code&gt; to hide the files i.e to edit another file without saving changes to the current buffer(with the file loaded).  If you want a permanent option of hidden files you can add &lt;code&gt;set hidden&lt;/code&gt; in your &lt;code&gt;vimrc&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628683076849/lWQ2ZEj0E.png" /&gt;&lt;/p&gt;&lt;p&gt;If you have enabled a hidden file in the window and you modify the file, you can see the &lt;code&gt;+&lt;/code&gt; symbol in the &lt;code&gt;:ls&lt;/code&gt; command output before the file, indicating that the file has been modified. If you try to quit the window, it will prompt you to save those unsaved modifications.  &lt;/p&gt;&lt;p&gt;This is the power of Vim buffers, you can get really fast in terms of editing multiple files and saving all of them at once. This feature can allow you to work more effectively and flawlessly with Window Splits and Tabs as they can contain multiple buffers within them. &lt;/p&gt;&lt;p&gt;Now we will see how to move between those buffers. We can pretty effectively use the numbers in the buffer list to directly jump to that buffer. We can use &lt;code&gt;:b n&lt;/code&gt; where n is any number of the buffer in the list of buffers to move through the buffers. Optionally we can use &lt;code&gt;:buffer n&lt;/code&gt; but that is quite a long command. &lt;/p&gt;&lt;p&gt;We can move to the previous buffer as &lt;code&gt;:bp&lt;/code&gt;  to move to the previous buffer in the list. Similarly, we can use &lt;code&gt;:bn&lt;/code&gt; to move to the next buffer in the list, and &lt;code&gt;:bfirst&lt;/code&gt; and &lt;code&gt;:blast&lt;/code&gt; to move to the first and the last buffer respectively.  &lt;/p&gt;&lt;p&gt;&lt;img alt="buff2.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628684713072/QzqBC99NV.gif" /&gt;&lt;/p&gt;&lt;h2 id="moving-through-the-buffers"&gt;Moving through the buffers&lt;/h2&gt;&lt;p&gt;We can move through our opened buffers using &lt;code&gt;Ctrl + o&lt;/code&gt; to move backward a buffer and &lt;code&gt;Ctrl + i&lt;/code&gt; to move forward a buffer. This can be helpful if you do not want to remember the numbers associated with the buffers. &lt;/p&gt;&lt;p&gt;&lt;img alt="buff2.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628689030442/KNDDAlJpN.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can scan through the current buffers opened and jump through them one by one and it becomes quite effective in switching between few files. This could probably be suited for Web development where you can hop between HTML/CSS/JS files or in Android development for java/XML files, and so on you get the idea for using it as per your needs.&lt;/p&gt;&lt;h2 id="deleting-buffers"&gt;Deleting buffers&lt;/h2&gt;&lt;p&gt;Now we will see how to delete the loaded buffers, we can simply use &lt;code&gt;:bd n&lt;/code&gt; where n is the number of the buffer in the list to delete the buffer, optionally we can use &lt;code&gt;:bd filename&lt;/code&gt; to delete the buffer loaded with that file. &lt;/p&gt;&lt;p&gt;&lt;img alt="buff2.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628685481565/m4bBHPf5C.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can also delete a number of buffers at a time using a range of buffers like &lt;code&gt;:n,mbd&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the first buffer and &lt;code&gt;m&lt;/code&gt; is the last buffer. We will delete every buffer between &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; including &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; using the above command. &lt;/p&gt;&lt;p&gt;&lt;img alt="buff2.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628685657441/s4rJ_CRRQ.gif" /&gt;&lt;/p&gt;&lt;p&gt;Just a quick fact, if you do not delete buffers, they will stay in memory even if you use &lt;code&gt;:q&lt;/code&gt; they won't get erased from the buffer list, you are just exiting the buffer view and not removing the buffer from the current memory. This can get really messy if you are opening too many files and keeping them in memory. &lt;/p&gt;&lt;h2 id="creating-splits-in-buffer"&gt;Creating splits in buffer&lt;/h2&gt;&lt;p&gt;We can even create splits in buffers, basically a window split but we will see this with the view of buffers this time. To create a horizontal split, we can type in &lt;code&gt;:new filename&lt;/code&gt; to open the file in the split. We can even create a vertical split with &lt;code&gt;:vnew filename&lt;/code&gt; to open a vertical split with the provided file.  &lt;/p&gt;&lt;p&gt;&lt;img alt="buff2.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628686386964/O2HhFqaKa2.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can see some wired things in the ls menu if we open a new tab in the current instance of Vim. The list command shows all the buffers in the current Tab as well as in the previous tab.  &lt;/p&gt;&lt;p&gt;We can also open buffers in splits by using numbers or file names. We can use &lt;code&gt;:sb n&lt;/code&gt; to open the contents of the buffer n(any number of buffer), and with &lt;code&gt;:sb filename&lt;/code&gt; to open the file in a split this will only be a horizontal split. &lt;/p&gt;&lt;p&gt;We can use &lt;code&gt;:sba&lt;/code&gt; to open all the buffers in the split windows. This can be quite handy to find any file which you cannot remember was edited or wanted at the moment, this opens every buffer loaded in the current instance. We can also use &lt;code&gt;:sbp&lt;/code&gt; and &lt;code&gt;:sbn&lt;/code&gt; to open the previous and next buffer respectively in a split. &lt;/p&gt;&lt;p&gt;Additionally, we also have &lt;code&gt;:vertical ba&lt;/code&gt; and &lt;code&gt;:ba&lt;/code&gt; (&lt;code&gt;:ball&lt;/code&gt;)to open all the buffers in vertical and horizontal splits respectively.&lt;br /&gt;&lt;img alt="buff2.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628693311069/5y_xbPho7.gif" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Also&lt;/strong&gt;, We have &lt;code&gt;:tab ba&lt;/code&gt; or &lt;code&gt;:tab ball&lt;/code&gt; to open all the buffers as tabs in the current instance. &lt;/p&gt;&lt;p&gt;&lt;img alt="bufftab.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1628693521966/f1RKu4JwM.gif" /&gt;&lt;/p&gt;&lt;p&gt;You can add more layers of effectiveness or customization using keymaps to split certain buffers and make use of the above set of commands more powerful and make them work according to your needs.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from the above sections, we were able to see what happens under the hood when you open, close, or edit a file in Vim. Though it was not an in-depth view of each and every detail of the buffers in Vim. But enough to make you understand what and how buffers work and how to use them to become more effective. Hopefully, you have understood how to perform movements with buffers and create and delete them with tremendous control over what files you could edit. Thank you for reading till here.   &lt;/p&gt;&lt;h3 id="buffers-window-splits-tabs"&gt;Buffers &amp;lt; Window Splits &amp;lt; Tabs&lt;/h3&gt;&lt;p&gt;So from these three articles, we were able to understand the terminology of Buffers, Window Splits, and Tabs. These all are the units of the Vim file system/ Way of grouping Files. We can use buffers to load the file from the memory, we can split various buffers into windows which are all contained in a tab. Some might prefer using buffers, splits, or tabs but hey! what are you even talking about? They are all part of tabs so use everything as per need don't force yourself to use only one thing. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Use buffers for opening few files, if you need to open many files regularly use window splits, If that's not enough use tabs to separate from different folders or directories&lt;/strong&gt;. Don't stop Viming, Happy Coding :)&lt;/p&gt;&lt;h3 id="references"&gt;References&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://vim.fandom.com/wiki/Buffers"&gt;Vim Fandom: Buffers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://vim.fandom.com/wiki/Vim_buffer_FAQ"&gt;Vim Buffers FAQ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://linuxhint.com/how_vim_buffers_work/"&gt;Linux Hint - Understanding and using VIM Buffers &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-setup-script'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Quick Setup Script&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/oop-cpp-p1'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Object-Oriented Programming in C++: Classes and Objects&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-buffers</guid><pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Django Quick Setup Script</title><link>https://mr-destructive.github.io/techstructive-blog/django-setup-script</link><description>Once you learn something very neatly and understand it very clearly, it feels like you are wasting time doing things over and over again. Same things in setting</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Once you learn something very neatly and understand it very clearly, it feels like you are wasting time doing things over and over again. Same things in setting up a Django project, you feel like you could save those typing minutes by making a script. &lt;/p&gt;&lt;p&gt;In this article, we will make a script a batch script for windows and a BASH script for Linux/macOS. We will make a virtual environment using python and then install the libraries and dependencies like in this case we will install Django. You can also tinker with these scripts and install other dependencies if you want like Django rest framework, crispy forms, markdown, Redis, etc. We will also make a Django project using the positional parameter passed before running the script from the command line. &lt;/p&gt;&lt;h3 id="python-development-environment"&gt;Python development environment&lt;/h3&gt;&lt;p&gt;This article assumes you have a python environment setup. If you don't you must install Python from the  &lt;a href="https://www.python.org/downloads/"&gt;official website&lt;/a&gt;  as per your operating system. Also, you should have pip installed and configured correctly. You can install pip by following the  &lt;a href="https://pip.pypa.io/en/stable/"&gt;official documentation&lt;/a&gt;  for the specific operating systems.&lt;/p&gt;&lt;h2 id="steps-in-django-project-setup"&gt;Steps in Django Project Setup&lt;/h2&gt;&lt;p&gt;So, If you are already familiar with the Django project setup, you can directly use the scripts provided in the next few sections. You can also visit  &lt;a href="https://github.com/Mr-Destructive/django-quick-setup-script"&gt;this GitHub repository&lt;/a&gt;  if you have any issues and errors.  &lt;/p&gt;&lt;p&gt;If you are new to django, let me first explain the process of django project setup. - ### Initialize a VirtualEnvironment (Recommended but not necessary)&lt;/p&gt;&lt;p&gt;Virtual Environment in Python is a great way of localizing the dependencies and frameworks only in the particular folder, it allows the developer to separate things out and keep them distinct, Additionally, when deploying or sharing the repository, the other developers can install the dependencies in the requirement.txt file in their local environment flawlessly. &lt;/p&gt;&lt;p&gt;So, it is always recommended to use python virtualenv when working with python frameworks or libraries. We can set it up by simple pip install and then giving it a name.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install the package/tool using pip. &lt;/p&gt;&lt;p&gt;After that has been properly installed, we can now give it an appropriate name &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv mytest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;virtualenv&lt;/code&gt; is the command and &lt;code&gt;mytest&lt;/code&gt; can be any name, generally &lt;code&gt;env&lt;/code&gt; or &lt;code&gt;venv&lt;/code&gt; is preferred but it should be understandable to the user.  You will now be able to see the folder inside of your current directory named as &lt;code&gt;mytest&lt;/code&gt; or the name you've given to it. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Now if you are on windows, you can activate the virtual environment by using the command :&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mytest\Scripts\activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;here mytest is the name of your virtual env it can be anything as per your choice. This will now activate the virtualenv which will be shown by &lt;code&gt;(mytest)&lt;/code&gt; before the command prompt. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Linux/macOS&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For Linux or macOS, you can use the command: &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source mytest/Scripts/activate.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;In the above command, &lt;code&gt;mytest&lt;/code&gt; can be anything that you have used while creating the virtualenv. This should activate the vrtualenv and will be indicated by &lt;code&gt;(mytest)&lt;/code&gt; before the prompt in the terminal. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1629023409389/kEe5AVAsr.png" /&gt;From the above image, we can see that we created and activated an virtualenv in python in a folder. So, this is the walkthrough for setting up the virtualenv for a Django project, now we will move to install Django in this environment.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="installing-django-using-pip"&gt;Installing Django using pip&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is quite straightforward. You can use &lt;code&gt;pip install django&lt;/code&gt; or &lt;code&gt;pip3 install django&lt;/code&gt; or the normal way you install a library from pip. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="creating-a-django-project"&gt;Creating a Django project&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To create a django project, we use the django-admin command like:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;django-admin startproject mywebsite&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will create a folder called &lt;code&gt;mywebsite&lt;/code&gt; or your project name anything you like. Inside the &lt;code&gt;mywebsite&lt;/code&gt; folder, you will have 2 things: &lt;code&gt;manage.py&lt;/code&gt; file, and &lt;code&gt;mywebsite&lt;/code&gt; folder . Yes there will be another &lt;code&gt;mywebsite&lt;/code&gt; folder inside your project which will have the settings, URLs and other global(project-level) configuration files. The &lt;code&gt;manage.py&lt;/code&gt; file is the most important file here. You should never touch/edit this file. We use this file to carry out all the operations from running the server to managing the database. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1629032998253/QQ5QXf4v5.png" /&gt;&lt;/p&gt;&lt;h3 id="setup-script-for-windows"&gt;Setup script  for Windows&lt;/h3&gt;&lt;p&gt;The below is a batch file for Windows Operating System. Save the file in a &lt;code&gt;.bat&lt;/code&gt; extension.&lt;/p&gt;&lt;p&gt;&lt;iframe  src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=cobalt&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=mkdir%2520%25251%2520%250Acd%2520%25251%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Acall%2520env%255CScripts%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25251%2520.%250Acls%250A"  style="width: 803px; height: 366px; border:0; transform: scale(1); overflow:hidden;"  sandbox="allow-scripts allow-same-origin"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;Make sure the file is saved in a &lt;code&gt;.bat&lt;/code&gt; file and be in the folder where you would like to create the Django project. After being in the appropriate location, enter the following command:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;commands.bat myproj&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here I assume that you have named the script file as &lt;code&gt;commands.bat&lt;/code&gt;, you can name it anything you like, but I like to keep this a convention. After this you don't need to do anything, everything will be handled by the script. You can run the server using &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will have the base django project set up on your system. The below is the live demonstration of the script, I have deliberately removed the &lt;code&gt;cls&lt;/code&gt; command to show the process. It won't break the script if you add this to it. &lt;/p&gt;&lt;p&gt;&lt;img alt="djqss.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1629024613612/Zsqa54_KD.gif" /&gt;&lt;/p&gt;&lt;h3 id="setup-script-for-linuxmacos"&gt;Setup script  for Linux/macOS&lt;/h3&gt;&lt;p&gt;Copy the code from the below script and save it in a file preferably called &lt;code&gt;commands.sh&lt;/code&gt;, you can name it anything you want but keep the &lt;code&gt;.sh&lt;/code&gt; extension after it to identify it as a shell-script.&lt;/p&gt;&lt;p&gt;After that file is saved locally, you can run the script by passing the positional parameter as the name of the Django project. The command will be like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash commands.sh myproj&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;iframe  src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=blackboard&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=%2523%21%252Fusr%252Fbin%252Fenv%2520bash%250A%250Amkdir%2520%25241%250Acd%2520%25241%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Asource%2520env%255Cbin%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25241%2520.%250Aclear"  style="width: 803px; height: 384px; border:0; transform: scale(1); overflow:hidden;"  sandbox="allow-scripts allow-same-origin"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;From the output of the script, you will have created a Django project inside a virtual environment. We can manually activate the virtual environment. You can experiment it within your system as it can be a lot more customizable. This is just bare bone script to start a Django project but you can add your own things into it.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Thus, from this little article, you can get a bit lazier in initializing a bare-bone Django project. We were able to understand the structure of the Django project and how to set up a virtual environment powered by Python. &lt;/p&gt;&lt;p&gt;After understanding those concepts we then moved on to making a script namely a batch file and a shell script to automate the initialization of the Django project. I hope it might have helped in some or another way, Thanks for reading till here. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-views-urls'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Views and URLS&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-buffers'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Buffers&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-setup-script</guid><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon</title><link>https://mr-destructive.github.io/techstructive-blog/devquotes-platform</link><description>No one can understand the joy in finishing a personal project, except the dreamer It was a while,since I have posted an article here, as I was busy on a project</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;No one can understand the joy in finishing a personal project, except the dreamer &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It was a while,since I have posted an article here, as I was busy on a project or a hackathon.&lt;/p&gt;&lt;p&gt;Hello, world! I am Meet a student and a self-taught web developer. I like to make and break stuff, especially when it comes to programming and Linux. I like shell scripting and learning different languages at once, love to learn about Vim and Linux everyday.&lt;/p&gt;&lt;p&gt;Every time I start a project something else comes and distracts me let that be any other programming language or technology. That leads to creating new projects and leaving the one behind unfinished, I know most of the developers face this.  But this time, thanks to Auth0 X Hashnode Hackathon, I was able to create an almost finished project within almost 10 days. Having a deadline and competition creates a mindset to finish a project on time, that's my first takeaway from this Hackathon. OH! this is my first Hackathon by the way, and it has been amazing so far.  &lt;/p&gt;&lt;p&gt;** Applying a framework to do something you desire and then everything working smoothly (after fixing 100s of bugs) is such a great feeling that no one can understand except for the person who just dreamt of it. **&lt;/p&gt;&lt;p&gt;I'll like to share my project which is a web application for the Auth0 x Hashnode Hackathon. Here it goes.&lt;/p&gt;&lt;h2 id="what-is-dev-quotes"&gt;What is Dev Quotes?&lt;/h2&gt;&lt;p&gt;Dev quotes is a web app designed for publishing and viewing quotes related to programming, developer mindset, and all the technicalities involved in a developer's life. It's basically a medium to express the life of developers and get inspired by others.  Here it is &lt;a href="https://devquotess.herokuapp.com/"&gt;devquotes&lt;/a&gt;&lt;/p&gt;&lt;h4 id="dark-mode"&gt;Dark Mode:&lt;/h4&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630074051548/TQz9Koh7l.png" /&gt;&lt;/p&gt;&lt;h4 id="light-mode"&gt;Light Mode:&lt;/h4&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630078314355/VhfLrcjJa.png" /&gt;&lt;/p&gt;&lt;h2 id="why-dev-quotes"&gt;Why Dev Quotes?&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Developers are not the people who only understand how to write code but they're also the people who can make the code understandable&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As a developer, there are often times where you have no motivation left inside, but you never know you might be just a few lines of code away from making another project or fixing a bug. For that, we require some inspiration or a push to break the barrier of.  I am not saying it's just for developers, it's designed for developers but everyone is open to understanding the developers' lives and their struggles. &lt;/p&gt;&lt;p&gt;I also felt the need to give back some love-crafted web app to the ever-wonderful and supportive dev community. It's a small application but still, I would like to give in something instead of nothing at all. Start small grow big, hopefully :)&lt;/p&gt;&lt;h2 id="features"&gt;Features&lt;/h2&gt;&lt;p&gt;Some of the main features of the web application are as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write\Edit\Delete Quotes if logged in.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Like / Unlike a Quote.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;See all of your quotes.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Randomized Quotes on Homepage.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dark/Light theme based on Browser's Preference and local storage.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;The app is mobile responsive as well, though the navbar is a bit wonky with the light/dark mode switch toggle, which can be taken care of soon.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt="dqmob.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630084573444/YEj38dUTD_.png" /&gt;&lt;/p&gt;&lt;h2 id="in-the-making"&gt;In the making&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Have the curiosity to learn, rest is automated&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The project was made by using various inspirational articles and videos about making a web application. But the idea stuck in my mind when I was thinking about the people who don't get inspired as a developer. Like there is no way you can remain sad about being a developer and keep on dealing with imposter syndrome. Every developer has a perspective of programming but there is an infinite number of opportunities if you are curious enough. Just started making the project and got so much into it that I was literally dreaming about it like I saw parts of the webpage. In my dream and I am making it that was genuinely a thing that powered me to complete it. &lt;/p&gt;&lt;p&gt;The project roughly started on 19th August and almost ended on 26th August, like the actual webpage and its core functionalities. Though on 27th were some styling and extra additions such as the About section and Footer. That was like the most productive week I ever had in my programming journey. That was fun as heck.&lt;/p&gt;&lt;h2 id="tech-stack"&gt;Tech Stack&lt;/h2&gt;&lt;p&gt;The Tech Stack involved with this app is :- &lt;code&gt;Django&lt;/code&gt;- &lt;code&gt;PostgreSQL&lt;/code&gt; - &lt;code&gt;HTML/CSS/JS&lt;/code&gt;- &lt;code&gt;Bootstrap&lt;/code&gt;&lt;/p&gt;&lt;p&gt;I have not used any front-end end frameworks just because I never found the need to learn them.  I had experience with Django for just 2 months and I am surprised I was able to make it. As obvious I have used Auth0 for authentication in my web application.&lt;/p&gt;&lt;h3 id="auth0-integration-for-authentication"&gt;Auth0 integration for Authentication&lt;/h3&gt;&lt;p&gt;I must tell you using Auth0 was just flawless addition to my app as I have to do almost nothing, just drop some credentials of the Auth0 application with my Django project using a  &lt;a href="https://auth0.com/docs/quickstarts"&gt;well-documented guide&lt;/a&gt;  for every type of framework. Simply straight-forward was the name for integrating authentication in my app.&lt;/p&gt;&lt;h4 id="how-i-used-auth0-with-django"&gt;How I used Auth0 with Django&lt;/h4&gt;&lt;p&gt;I've used Template tags such as if blocks to verify if the user is authenticated or not. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login-box auth0-box before&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {{ &amp;quot;{% if user.is_authenticated &amp;quot;}} %}            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary btn-sm tn-logout &amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log Out&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {{ &amp;quot;{% else &amp;quot;}} %}            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary btn-sm tn-login &amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/login/auth0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log In&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {{ &amp;quot;{% endif &amp;quot;}} %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;This was just readily available on their documentation though there were some adjustments as per the project requirements in this code to fit in the place.&lt;/p&gt;&lt;p&gt;I must say, integrating Auth0 is even easier than using Django User Model in some sense as most of the stuff is handled by the Auth0, on our side, we simply have to create the Auth0 specific app with the credentials from the dashboard rest just works flawlessly till now. How sweet and &lt;/p&gt;&lt;h3 id="specifications"&gt;Specifications&lt;/h3&gt;&lt;p&gt;I won't go in-depth about the technicalities of the project but would like to address certain things. Firstly I have mostly used Class-based views for the major part, certain areas are still function-based just for the simplicity of the application and a few of them are handled and documented by Auth0 so just preferred that. &lt;/p&gt;&lt;p&gt;Another thing is about Models, I just have a simple single model called &lt;code&gt;Quote&lt;/code&gt; which has an Author as a Foreign Key from the Django User Model. I would have also created multiple emojis for the like system but I was too excited and in a rush to see the actual app, So just kept it simple. XD&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630060555499/246ZKnypP.png" /&gt; &lt;/p&gt;&lt;p&gt;The rest of the stuff like &lt;code&gt;URLs&lt;/code&gt;, &lt;code&gt;Templates&lt;/code&gt;, and &lt;code&gt;static files&lt;/code&gt; are handled in a neatly organized way as depicted in the below diagram.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630060426600/JHMlrfOKZ.png" /&gt;&lt;/p&gt;&lt;p&gt;As it might not be clear from that, there are 3 apps -&amp;gt; &lt;code&gt;auth0login&lt;/code&gt;, &lt;code&gt;quotes&lt;/code&gt;, and &lt;code&gt;user&lt;/code&gt;, here &lt;code&gt;quotes&lt;/code&gt; is kind of the most important app as it has the models, forms, URLs, and the views linked to them here. &lt;/p&gt;&lt;h3 id="hosting"&gt;Hosting&lt;/h3&gt;&lt;p&gt;Hosting as you can guess, it's on  &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; , quite beginner-friendly and feature-rich. I also have a free addon for PostgreSQL Database here.  It's limited to 10K rows but that's sufficient for a starter app like this in my opinion. Also, it has 500 free hours of dyno, which is also sufficient for a small low-traffic app like this.  &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630076036133/9ofxnM5VN.png" /&gt;&lt;/p&gt;&lt;h2 id="bugs-encountered"&gt;Bugs Encountered&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Love Bugs, they'll give you experience&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This is the most exciting and important part if you consider the hackathon because this determines the level of experience that a developer shoes in achieving certain things or features if you will. Faced some typical Django errors as usual but also some unexpected things like Dark mode and light mode clashing together due to poorly written media queries in CSS.&lt;/p&gt;&lt;p&gt;As usual, the start is often hard, there is no motivation whatsoever in using the admin section to test the database queries and gibberish basic HTML page. In that process, I faced some primary key access issues and was able to understand the concept more clearly by fixing it.&lt;/p&gt;&lt;p&gt;Another instance was with handling post requests in Django which I've failed to do before. I used forms and a hybrid of CSS and bootstrap to style those forms which just works brilliantly. That took some time to figure out the exact working but after a while, it was working charms. &lt;/p&gt;&lt;h2 id="future-updates"&gt;Future Updates&lt;/h2&gt;&lt;p&gt;As said, I would like to add more like buttons expressing different emotions. Some other features to add are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;To add more emojis like claps, cheers, and others.&lt;/li&gt;&lt;li&gt;To add a profile page in the app that would display all the quotes of the particular author and the details related to him/her.  &lt;/li&gt;&lt;li&gt;Adding some tags to filter out particular types of quotes.&lt;/li&gt;&lt;li&gt;Improve UI-UX a bit more to make it professional and pleasant.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="source-code"&gt;Source Code&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Talk is cheap, show me the code - Linus Torvalds&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The source code is available at GitHub on this  &lt;a href="https://github.com/Mr-Destructive/devquotes"&gt;Link&lt;/a&gt;. It's freely open for any contribution after the hackathon(mid-September).  Some of the files such as the environment variables, virtual environments, cached data are not uploaded for security and obvious reasons.&lt;/p&gt;&lt;p&gt;Enough of technical talks, let's see the DEMO,&lt;/p&gt;&lt;p&gt;&lt;img alt="dqss.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630073466386/3wgnST5hc.gif" /&gt;&lt;/p&gt;&lt;p&gt;Silent claps.......&lt;/p&gt;&lt;p&gt;It's not a great UI-UX but works and is not too shabby in my opinion considering it only has base HTML and CSS with a little Bootstrap and Javascript. But ya, a fully functional Backend that's what I was looking for a full-stack app with some decent features. Hope it helps some developers stay motivated and hack into some hackathons like this.&lt;/p&gt;&lt;h3 id="references-used-while-creating-the-app"&gt;References used while creating the app:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=B40bteAMM_M&amp;amp;list=PLCC34OHNcOtr025c1kHSPrnP18YPB-NFi"&gt;Codemy -John Elder Django tutorial&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/3.2/topics/forms/"&gt;Django - Documentation for Forms&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/28837511/django-template-how-to-randomize-order-when-populating-page-with-objects"&gt;Django template randomizer shuffle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kzN_VCFG9NM"&gt;Auth0 app Django integration&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="closing-words"&gt;Closing Words&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Why developers find solutions to bugs at the stroke of sleeping, that's multithreading in our brains &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Hope you liked the project and hopefully will inspire developers to stay motivated and can focus on their goals more than dealing with imposter syndrome and whatnot. &lt;/p&gt;&lt;p&gt;Thank you for reading and using the app, for any feedbacks, Twitter handles, comment section, GitHub issues, LinkedIn messages are all freely open. Thanks. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-nerdtree'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: NERDTree&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-input'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Input&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/devquotes-platform</guid><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Vim: NERDTree</title><link>https://mr-destructive.github.io/techstructive-blog/vim-nerdtree</link><description>So, let You should have a Plugin-Manager for installing this plugin. It To install a plugin using Vundle, you need to configure Vundle first if you have not alr</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;a href="https://github.com/preservim/nerdtree"&gt;NERDTree&lt;/a&gt; is a great plugin in Vim for managing and navigating Files. Some might prefer fzf, telescope, and other plugins for navigation, NERDTree is not a bad option to begin within Vim. NERDTree allows you to even create/delete/move files and folders flawlessly without much effort, so it becomes a much more viable beginner's plugin.&lt;/p&gt;&lt;h2 id="installing-nerdtree-plugin"&gt;Installing NERDTree Plugin&lt;/h2&gt;&lt;p&gt;So, let's start with the Installation of the NERDTree Plugin, it's quite straightforward and simple.&lt;/p&gt;&lt;p&gt;You should have a Plugin-Manager for installing this plugin. It's not mandatory to have one but it becomes much easier to work with. You can choose any between &lt;code&gt;Vundle&lt;/code&gt;, &lt;code&gt;Vim-Plug&lt;/code&gt;, &lt;code&gt;Pathogen&lt;/code&gt; to name a few. It does not really matter with what you use just stick to one but if you are stuck somewhere just switch and it's not a big trouble to use other Plugin Managers as they are quite similar to each other.&lt;/p&gt;&lt;h4 id="vundle"&gt;Vundle&lt;/h4&gt;&lt;p&gt;To install a plugin using Vundle, you need to configure Vundle first if you have not already done it. You can find the installation docs &lt;a href="https://github.com/VundleVim/Vundle.vim"&gt;here&lt;/a&gt;. After Vundle has been configured in your vimrc you can simply add &lt;code&gt;Plugin 'preservim/nerdtree'&lt;/code&gt; between the call begin and end of Vundle, like :&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; vundle#begin&lt;span class="p"&gt;()&lt;/span&gt;  Plugin &lt;span class="s1"&gt;&amp;#39;preservim/nerdtree&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; vundle#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of your other Plugins will go in between those two statements, i.e. &lt;code&gt;call vundle#begin()&lt;/code&gt; and &lt;code&gt;call vundle#end()&lt;/code&gt;. After saving and sourcing the vimrc file, you need to install the plugin using the command &lt;code&gt;:PluginInstall&lt;/code&gt;, and there you are all Done!&lt;/p&gt;&lt;h4 id="vim-plug"&gt;Vim-Plug&lt;/h4&gt;&lt;p&gt;To install a plugin using the Vim-Plug manager, you need to configure Vim-Plug if you have not already configured it in your vimrc. You can find the installation docs at the GitHub README of &lt;a href="https://github.com/junegunn/vim-plug"&gt;Vim-Plug&lt;/a&gt;.After Vim-Plug has been configured in your vimrc you can simply add &lt;code&gt;Plug 'preservim/nerdtree'&lt;/code&gt; between the call plug begin and end statements. Just like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;()&lt;/span&gt;  Plug &lt;span class="s1"&gt;&amp;#39;preservim/nerdtree&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of your other Plugins will go in between those two statements, i.e. &lt;code&gt;call plug#begin()&lt;/code&gt; and &lt;code&gt;call plug#end()&lt;/code&gt;. After saving and sourcing your vimrc file, you need to now install those plugins using the command &lt;code&gt;:PlugInstall&lt;/code&gt;, and that is it!&lt;/p&gt;&lt;h4 id="pathogen"&gt;Pathogen&lt;/h4&gt;&lt;p&gt;To install any plugin using Pathogen plugin manager, you need to configure Pathogen in your vimrc if you have not done it already. You can find the installation docs on &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen.vim&lt;/a&gt;.After Pathogen has been configured in your vimrc, you can clone the git repository of that plugin into your local machine and then activate it using Pathogen. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/preservim/nerdtree.git ~/.vim/bundle/nerdtree&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After cloning the repository, you can add this to your vimrc where you have configured it. It's a kind of DIY manager in terms of managing the folders of the plugin.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; pathogen#infect&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nb"&gt;syntax&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this, you need to run this command to get docs and help with the plugins,&lt;/p&gt;&lt;p&gt;&lt;code&gt;:help tags ~/.vim/bundle/nerdtree/doc/&lt;/code&gt; or &lt;code&gt;:help tags&lt;/code&gt;&lt;/p&gt;&lt;p&gt;And there you are done with the plugin installed.&lt;/p&gt;&lt;p&gt;There are other Plugin managers as well, but these three are the most widely supported ones and they work out of the box, surely explore for yourself and find the perfect one for you.&lt;/p&gt;&lt;h2 id="activating-and-using-nerdtree"&gt;Activating and Using NERDTree&lt;/h2&gt;&lt;p&gt;Now, we actually need to use NERDTree, for that we can type in &lt;code&gt;:NERDTree&lt;/code&gt; in any folder in our local machine, and there should be a window open a vertical split to the left, just like this:&lt;img alt="NERDTree activate" src="https://i.imgur.com/KU2vMxO.png" /&gt;&lt;/p&gt;&lt;p&gt;After this, you can use &lt;C-w&gt; that is &lt;strong&gt;CTRL+W twice&lt;/strong&gt; twice to switch back and forth between windows. You can also use &lt;strong&gt;CTRL+W and HJKL&lt;/strong&gt; to move in directions in the windows. For further guides and key-bindings in Window-Splits, you can read my article &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/06/Vim-Window-Splits.html"&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Now, you can navigate to the file/folders using HJKL or arrows keys(not preferred). You can even use the numbers before the HJKL to jump and hop around the large codebases, this integrates really well with base Vim key-bindings.You can quiet the NERDTree window by just pressing &lt;code&gt;q&lt;/code&gt; or &lt;code&gt;:q&lt;/code&gt;, definitely the former is efficient. You can open/collapse the folders also using the enter key to open the file in the current buffer. But hey that's quite limited, what have you ever seen!&lt;/p&gt;&lt;h4 id="open-file-in-splits"&gt;Open File in Splits&lt;/h4&gt;&lt;p&gt;You can open a file in a horizontal split using the key &lt;code&gt;i&lt;/code&gt; on the file. You can open a file in Vertical split using the &lt;code&gt;s&lt;/code&gt; key keeping the current highlight in NERDTree on the file which you would like to open. This can be really a great feature to have while opening multiple files and file structures.&lt;/p&gt;&lt;h4 id="managing-filesfolders-using-nerdtree"&gt;Managing Files/Folders using NERDTree&lt;/h4&gt;&lt;p&gt;You can create files using the NERDTree window by pressing m inside the particular folder where you want to. If you want to create a file in the root folder, you can go to the topmost file location and press &lt;code&gt;m&lt;/code&gt; inside the NERDTree window. If you press &lt;code&gt;m&lt;/code&gt;, you will be able to see different kinds of options namely:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Add a child node.(&lt;code&gt;a&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can create a file or a folder using the key &lt;code&gt;a&lt;/code&gt; or simply &lt;code&gt;Enter&lt;/code&gt; to create the file in the current highlighted location. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Move the Current Node. (&lt;code&gt;m&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can create a file or a folder using the key &lt;code&gt;a&lt;/code&gt; or simply &lt;code&gt;Enter&lt;/code&gt; to create the file in the current highlighted location. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Delete the current Node. (&lt;code&gt;d&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can move the currently highlighted file/folder to any other directory using the file manager itself. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Open the current Node in the system Text-Editor.(&lt;code&gt;o&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can delete the file/folder which is currently selected on the NERDTree menu.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Copy the current Node. (&lt;code&gt;c&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can open the file in the system-default text-editor using the key &lt;code&gt;o&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Copy the Path to the clipboard.(&lt;code&gt;p&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can copy the current file/folder or a node using the command &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;List the Current Node. (&lt;code&gt;l&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can list the file/folder i.e to display its properties the read/write/execute permissions, date modified and created, etc.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run system Command in this folder. (&lt;code&gt;s&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;We can run system commands or shell/terminal commands using the key &lt;code&gt;s&lt;/code&gt;, For windows, we open the COMMAND PROMPT, and in Linux and macOS, it is terminal.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You can quit that window by pressing &lt;code&gt;Esc&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Here is some of the Screencast of me demonstrating the NERDTree plugin features and the edit options.&lt;img alt="vimnerd.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630423628366/zZE7R5aL7.gif" /&gt;&lt;/p&gt;&lt;p&gt;This is just self-explanatory and beginner-friendly sets of commands, it becomes really easy to do this with some custom macros as we'll talk about in the next sections.&lt;/p&gt;&lt;h2 id="macros-to-open-file-tree"&gt;Macros to open file tree&lt;/h2&gt;&lt;p&gt;You can make a key-binding to open the NERDTree, &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :NERDTree&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;You can map anything instead of &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;, most people use &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; but it's easy to use &lt;code&gt;CTRL+N&lt;/code&gt; for me, it's just personal preference.&lt;/p&gt;&lt;p&gt;If you do not like to open NERDTree again and again, you can keep it open whatsoever using the custom key-binding in your vimrc.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * NERDTree&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will open the NERDTree automatically for you when you open Vim, Ya I get it, it's not needed every time but most of the time a developer is switching between the files. &lt;/p&gt;&lt;h2 id="enabling-autoreload"&gt;Enabling Autoreload&lt;/h2&gt;&lt;p&gt;We can auto-reload the NERDTree window when there is a change in the file structure, i.e. a file/folder is deleted/created/moved/etc. We again need to set this in our vimrc:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;BufEnter&lt;/span&gt; NERD_tree_* &lt;span class="p"&gt;|&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;normal R&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;CursorHold&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;t:NerdTreeBufName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SNR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;_refreshRoot&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will reload the NERDTree when the cursor is in the NERDTree's window. This could be really time-saving and a nice quick configuration to enhance the efficiency of your Text-editing.&lt;/p&gt;&lt;h2 id="enabling-autorefresh-for-change-in-the-current-directory"&gt;Enabling Autorefresh for change in the current directory&lt;/h2&gt;&lt;p&gt;We can also reload the NERDTree when we change the directory. The above-mentioned command is not sufficient to do that, we have to add another set of configurations.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;augroup DIRCHANGE    &lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;    autocmd DirChanged global :NERDTreeCWDaugroup END&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By adding this to your vimrc, you will refresh the NERDTree every time you enter or change the current directory. This is also a great addition to have to save time by reloading the Window for every change in the path, if you are looking for something among a huge code-base, this works a charm.&lt;/p&gt;&lt;h2 id="auto-close"&gt;Auto close&lt;/h2&gt;&lt;p&gt;You need to close the NERDTree manually each time you want to exit out of it, but this can also be automated just for the sake of simplicity and effectiveness in &lt;strong&gt;QUITTING VIM&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;autocmd bufenter * &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;winnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b:NERDTree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="k"&gt;b&lt;/span&gt;:NERDTree.isTabTree&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will close the NERDTree window if it is the only open window. That can be frustrating at moments but the majority of the time this is a great addon indeed.&lt;/p&gt;&lt;h2 id="packing-it-together"&gt;Packing it together&lt;/h2&gt;&lt;p&gt;So, we have learned the basics of using and modifying NERDTree according to our needs, to put it together, you can use this snippet directly into your vimrc and enjoy the flawless experience.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;quot; Open nerdtree window on opening Vim&lt;/span&gt;autocmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * NERDTree&lt;span class="c"&gt;&amp;quot; Refresh the current folder if any changes&lt;/span&gt;autocmd &lt;span class="nb"&gt;BufEnter&lt;/span&gt; NERD_tree_* &lt;span class="p"&gt;|&lt;/span&gt; execute &lt;span class="s1"&gt;&amp;#39;normal R&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;CursorHold&lt;/span&gt; * &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;t:NerdTreeBufName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SNR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;_refreshRoot&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt;&lt;span class="c"&gt;&amp;quot;Reload the window if directory is changed&lt;/span&gt;augroup DIRCHANGE    &lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;    autocmd DirChanged global :NERDTreeCWDaugroup END&lt;span class="c"&gt;&amp;quot;Close nerdtree automatically if it is theonly window open&lt;/span&gt;autocmd bufenter * &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;winnr&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;amp;&amp;amp; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b:NERDTree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class="k"&gt;b&lt;/span&gt;:NERDTree.isTabTree&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="conclusion"&gt;Conclusion:&lt;/h2&gt;&lt;p&gt;So, We were able to make Vim a better place to work with. Making it easier to navigate along with files and folders. Configuring the NERDTree Plugin, customizing the look and functionality of Vim as per the needs. NERDTree is a great plugin no matter how you use it. It makes Vim more viable as a text editor for daily use and that also in an efficient and clean way. Surely there might be other plugins that are super powerful and blazing fast, NERDTree provides a good UI as well by providing a graphical representation of the File structure that enhances its usage.That is what Vim is about, learning every day some things to change the way to edit. Thank you for reading. Happy Viming and Coding :)&lt;/p&gt;&lt;h3 id="references"&gt;References:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/preservim/nerdtree"&gt;NERDTree - docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8793489/nerdtree-reload-new-files/8794468"&gt;Refresh NERDTree&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://vi.stackexchange.com/questions/31050/how-can-i-make-nerdtree-update-root-to-the-current-directory-when-i-change-direc"&gt;Reload NERDTree on Directory change&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1447334/how-to-add-nerdtree-to-your-vimrc"&gt;Open NERDTree in Vim by default&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2066590/automatically-quit-vim-if-nerdtree-is-last-and-only-buffer"&gt;Close NERDTree automatically&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/hello-golang'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Installation and Hello-World&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/devquotes-platform'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-nerdtree</guid><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate></item><item><title>Why use Vim ?</title><link>https://mr-destructive.github.io/techstructive-blog/why-use-vim</link><description>So, Why would one use Vim? As Vim being the most complicated Text editor when it comes to  Vim is not a text editor just for anyone, it can be daunting initiall</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;So, Why would one use Vim? As Vim being the most complicated Text editor when it comes to &lt;strong&gt;closing it&lt;/strong&gt;!! Also, people think it's not worth the time or it's just not their type of Text Editor. Well, that's true, I am not forcing anyone to use Vim, just to tell the reasons why people use Vim. Again, it's not to show off to anyone that I use Vim, just to appreciate the power of Vim and its community, it's just amazing!!&lt;/p&gt;&lt;p&gt;Vim is not a text editor just for anyone, it can be daunting initially but the more you use it, the more you love it. There is nothing called a time-wastage in learning Vim, if you think learning something is waste of time, just don't learn it! To have understood and got good at something you need to dedicate time and effort to it, there's no shortcut. When it comes to shortcuts, Vim is the fairyland of it, just use one or create your own. That's how cool Vim can be when used properly.&lt;/p&gt;&lt;p&gt;Some of the most important and crucial reasons why people use Vim are:&lt;/p&gt;&lt;h2 id="vim-is-speed"&gt;Vim is Speed!&lt;/h2&gt;&lt;p&gt;Vim can be opened from the terminal, and that itself can speak that it is lightweight and uses lower system resources and hence causing minimal lag. This might not be an issue for high-end computers but when it comes to low-end machines, Vim behaves as a life-saver. Using certain commands feels so wicked fast and intuitive. Certain commands such as &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, and many others are really powerful when it comes to editing in Vim. When you don't have to think about what keys you should type, you are really getting faster in Vim. &lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://s6.gifyu.com/images/screenrecording.gif" /&gt;&lt;/p&gt;&lt;p&gt;The above screencast is from my article &lt;a href="https://mr-destructive.github.io/techstructive-blog/python/vim/2021/06/06/Vim-for-Python.html"&gt;Vim: Set up for Python&lt;/a&gt;, which uses some key mappings to run python code directly from Vim itself by executing the shell commands from Vim's Command mode. A simple map can save a lot of time.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nnoremap py :!python %&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="number-of-commandsshortcuts"&gt;Number of Commands/shortcuts&lt;/h2&gt;&lt;p&gt;When it comes to using key-bindings and shortcuts, there is no shortage of them. You can spend days, weeks, months, years but still, there will be some or the other thing to learn in Vim. That can be very intimidating to some people but that's how life is. &lt;strong&gt;You cannot get perfect at anything but surely better is the word to focus on.&lt;/strong&gt; There is a good little cheatsheet at &lt;a href="https://devhints.io/vim"&gt;devhints&lt;/a&gt; for beginners to quickly get started. Also, you can follow with the Youtuber- &lt;a href="https://www.youtube.com/channel/UC8ENHE5xdFSwx71u3fDH5Xw"&gt;ThePrimeagen&lt;/a&gt;, who focuses on switching and using Vim. Vim is has a robust set of command and key-bindings by far compared to other tex-editors. Here are some of my daily used &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/07/18/Vim-Enhancing-Editing-speed.html"&gt;editing commands&lt;/a&gt; and &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/06/26/Vim-Enhancing-Movement-speed.html"&gt;navigation commands&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="power-to-use-it-as-an-ide"&gt;Power to use it as an IDE&lt;/h2&gt;&lt;p&gt;Vim provides some awesome features such as &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/06/29/Vim-Terminal.html"&gt;terminal integration&lt;/a&gt;, &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/06/14/Vim-Keymapping.html"&gt;Key-mappings&lt;/a&gt;, &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/06/Vim-Window-Splits.html"&gt;Window Splits&lt;/a&gt;, etc to take text-editing and developer environment to a next-level. You can literally use Vim as an IDE for many of the programming languages like C/C++, Python, Java, Javascript, GO, etc. Though it can't replace entire IDE-like features, it is indeed powerful enough to add features in making a custom IDE experience. It might require some time and research to configure it to use it as a full-blown IDE, but it might be a very useful and self-motivating experience. There are definitely many articles, tutorials out to guide you in configuring the editor to an IDE. People might not use Vim for the features it has but also for the lightweights as compared to other IDEs such as Visual Studio, Android Studio, Eclipse, IntelliJ IDEA, etc.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1630827706766/cdN6GdnhH.png" /&gt;&lt;/p&gt;&lt;p&gt;From, the above screenshot, we can see that I have configured Vim almost like VSCode, Ok! Just the look of it is similar but ya we have the file manager as &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/31/Vim-NERDTree.html"&gt;NERDTree&lt;/a&gt;, integrated Terminal, and the buffer opened as the editor. You can even add more functionality like autocomplete, keymaps to compile/run/build the code. There is are infinite possibilities when it comes to customization in Vim and to make it a full-blown IDE. OH! And by the way my Vim look changes from time to time XD&lt;/p&gt;&lt;h2 id="available-almost-everywhere"&gt;Available almost everywhere&lt;/h2&gt;&lt;p&gt;As said, Vim can be opened via the terminal, and hence it is quite viable when it comes to accessibility. It is pre-installed in almost every Linux-distributions, macOS, FreeBSD, etc. Hence it is quite reliable when it comes to compatibility and cross-platform support. You can start editing in any environment in Vim, so it becomes a good reason to learn to use Vim at least basic editing and opening, closing, etc. Vim being minimal and lightweight, it just becomes easy to work with servers. Production-environment, etc. It also isn't that complicated once you make your head around it. Being available in almost every Operating System has some value to it like it is the most dependable editor out there. Even after 30 years, yes Vim was released in 1991, it is still maintained by its producer &lt;a href="https://en.wikipedia.org/wiki/Bram_Moolenaar"&gt;Brain Moolenaar&lt;/a&gt;. That is mind-boggling, Vim is truly a vintage text editor silently but widely dominated in terms of its reach in Computing.   &lt;/p&gt;&lt;h2 id="the-level-of-customizationconfiguration"&gt;The Level of Customization/Configuration&lt;/h2&gt;&lt;p&gt;It's kind of a double-sided sword for some people as it can be daunting to customize from scratch and also, it could be a rewarding and pleasurable experience of having the personalized experience.  With the number of plugins, custom vimrc and color schemes, etc Vim is very prone to personalization. It is &lt;strong&gt;Open Source&lt;/strong&gt;, so we also have it's distributions such as &lt;a href="https://github.com/SpaceVim/SpaceVim"&gt;SpaceVim&lt;/a&gt;, &lt;a href="https://github.com/spf13/spf13-vim"&gt;SPF-13&lt;/a&gt;, etc. Some more distribution can be found &lt;a href="https://dev.to/ajeebkp23/some-popular-vim-distributions-a68"&gt;here&lt;/a&gt;. Some Distribution is pref-configured with some basic stuff and is ready to use, so they are quite beginner-friendly and introduce them to Vim in a better way. NeoVim which is an evolution of Vim written in Lua is much more powerful and provides even more customization keeping the basic key-bindings in mind. Editing Vimrc is quite an amazing and intuitive experience as it allows to add functionality or enhance the existing features in Vim. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Text Editors don't matter, what matters are the problem-solving skills&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Vim is a simple and minimal text editor, everyone can use it but not everyone finds the need to use it, that's fine. It might be ideal for me to use Vim than other editors but it might not be for you. But there is nothing to lose in knowing some basics of Vim. It might be useful somewhere, you never know! And if your favorite editor is not available, Vim might prove to be a great quick solution. Thanks for reading. Happing Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/bash-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;What is BASH?&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-static-files'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Static Files&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/why-use-vim</guid><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Filter and Find an Issue on GitHub</title><link>https://mr-destructive.github.io/techstructive-blog/find-filter-github-issues</link><description>Are you stuck in finding an open-source project to contribute to? We will see how you can pick up an issue on GitHub appropriate as per your preferences of lang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Are you stuck in finding an open-source project to contribute to? &lt;/p&gt;&lt;p&gt;We will see how you can pick up an issue on GitHub appropriate as per your preferences of languages, labels, complexity, and thus you can find a Community or a project to work and continue with further contributions.&lt;/p&gt;&lt;p&gt;This process might not be as efficient but is quite helpful for beginners or people getting started to contributing to Open Source.&lt;/p&gt;&lt;h2 id="understand-the-search-bar"&gt;Understand the search bar&lt;/h2&gt;&lt;p&gt;I assume you have your GitHub account already created. If not go ahead at &lt;a href="https://github.com/join"&gt;Github&lt;/a&gt; and create one. On the Home page, you can easily navigate to the &lt;code&gt;Issues&lt;/code&gt; tab and you will see something like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="Issues tab" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631190578909/UBpq3rb0H.png" /&gt;&lt;/p&gt;&lt;p&gt;Now, you won't find any issues if you haven't created any. But if you look at the search bar, you will find the reason why it is empty or why there are only the issues that you have created. You will see that in the search bar there is a filter called &lt;code&gt;author:Username&lt;/code&gt;, which filters the issues which are created by you. You definitely don't want this as you want to search and find other issues by other people/communities. So, simply remove the text &lt;code&gt;author:Username&lt;/code&gt; from the search bar. Keep rest as it is for now. Now if you press enter after removing the author filter, you will see all the issues on GitHub. &lt;/p&gt;&lt;p&gt;&lt;img alt="Issues removed author" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631185853484/e0PyTbgip.png" /&gt;&lt;/p&gt;&lt;p&gt;There will be a ton of them, very random in terms of programming languages, frameworks, projects, difficulty, type, etc. they are basically the issues created recently on GitHub.&lt;/p&gt;&lt;p&gt;In the next section, we will see how to filter those issues as per the programming languages/tools to which you might like to contribute to.&lt;/p&gt;&lt;h2 id="add-languages"&gt;Add languages&lt;/h2&gt;&lt;p&gt;We can add filters to the issues as &lt;code&gt;language:name&lt;/code&gt;, this will filter all the Issues which have the languages in their codebase. &lt;/p&gt;&lt;p&gt;For Example:&lt;/p&gt;&lt;p&gt;&lt;img alt="Issues language filter" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631190679194/8Od1tsdKp.png" /&gt;&lt;/p&gt;&lt;p&gt;Here, I have filtered the issues which have language as &lt;code&gt;python&lt;/code&gt;, you can use any language/tool you might want and would love to find some interesting projects to contribute and learn from.&lt;/p&gt;&lt;p&gt;If you want to search by multiple programming languages you can separate the names of those programming languages by a comma &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can also separate programming languages with space and enclosing all of them under double quotes &lt;code&gt;""&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For Example:&lt;/p&gt;&lt;p&gt;Let's search for issues with C, C++, and Java as their programming languages, we can use &lt;code&gt;language:c,cpp,java&lt;/code&gt; or &lt;code&gt;language:"c cpp java"&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The above filter will give out all the issues which are created from programming languages either C/C++/Java.&lt;/p&gt;&lt;p&gt;You can find more filter options on the &lt;a href="https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-issues-and-pull-requests"&gt;GitHub docs&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="add-labels"&gt;Add labels&lt;/h2&gt;&lt;p&gt;You can find issues as per labels marked on them, many issues have a label marked on them to improve their visibility and meta-information about the issue.&lt;/p&gt;&lt;p&gt;We have some labels which GitHub has created already for common scenarios in projects.  &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;bug&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;documentation&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;duplicate&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;enhancement&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;good first Issue&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;help wanted&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;invalid&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;question&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;wontfix&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We can even create our own labels by providing the label name and a description. &lt;/p&gt;&lt;p&gt;To search for labels, you can use &lt;code&gt;label:name of the label&lt;/code&gt;. You can any of the above 9 label tags or any other tag name that you think is popular other than those 9. &lt;/p&gt;&lt;p&gt;You would have to use double quotes (&lt;code&gt;""&lt;/code&gt;) to add certain labels with multiple words like &lt;code&gt;good first issue&lt;/code&gt; or &lt;code&gt;help wanted&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;If you search for &lt;code&gt;label:"good first issue"&lt;/code&gt;, you will get all of the issues(newest first) which have a label &lt;code&gt;good first issues&lt;/code&gt; tagged on them. &lt;/p&gt;&lt;p&gt;Similarly, for multiple issues, you can add comma-separated labels as well. Just like &lt;code&gt;label:bug,"good first issue"&lt;/code&gt; will search for either &lt;code&gt;bug&lt;/code&gt;, &lt;code&gt;good first issue&lt;/code&gt; or both. &lt;/p&gt;&lt;p&gt;&lt;img alt="Issues label" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631190841185/vrYTLoaaNu.png" /&gt;&lt;/p&gt;&lt;h2 id="more-sorting-options"&gt;More Sorting Options&lt;/h2&gt;&lt;p&gt;In the rightmost part of the search bar, in the Sort button, you can click on there and find a couple of options like: &lt;code&gt;newest&lt;/code&gt;, &lt;code&gt;oldest&lt;/code&gt;, &lt;code&gt;least commented&lt;/code&gt;, &lt;code&gt;recently updated&lt;/code&gt;, and so on. If you click on any of them you will see the changes reflected on the list of issues as well as the search bar. &lt;/p&gt;&lt;p&gt;&lt;img alt="Issues sort" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631189621396/jO58HkYxH.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;After this the stage is yours, you can look at any issue and Understand its objective, then ask yourself can you solve this issue? If yes then read the contribution guidelines, and the rest is sheer skills like git, programming, documentation, etc.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Now you can go ahead and start applying the filters on issues and make some contributions to Open-Source on GitHub. We covered some methods and tricks to find and filter out the issues on GitHub based on the programming languages/tools and the labels attached to them.  &lt;/p&gt;&lt;p&gt;This technique can be good for beginners as well as people who want to find quick issues to solve. Feel free to explore and try out different filters and find the issue you are confident to work on. Good Luck!Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-deploy-heroku'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django + PostgreSQL Deployment on Heroku&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/bash-dictionary-scrapper'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Scrapping the meaning of a word from dictionary.com using BASH script.&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/find-filter-github-issues</guid><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Vim for Competitive Programming</title><link>https://mr-destructive.github.io/techstructive-blog/vim-for-cp</link><description>Vim is not a bad text editor when it comes to using it for Competitive Programming. It Using Vim for CP is a bit challenging in the initial stage but just stay </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Vim is not a bad text editor when it comes to using it for Competitive Programming. It's kind of one way or the other, you would love it or you could trash it as it can waste a tremendous amount of time to write code every time. But once you are in a decent setup including some key-bindings and plugins can improve your speed in using Vim. I personally have used it since the beginning and haven't regretted it even a tiny bit till date. It's a flawless and enjoyable experience. I've used C++ for my CP journey, C is quite similar as well, but C++ has more library support and is a bit easier to write comparatively.&lt;/p&gt;&lt;p&gt;Using Vim for CP is a bit challenging in the initial stage but just stay consistent and you'll be in flying colors on the other side. Here, I'll give some quick key-bindings and plugins to include to Vim to enhance the workflow for Competitive Programming.&lt;/p&gt;&lt;h2 id="quick-boilerplate-code"&gt;Quick Boilerplate code&lt;/h2&gt;&lt;p&gt;Firstly, let's create a key-binding for the boilerplate code. We just need to map the key with the code we need to write which will be integrated with Vim commands.&lt;/p&gt;&lt;p&gt;For C++&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;cpf&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;iostream&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ousing namespace std;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;int main&lt;span class="p"&gt;()&lt;/span&gt;{&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;oreturn &lt;span class="m"&gt;0&lt;/span&gt;;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;kki&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For C:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;cp&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;#&lt;span class="nb"&gt;include&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;stdio.&lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;int main&lt;span class="p"&gt;(&lt;/span&gt;void&lt;span class="p"&gt;)&lt;/span&gt;{&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;oreturn &lt;span class="m"&gt;0&lt;/span&gt;;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;kki&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For Java:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; iclass &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;quot;%pxxxxxa {&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;opublic static void main&lt;span class="p"&gt;(&lt;/span&gt;String args[]&lt;span class="p"&gt;)&lt;/span&gt;{&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt;}&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;kki&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Tab&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;Tab&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Now, you get the idea of creating such macros for your own programming language. I don't think Python can have boilerplate code, even it has it's quite small compared to C/C++/Java/etc. You can include those codes into the key map. Let me explain the map to you.&lt;/p&gt;&lt;p&gt;Let's look at the Java example, the &lt;code&gt;nnoremap&lt;/code&gt; is the map command with attributes like non-recursive and the mode of mapping. In this case &lt;code&gt;n&lt;/code&gt; stands for normal mode map i.e. the map will get triggered in the normal mode, &lt;code&gt;nore&lt;/code&gt; stands for non-recursive behavior of the map. For further readings, you can read my &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/06/14/Vim-Keymapping.html"&gt;Vim-keymapping Guide&lt;/a&gt; article. The map itself has the right and a left part, kind of a map of the key and command to execute. You can use any key to trigger it, I have used CTRL+J or &lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; to activate the map. The command is quite long but let's break it down into smaller chunks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Starting with &lt;code&gt;i&lt;/code&gt;, we enter into insert mode and we type in class and hit &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; key and this is a special trick to deal with java for the class name as it should be the name of the file itself. We use the &lt;code&gt;%&lt;/code&gt; register for copying the current file's entire name (with extension), so we have to remove the &lt;code&gt;.java&lt;/code&gt; part so, you see five x's to delete those after we have pressed a to get into insert mode just ahead of the cursor. We then insert &lt;code&gt;{&lt;/code&gt; for the class and again hit escape to go back to normal mode.&lt;/li&gt;&lt;li&gt;We type &lt;code&gt;o&lt;/code&gt; to go into insert mode to the next line, type in &lt;code&gt;public static void main(String args[])&lt;/code&gt; and this is the same stuff of escaping and going in next line. &lt;/li&gt;&lt;li&gt;Finally, we hit &lt;code&gt;kk&lt;/code&gt; to move up twice and enter the insert mode with &lt;code&gt;i&lt;/code&gt; and hit tab twice to get the indentation correct. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, you can add more as per your preference of pre-defined constants and functions and the rest stuff involved in your language of choice.&lt;/p&gt;&lt;h2 id="running-code-by-a-key-binding"&gt;Running Code by a Key-binding&lt;/h2&gt;&lt;p&gt;After the boilerplate code being taken care of, we can now move to the building and running of the code file in Vim. We can add some more custom key bindings to auto compile and run the code within Vim. &lt;/p&gt;&lt;p&gt;We can compile the code with the compilers or interpreters for the languages from the Vim using &lt;code&gt;!&lt;/code&gt; which executes the commands from the terminal and pass in &lt;code&gt;%&lt;/code&gt; i.e. the current file name and output file as &lt;code&gt;%:r&lt;/code&gt; i.e. current file name without the extension in case of C/C++/Java. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Compile -&amp;gt; &lt;code&gt;c++ hello.cpp -o hello&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Run -&amp;gt; &lt;code&gt;%:r&lt;/code&gt; for Windows&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;and&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;./%:r&lt;/code&gt; for Linux/macOS&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;We have added those two commands i.e (compile and run) using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to make things more clear and compact. For C++&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; cpp :&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt; % &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; %:&lt;span class="k"&gt;r&lt;/span&gt; &amp;amp;&amp;amp; %:&lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For C&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;gcc % &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;o&lt;/span&gt; %:&lt;span class="k"&gt;r&lt;/span&gt; &amp;amp;&amp;amp; %:&lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For Java&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt; :&lt;span class="p"&gt;!&lt;/span&gt;javac % &amp;amp;&amp;amp; java %:&lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For Python&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;py&lt;/span&gt; :python %&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Again, you can apply this to any programming language you use. Also kindly note that their could be some differences for compiling the code in Linux and Windows so just be careful which command you use in which Operating system.&lt;/p&gt;&lt;p&gt;&lt;img alt="vimjv.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631540728028/2puTZUXwK.gif" /&gt;&lt;/p&gt;&lt;p&gt;The above gif demonstrates the usage of those commands and key bindings to make the workflow of running and building process much easier and smoother.&lt;/p&gt;&lt;h2 id="opening-terminal-to-compile-and-run-code"&gt;Opening Terminal to compile and run code&lt;/h2&gt;&lt;p&gt;We can use the terminal to compile and run code if you wish to do it this way as well. Vim is quite a terminal-friendly editor, you can open any terminal from Vim.&lt;/p&gt;&lt;p&gt;You can enter &lt;code&gt;:term&lt;/code&gt; to open the default terminal in a horizontal split. You can explicitly enter the terminal/shell name to open it like &lt;code&gt;:term bash&lt;/code&gt; to open bash, &lt;code&gt;:term powershell&lt;/code&gt; to open PowerShell, &lt;code&gt;:term zsh&lt;/code&gt; to open zsh, and so on. This is quite a great utility that vim provides with it. You can switch between windows using &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; or CTRL+W &lt;strong&gt;twice&lt;/strong&gt; or use HJKL keys along with &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; to move with ease. More on Vim and Integrated Terminals in &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/06/29/Vim-Terminal.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can now explore the terminal world yourself and execute the commands from therein. &lt;/p&gt;&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;&lt;p&gt;When it comes to Vim, there are a ton of plugins made for everything you can imagine and couldn't imagine. We can use Plugin managers to manage those plugins for us or manually manage those yourself. You can go with one of the three well-known plugin managers like &lt;code&gt;Vim-Plug&lt;/code&gt;, &lt;code&gt;Vundle&lt;/code&gt; or &lt;code&gt;Pathogen&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Using those plugin managers, we can install plugins like some of the useful ones are:&lt;/p&gt;&lt;h3 id="nerdtree"&gt;NERDTree&lt;/h3&gt;&lt;p&gt;NERDTree is a great plugin for beginners and also for people doing competitive programming as it saves a bit of time as well. You can install the NERDTree plugin from the GitHub docs. You can read about the detail of configuring the NERDTree plugin in &lt;a href="https://mr-destructive.github.io/techstructive-blog/vim/2021/08/31/Vim-NERDTree.html"&gt;this article&lt;/a&gt;. This plugin allows you to have a graphical representation of the files and folder structures in the current directory. You can extend its capabilities to auto-refresh and auto open/close using some custom configuration as provided in the above-mentioned article. &lt;/p&gt;&lt;p&gt;You basically open the NERDTree with the command &lt;code&gt;:NERDTree&lt;/code&gt; after installing and configuring. You can make key-bindings and shortcuts to use as you like and prefer.&lt;/p&gt;&lt;h3 id="autocompletion-and-lsp"&gt;Autocompletion and LSP&lt;/h3&gt;&lt;p&gt;Autocompletion is quite important when it comes to competitive programming as you have to save time on the &lt;strong&gt;stuff you know&lt;/strong&gt; and let the application process it for you. We do have some plugins for auto-completion and also LSPs for this specific task. LSP is quite great and provides much more accurate predictions when it comes to autocompletion. You can check out the LSP &lt;a href="https://github.com/prabirshrestha/vim-lsp"&gt;unofficial plugin for vim&lt;/a&gt; for more information. &lt;/p&gt;&lt;p&gt;For normal plugins like &lt;a href="https://github.com/vim-scripts/AutoComplPop"&gt;AuotoComplPop&lt;/a&gt; are also decent and provide a great beginner experience.&lt;/p&gt;&lt;p&gt;Not many plugins would be required for competitive programming just some autocompletion and a nice interface with a file system will work for the basic set-up but that is not the end, you can extend it as per your needs and skills. Vim is quite epic in terms of the customization it can offer.&lt;/p&gt;&lt;p&gt;&lt;img alt="vimcpt.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631768130787/ccDyyJ45y.gif" /&gt;&lt;/p&gt;&lt;p&gt;Similarly, for C++, I have demonstrated the use of key mappings and also showed the usage of the terminal inside of Vim, this is quite a flawless experience to integrate and use the terminal as per choice and preference.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So from this article, we were able to set up Vim for competitive programming by adding some custom key mappings and plugins for different languages. This was not a complete guide, I could not include every language's configuration here, surely you can ask me anytime in the comments, GitHub, Twitter or just mail me I can try to configure a programming language on Vim. Thanks for reading. &lt;/p&gt;&lt;p&gt;Happy Viming and Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-structs'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Structs&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-functions'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Functions&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-for-cp</guid><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate></item><item><title>My Journey as a Technical Writer</title><link>https://mr-destructive.github.io/techstructive-blog/technical-writer-journey</link><description>Hello World When I was learning Vim, I found the need to write some kind of cheatsheet for myself. So I started writing it, soon I realized I had written a kind</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Hello World! I am Meet Gor, a self-taught web developer, Linux enthusiast, and a newbie technical writer. I am currently studying in an Engineering college pursuing my B. Tech in I.T.  I love to explore new programming languages and technologies, create innovative projects, love to write stories and blogs like this. &lt;/p&gt;&lt;h2 id="how-it-started"&gt;How it started&lt;/h2&gt;&lt;p&gt;When I was learning Vim, I found the need to write some kind of cheatsheet for myself. So I started writing it, soon I realized I had written a kind of an article instead of a cheatsheet XD There were a lot of chunks of it unorganized but meaningful in some sense. So, from there I started to research on article writing. I found the term perfect for my techno feelings to express i.e. "Technical Writing".  I soon landed on Hashnode, I knew Medium, GeeksforGeeks but found Hashnode absolutely perfect and much more viable to the creativity of an author. &lt;/p&gt;&lt;h3 id="starting-on-hashnode"&gt;Starting on Hashnode&lt;/h3&gt;&lt;p&gt;My  &lt;a href="https://techstructiveblog.hashnode.dev/why-and-how-you-should-use-vim-as-a-text-editor-and-ide"&gt;first article&lt;/a&gt;  was published on  &lt;a href="https://hashnode.com/@Mr-Destructive/joinme"&gt;Hashnode&lt;/a&gt;, which I absolutely love and adore. That was a bit big article about 12 minutes for a beginner me writing everything about Vim which I knew about that time.  The response was not that bad, I received a couple of reactions and comments to pump me up but I never felt confident to write more articles. &lt;/p&gt;&lt;h3 id="geeksforgeeks-internship"&gt;GeeksforGeeks Internship&lt;/h3&gt;&lt;p&gt;Until I found an &lt;strong&gt;Internship at GeeksforGeeks for a Technical Writer&lt;/strong&gt; role.  &lt;a href="https://www.google.com/aclk?sa=l&amp;amp;ai=DChcSEwj-_8TAq_7yAhUtlUsFHdI4AD4YABAAGgJzZg&amp;amp;ae=2&amp;amp;sig=AOD64_1xL_mUI1OLWumXOK-H1jF4wRP8eg&amp;amp;q&amp;amp;nis=1&amp;amp;adurl&amp;amp;ved=2ahUKEwjSlb_Aq_7yAhXMb30KHXM6BPsQ0Qx6BAgCEAE"&gt;Geeksforgeeks&lt;/a&gt;  is a start-up for Computer science students to learn and grow with free as well as paid courses and mentors. In a couple of months, I wrote some 10-12 articles about Shell scripting. There I really found my interest and the confidence I wanted.  It was really a great experience working here and loved the freedom it provided to the authors with genuine and constructive feedback along with a decent stipend.  &lt;a href="https://auth.geeksforgeeks.org/user/meetgor/articles"&gt;Here&lt;/a&gt;  you can find my work.&lt;/p&gt;&lt;h3 id="the-start-of-the-techstructive-blog"&gt;The start of the &lt;code&gt;Techstructive Blog&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Soon, on June 6th something stuck in my mind that I should write about how to use Vim for doing various things. So, the first idea was what currently I was learning in College i.e Python, I started writing about the Vim set up for python and I completed it within 2 hours. I published it on Hashnode and &lt;strong&gt;from there I never looked back. I started writing an article every 3-4 days&lt;/strong&gt;. That summed up for 3 months making 21 articles till September. I also made my personal open-source blog called &lt;a href="https://mr-destructive.github.io/techstructive-blog/"&gt;&lt;code&gt;Techstructive Blog&lt;/code&gt;&lt;/a&gt; using Jekyll and hosted it on GitHub pages. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631625512256/eyN6xO92G.png" /&gt;&lt;/p&gt;&lt;p&gt;I did experiments with a lot of blogging tools and frameworks like  &lt;a href="https://www.patricksoftwareblog.com/flask-tutorial/"&gt;Netlify with Flask&lt;/a&gt;,  &lt;a href="https://github.com/meeb/django-distill"&gt;Django distill&lt;/a&gt;,  &lt;a href="https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog"&gt;Gatsby Js&lt;/a&gt;, etc and finally landed on  &lt;a href="https://pages.github.com/"&gt;Github pages&lt;/a&gt;  with  &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;  as it is quite customizable and a lot easier to add certain components as well. &lt;/p&gt;&lt;h2 id="why-i-kept-going"&gt;Why I kept going?&lt;/h2&gt;&lt;p&gt;It's not hard to keep up with what you love to do. Even if you are not that interested in doing something, just having curiosity and consistency can turn any work into a skill. Here are the reasons why I love to keep going as a Technical writer ( some of them are from the Bootcamp session from @&lt;a href="@didicodes"&gt;Edidiong Asikpo&lt;/a&gt; and @&lt;a href="@quincy"&gt;Quincy Larson&lt;/a&gt; :) &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Over a span of 5-6 months I have learned a lot than I had in my past 2 years, I understood that I am writing for myself first and not only for other people. &lt;/li&gt;&lt;li&gt;It helps me in improving my online presence and clearly showcases my skills and interests. &lt;/li&gt;&lt;li&gt;Able to sum up ideas and document them well.&lt;/li&gt;&lt;li&gt;Maintain a record of learning for your future self.&lt;/li&gt;&lt;li&gt;Learning to get things done by writing articles consistently in an allotted time.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="how-i-kept-going"&gt;How I kept going?&lt;/h2&gt;&lt;p&gt;I am writing articles almost daily one for my blog and another day for GeeksforGeeks. I have a schedule and follow it almost punctually. I have never run out of ideas and motivation till now, every time I feel that there's no motivation in me, something or the other pops up just like this  &lt;a href="https://hashnode.com/bootcamp"&gt;Hashnode Bootcamp - The Art &amp;amp; business of Technical writing&lt;/a&gt;. Some youtube videos, Hackathon, Bootcamps, Project, conversations with friends just can impact in a constructive and a drastic way, they create a refreshed experience and allow you to clarify the doubt in yourself. Just you have to be open to ideas and feedback from other people and learn in harmony. &lt;/p&gt;&lt;h2 id="my-writing-workflow"&gt;My writing workflow&lt;/h2&gt;&lt;p&gt;This is really a neglected part when you ask a technical writer as it can really improve your productivity.  I use Hashnode and Vim both for writing out the markdown script. I like to write the subheadings or the content which I want to explain in that article. That really makes a bigger idea in a small chunk and I repeat the process until I feel that is the lowest abstracted way I can explain something. I record some screencasts in gifs on ScreenToGif recorder, MS Paint and Canva as an Image editor,  &lt;strong&gt;Hashnode makes uploading and accessing images, gifs so easy and it's quick too, really Hashnode is just flawless for a tech writer.&lt;/strong&gt; &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;That's been my story so far. I have grown from a noob coder to a somewhat confident nerd who can quickly write functional scripts, jump in Vim with more speed, and of course, teach someone something that can be helpful. It also is a way for me to relax and enjoy the process of programming. &lt;/p&gt;&lt;p&gt;Thanks a lot if you have been reading till here. &lt;strong&gt;Thank you Hashnode for providing such a great opportunity to create a side hustle here&lt;/strong&gt;. As always Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-static-files'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Static Files&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-plus-teminal'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Terminal Integration&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/technical-writer-journey</guid><pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Object-Oriented Programming in C++: Classes and Objects</title><link>https://mr-destructive.github.io/techstructive-blog/oop-cpp-p1</link><description>We all know that C++ is famously known for Object-Oriented Programming, but what is Object-Oriented Programming? Well, this is the article, where we will explor</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We all know that C++ is famously known for Object-Oriented Programming, but what is Object-Oriented Programming? Well, this is the article, where we will explore the basics of Object-Oriented Programming, its building blocks i.e Classes and Objects, and get familiar with its basic semantics in C++. Let's get into it straight away!&lt;/p&gt;&lt;h2 id="what-is-object-oriented-programming"&gt;What is Object-Oriented Programming?&lt;/h2&gt;&lt;p&gt;Object-Oriented Programming(OOP) is a way to structure and design a program or an application. Object-Oriented Programming deals with creating classes and objects and it's related terminologies. OOP helps in following the principles like DRY(Don't Repeat Yourself) and KISS(Keep it Simple Stupid). Using OOP certain applications and problems can be solved in a simple and efficient way. It helps in better understanding and readability of the code.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Virus is a class and COIVD-19 is an object of the Virus class XD&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In OOP we create a collection of the data and functionalities by organizing in a structure called &lt;code&gt;Class&lt;/code&gt;. We then instantiate or create the actual data by creating an &lt;code&gt;object&lt;/code&gt; of the particular class. Once we have created a class, we can simply create as many objects as we need to. Objects are basically the storage of the actual data in memory. Let's explore them in the next few sections.&lt;/p&gt;&lt;p&gt;NOTE: There are a lot of terminologies in OOP, just remember the basics of those terms and not the different names of those terms.&lt;/p&gt;&lt;h2 id="what-are-classes"&gt;What are Classes&lt;/h2&gt;&lt;p&gt;Classes are the structure or template of the data and its associated behavior. The data or the variables in the classes are called &lt;code&gt;properties&lt;/code&gt; or &lt;code&gt;attributes&lt;/code&gt;(also &lt;code&gt;data members&lt;/code&gt;). We also have functions that define the behavior of the properties or the data present in the class and are called &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A Class in C++ should be defined outside of the main function. In C++, &lt;code&gt;class&lt;/code&gt; is a reserved word and hence it is used to declare and define a class. It has a general structure like:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// properties and methods&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;It's a convention to use the initial letter of a Class Name Uppercased. We can define class methods outside the class body as well, we will see it in the next few parts of the series.  &lt;/p&gt;&lt;p&gt;Let's create a basic class in C++,&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here in the above code, we have a class called &lt;code&gt;Animal&lt;/code&gt; and it has 2 properties called &lt;code&gt;legs&lt;/code&gt; which is an int and &lt;code&gt;name&lt;/code&gt; a string. We also have a method called &lt;code&gt;print&lt;/code&gt; which displays the current object's name and the leg count. We will see what is the current object in the next section. &lt;/p&gt;&lt;p&gt;&lt;img alt="oopcpp1-class.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631797771422/6jCNpCYz_q.png" /&gt;&lt;/p&gt;&lt;p&gt;We use those properties or the variables defined in the class in our application either by accessing them through the objects or in the methods of that class. The variables or properties in classes are not assigned to any memory address i.e. they are just kind of a blueprint or placeholder tags to match for the data.&lt;/p&gt;&lt;h3 id="access-specifier"&gt;Access Specifier&lt;/h3&gt;&lt;p&gt;We have written &lt;code&gt;public&lt;/code&gt; before the definition of the properties of the class, it is an access modifier. Don't worry we will see it in detail in the next few parts of the series, just for time being understand that we can change whether we want the main function(or any function globally) to access the class' properties or not. &lt;/p&gt;&lt;p&gt;We are saying &lt;code&gt;public&lt;/code&gt; which means we can access the properties of this class anywhere outside the class. This is not a good practice but just for simplicity of understanding, we are using public. &lt;strong&gt;If you do not specify anything like &lt;code&gt;public&lt;/code&gt;, it is by default &lt;code&gt;private&lt;/code&gt;, which means the properties of the class are not accessed anywhere outside the class&lt;/strong&gt;. Let keep it simple right now.&lt;/p&gt;&lt;p&gt;We also have other concepts like defining the methods outside/inside the class, header files, constructors, destructors, and many others related to a class definition, we will cover it in the next few parts.&lt;/p&gt;&lt;h2 id="what-are-objects"&gt;What are Objects&lt;/h2&gt;&lt;p&gt;Now, we have created a class but where is the data actually? It will be in &lt;code&gt;objects&lt;/code&gt;, We actually assign the data or properties to a memory address by creating the objects of that particular class. &lt;/p&gt;&lt;p&gt;We can create objects of a particular class in C++ by writing the name of the class that this object will belong to and the name of the object,&lt;code&gt;classname objectname;&lt;/code&gt;. This will create or assign memory to the properties of the class to the object. &lt;/p&gt;&lt;p&gt;After the object has been created, we can assign the value to the properties of the class in the object. We can access the properties of the class by referencing the name of the object with &lt;code&gt;.&lt;/code&gt; and the name of the property or variable of the class, &lt;code&gt;objectname.propertyname&lt;/code&gt;, we can assign the value simply by using the assignment operator &lt;code&gt;=&lt;/code&gt; and give the properties the value, input from the user or however you like it.  &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// create an object of class Animal&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Floyd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// assign the class property to actual data in memory&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// call a method(function) associated to object&amp;#39;s class&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631795000896/kUvcfVU7Y.png" /&gt;&lt;/p&gt;&lt;p&gt;If Animal is the class, then the dog here is the object. As simple as you can think. We are technically &lt;strong&gt;instantiating an object&lt;/strong&gt; when we say &lt;code&gt;Animal dog&lt;/code&gt;.  We assign the variables the memory as defined in the class. We give some value to the properties using the &lt;code&gt;.&lt;/code&gt;(dot syntax), after the class name. &lt;/p&gt;&lt;p&gt;So &lt;code&gt;dog.legs = 4;&lt;/code&gt; will assign the value of 4 in the memory address of the object's property(dog is the class and legs is the property).&lt;/p&gt;&lt;p&gt;Similarly, we can call the function associated with the class as we do for properties but we use &lt;code&gt;()&lt;/code&gt; to indicate to calling the function.&lt;/p&gt;&lt;p&gt;&lt;img alt="oopcpp1-obj.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631799152681/UhNDYdEXK.png" /&gt;&lt;/p&gt;&lt;p&gt;So that is how we create objects in C++.&lt;/p&gt;&lt;h2 id="why-and-when-to-use-oop"&gt;Why and When to use OOP&lt;/h2&gt;&lt;p&gt;Object-Oriented programming makes quite complex problems and applications structure and scale quite easily and enhances the readability of the codebase. We can use OOP to create the applications for bigger and real-life applications, it allows us to add new features quite easily and thereby improving the maintaining ability.&lt;/p&gt;&lt;p&gt;The following might be the reasons to use OOP in an application:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If the application cannot be stated in a single sentence, you need to create the components into classes and hence use OOP.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It is quite easy to maintain OOP applications even if there are a lot of maintainers to the project.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If you see certain parts of the code repeating in many places, OOP is the way to go.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If you want your application to be secure in terms of data from the rest of the components, OOP is again a great option as you can use Encapsulation to the advantage.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, we have studied the concept of Object-Oriented Programming and how to define classes and create objects in C++. There are a lot of concepts in OOP to grab up in the next few parts of the series, but this should build the foundation of OOP as a paradigm or a way of thinking when it comes to problem-solving and programming.&lt;/p&gt;&lt;p&gt;I hope you have got a good introduction to the basics of Object-Oriented Programming and its semantics in C++. Thank you for reading. In the next part, we will explore the Access Modifiers/Specifiers in the Classes. Until then Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-buffers'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Buffers&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/bash-guide-p1'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;BASH Scripting Guide - PART - 1&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/oop-cpp-p1</guid><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Object-Oriented Programming in C++: Access Modifiers</title><link>https://mr-destructive.github.io/techstructive-blog/oop-cpp-p2</link><description>Moving on to Part 2 of Object-Oriented Programming in C++, we will look into the concept of access modifiers which we skipped in the first section. This won In </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Moving on to Part 2 of Object-Oriented Programming in C++, we will look into the concept of access modifiers which we skipped in the first section. This won't be a comprehensive guide on access modifiers as it requires some other concepts like &lt;code&gt;Inheritance&lt;/code&gt; which we will introduce in the next few sections. This series will be like connecting the pieces of OOP together and building a good foundation.  &lt;/p&gt;&lt;p&gt;In this part, we will discuss the access modifiers and their related concepts. The below is a gist of what will be covered in this part. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Understanding Access Modifiers&lt;/li&gt;&lt;li&gt;Type of Access Modifiers&lt;ol&gt;&lt;li&gt;Private&lt;ul&gt;&lt;li&gt;Getters &lt;/li&gt;&lt;li&gt;Setters&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Public&lt;/li&gt;&lt;li&gt;Protected&lt;ul&gt;&lt;li&gt;Introduction to Derived and Friend classes&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Without wasting any time, let's roll in.&lt;/p&gt;&lt;h2 id="what-are-access-modifiers"&gt;What are Access Modifiers&lt;/h2&gt;&lt;p&gt;Access Modifiers as the name suggests they are used to change the accessibility of properties and methods in a Class. That means if we want a certain scope of our code to access the class members we can specify that using &lt;code&gt;access modifiers&lt;/code&gt;. Access Modifiers form the basics or the pillar for &lt;code&gt;Data Encapsulation&lt;/code&gt; in OOP.&lt;/p&gt;&lt;h3 id="data-encapsulation"&gt;Data Encapsulation&lt;/h3&gt;&lt;p&gt;Data Encapsulation is terminology in OOP to keep all the components in a single entity or unit. Here the components are &lt;code&gt;properties&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt; and they are contained in a single unit called &lt;code&gt;Class&lt;/code&gt;.  We need to carefully use the class members i.e. properties and methods in order to avoid security and limiting certain members to be available for a specific scope or block of code.&lt;/p&gt;&lt;p&gt;Hence, the Encapsulation of class members helps in structuring the class in a secure and allows access in a particular expected way. &lt;/p&gt;&lt;h2 id="types-of-access-modifiers-in-c"&gt;Types of Access Modifiers in C++&lt;/h2&gt;&lt;p&gt;We do have certain modifiers or limiters for accessing class members in C++. We can either keep the class members limited to the class itself (and friend class), keep them open to the global scope, or restrict them to certain classes only(derived and friend classes). &lt;/p&gt;&lt;p&gt;Let's discuss them one by one.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="private"&gt;Private&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This access modifier allows us to access the class members only to the class methods and the friend functions and classes. We will discuss what friend classes are in the next few parts of the series. This restricts the usage of the class members directly from the main function or other scopes in our program. You can use &lt;code&gt;private:&lt;/code&gt; to indicate the below declared properties and methods are private to the class. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;//other properties and methods&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OR (don't specify anything it &lt;strong&gt;is private by default&lt;/strong&gt;)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//other properties and methods&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is assigned to every member of the class by default. So that is why we explicitly told to make it public in an example in the previous part of the series. Let's see what happens if we do not make it public. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Floyd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631940306089/l4zOKB-RY.png" /&gt;&lt;/p&gt;&lt;p&gt;You can see we cannot directly use those properties and methods which are set as private. It is a convention to keep properties private and create public methods to access those from the rest of the program. The public methods used to access and modify the value of the private properties are called &lt;code&gt;getters&lt;/code&gt; and &lt;code&gt;setters&lt;/code&gt; respectively.&lt;/p&gt;&lt;h4 id="getters"&gt;Getters&lt;/h4&gt;&lt;p&gt;Getters are the public methods of a class that are used to access a value to the private properties of that class. It is a function that returns the data of that particular property. We access the function as normally as we access the public functions.&lt;/p&gt;&lt;p&gt;We define the getter function as:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;datatype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;getpropertyname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;propertyname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can access the getter function as a normal public function, but this function returns a value, so we can store it in a variable and do all sorts of things.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;court&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpropertyname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="setters"&gt;Setters&lt;/h4&gt;&lt;p&gt;Setters are the public methods of a class that are used to assign/modify the value of the private properties of that class. It is a function that simply assigns the private properties to data of the data which is passed in as an argument to the function. We access the function as normally as we access the public functions. We have to pass in the value to assign the property to the function.&lt;/p&gt;&lt;p&gt;We define the setter function as:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;datatype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setpropertyname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datatype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;propertyname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can access the setter function as a normal public function, but this function takes in a parameter, so need to pass in the value to assign it the same as the correspondent data type of that property.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;objname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setpropertyname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, after applying the getter and setter concept to our example, we can use them and make the properties private without any issues.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// take in a parameter of type same as of the property &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dogname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dogname&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// assign the property a value same as of the parameter       &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// return type should be same as of the property &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setleg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;noflegs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;noflegs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getleg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Flyod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setleg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getleg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631949135706/zVd5cMPKa.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631956955383/MKp5YDMv5.png" /&gt;&lt;/p&gt;&lt;p&gt;The above code runs successfully, and hence we make our program more secure and provide limited access to the rest of the components. You can see how we have passed the data as the parameter to the setter function, it should be the appropriate data-type with the property you are trying to set and also the same return type for the getter function.&lt;/p&gt;&lt;p&gt;The code is also much readable and structured for others to read and understand. It might seem a silly thing but it really improves the maintainability in the longer run. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="public"&gt;Public&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This might be familiar till now, we have been using this access modifier till now and it is quite straightforward to understand. We have created the getter and setter function using this access modifier.&lt;/p&gt;&lt;p&gt;So, the &lt;code&gt;public&lt;/code&gt; access modifier makes the class members be accessible anywhere in the program. This might be OK for many small applications but it is not ideal to use them for production-level applications as it might cause undesired consequences i.e. BUGS.&lt;/p&gt;&lt;p&gt;We need to explicitly write public in the class definition, as &lt;code&gt;private&lt;/code&gt; is set by default. So, as a simple example, as we saw in the previous part, it can be a lot easier to go with the public to understand OOP but the main OOP really shines in aspects like Encapsulation and Inheritance of Classes, which we will surely see in the upcoming parts.&lt;/p&gt;&lt;p&gt;This is the example from the previous part:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// create an object of class Animal&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Floyd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// assign the class property to actual data in memory&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;// call a method(function) associated to object&amp;#39;s class&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="public-class" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631795000896/kUvcfVU7Y.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631958067712/yU8uvd5KQ.png" /&gt;&lt;/p&gt;&lt;p&gt;As explained earlier, it is accessible to the main function or other scopes as well. We can access them using the dot separator(&lt;code&gt;.&lt;/code&gt;) to assign it or to call the method.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;h3 id="protected"&gt;Protected&lt;/h3&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This is quite a handy access modifier, as it allows us to have the flexibility to keep the class members private and accessible to its derived or friend class. We will see the derived and friend classes in the next few parts. But for now, let's understand in an abstracted way.&lt;/p&gt;&lt;h4 id="derived-classchild-class-sub-class"&gt;Derived Class(Child Class/ Sub Class)&lt;/h4&gt;&lt;p&gt;This is a concept in Inheritance, i.e. to pass the members of a class to another. So, there has to be two classes, the main(parent class) and another class that will inherit or take in the members from the parent class. So, the derived class has access to its public and protected members only.&lt;/p&gt;&lt;h4 id="friend-class"&gt;Friend class&lt;/h4&gt;&lt;p&gt;A friend class is a class that is allowed to access its &lt;strong&gt;private&lt;/strong&gt; and protected properties or methods. It is kind of a special tag assigned to a class that it can access certain class' members. We will see it in detail afterward, right now, it's enough to understand, friend class is a class that can access a particular class' members may it be private or protected. &lt;/p&gt;&lt;p&gt;The difference between a friend and a derived class is that a friend class can access the private members of the class to which it is a friend, but a derived class can't. Friend class also can't be inherited. Again, we will see this is in detail. &lt;/p&gt;&lt;p&gt;So, it doesn't make sense for me to explain protected here. But just assume friend classes and derived classes are a thing.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Floyd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631956345308/epOckpl6X.png" /&gt;&lt;/p&gt;&lt;p&gt;This gives an error as protected members can be accessed only by derived or friend classes since we are accessing it from the main function, it's not allowed in the global scope. We can only access the protected members from the derived or friend classes. &lt;/p&gt;&lt;p&gt;So, let's derive a class from the base class(Animal), and after that, we can see protected members in action.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Floyd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; is a &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631956708698/HJTOZN9sw.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631956815750/a2y5QLiPT.png" /&gt;&lt;/p&gt;&lt;p&gt;We have accessed the protected property &lt;code&gt;name&lt;/code&gt; in the derived class &lt;code&gt;Pet&lt;/code&gt;. Yes, this is how we derive a class in C++, &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// A child class serived from base class&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;NewClassName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BaseClassName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// properties and methods&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;So, after deriving the &lt;code&gt;Pet&lt;/code&gt; class from &lt;code&gt;Animal&lt;/code&gt; class, we have access to its public and protected class as well. We simply assigned one of the protected members from its base class i.e. &lt;code&gt;name&lt;/code&gt; and used it in the function &lt;code&gt;print&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;This is how you can use protected members in a derived class, also you can do it in friend class, but we will look at that in a separate part. Remember you can &lt;strong&gt;use getters and setters as well to assign and access those protected members&lt;/strong&gt;.  Keeping it simple and easy to understand is what a protected access modifier can provide. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Protected access modifiers are quite great and provide much more flexibility than &lt;code&gt;private&lt;/code&gt; and more privacy than &lt;code&gt;public&lt;/code&gt; access modifiers.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="which-to-use-when"&gt;Which to use when?&lt;/h2&gt;&lt;p&gt;It is often a good practice to use private members, but it might be not possible to make everything private, so we can use certain properties as private, some methods as public and protected as well as per requirement and complexity. &lt;/p&gt;&lt;p&gt;&lt;img alt="acmod.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1631953460021/_4WlLGDI_.png" /&gt;&lt;/p&gt;&lt;p&gt;Looking at the above chart, you can analyze your problem and work a way around to find the perfect secure match for your application. &lt;/p&gt;&lt;p&gt;Remember to use public members only when you have to explicitly use through the program. If you find that, this member shouldn't be introduced in certain scope then use make it private or protected.&lt;/p&gt;&lt;p&gt;If there is some kind of hierarchy in the program and its components, analyze and make a structure of it to have a better understanding of the program flow.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part, we were able to understand the access modifiers and got somewhat of a dive into Inheritance. There were some concepts like Friend and Derived classes, Inheritance, Encapsulation which were just explained in short, but they are a topic that deserves separate attention. We'll discuss them in the upcoming parts.&lt;/p&gt;&lt;p&gt;Thanks for reading. Hope you understood the concepts in a better way. Until then, as always, Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-folder-struct'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Folder Structure&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-math'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Math Package&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/oop-cpp-p2</guid><pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate></item><item><title>What's in Techstructive Blog</title><link>https://mr-destructive.github.io/techstructive-blog/techstructive-blog-init</link><description>Techstructive Blog is my personal blog hosted on GitHub pages as well as on   Firstly thanks to Hashnode for providing a free platform for developers to share t</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Hello World!&lt;/strong&gt; This is an article in which I'll introduce why Techstructive Blog exists and what it covers in brief. This is just a casual introduction to my blogging niche. P.S. It's not any technical blog but has challenged me enough to write and complete it.  &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Techstructive Blog is my personal blog hosted on GitHub pages as well as on  &lt;a href="https://techstructiveblog.hashnode.dev/"&gt;Hashnode&lt;/a&gt;. It first started on Hashnode and soon created my own using Jekyll on GitHub pages. On this blog, I write articles mainly Vim, BASH, and some programming languages and tools. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Firstly thanks to Hashnode for providing a free platform for developers to share their journey to the world. I am happy that I have found such a gold mine of a supportive and growing community of developers that help find and inspire each other's way.&lt;/p&gt;&lt;h2 id="what-techstructive-blog-covers"&gt;What Techstructive Blog covers?&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Vim + Linux + Random Stuff&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Techstructive Blog started around 20th February 2021, where I first found  Hashnode. There I wrote my first article in my technical writing journey. The article was about &lt;code&gt;Vim&lt;/code&gt;. It covered some quite basic stuff on how to get started in Vim. After few months I really found the need to blog about my learnings as I felt more confident about my skills after writing 10-12 articles on the  &lt;a href="https://auth.geeksforgeeks.org/user/meetgor/articles"&gt;GeeksforGeeks portal&lt;/a&gt;. I again started writing articles about Vim and BASH as well. &lt;/p&gt;&lt;p&gt;Fast forward today,  &lt;a href="https://techstructiveblog.hashnode.dev/"&gt;Techstructive Blog&lt;/a&gt;  has 26 articles on it, 14 being about Vim and 8 being about BASH. That is the niche of Techstructive Blog revolving around GNU\Linux and its applications. I also talk about Django and C++ as they are technologies I love to work with and create some personal projects with them.  &lt;/p&gt;&lt;h2 id="rambling-about-vim"&gt;Rambling about Vim&lt;/h2&gt;&lt;p&gt;I don't know it might feel to the readers like I am rambling and boasting about how much I know about Vim, but I honestly love and adore the text editor as it is so customizable and wicked fast. I just write about what might be helpful and important to others as a setup or just editing in Vim. I personally use Vim every day so I feel more confident and excited to write about it. I feel it's just the start of Vim for me, I can go on writing articles about Vim that will be helpful for someone or the other. I have 7 articles already planned up for Vim, I just need to finish off certain pending tasks and projects first. &lt;/p&gt;&lt;p&gt;I am gonna primarily focus on how to use Vim for various languages or frameworks. This also applies to using Vim in different environments and improving the workflow of daily usage. Also notice that all my Vim articles are short and simple. They just cover the topics as mentioned in the title, because I don't feel like spitting everything in one article that no one can understand and connect topics together. Instead, I break topics into series, just like the Vim:  &lt;a href="https://techstructiveblog.hashnode.dev/vim-tabs"&gt;Tabs&lt;/a&gt;, &lt;a href="https://techstructiveblog.hashnode.dev/vim-window-splits"&gt; Window Splits&lt;/a&gt;, and  &lt;a href="https://techstructiveblog.hashnode.dev/vim-buffers"&gt;Buffers&lt;/a&gt;  articles. &lt;/p&gt;&lt;p&gt;I plan ahead as more and more articles about Vim and maybe some weekly newsletter of Vim tricks and commands. That's some exaggerated thing but I have decent skills to tackle that. Who knows what the future holds? but it's important to plan your way.&lt;/p&gt;&lt;h2 id="linux"&gt;Linux&lt;/h2&gt;&lt;p&gt;Well, I technically don't have any articles about &lt;code&gt;Linux&lt;/code&gt; but I have a lot of things to share about it. I have a series to be written about it with a minimum of 10 articles in it. But I am not able to start my way off in search of a perfect time. Though I have some BASH articles and a  &lt;a href="https://techstructiveblog.hashnode.dev/series/bash-scripting"&gt;series&lt;/a&gt;  about scripting already. I have always preferred to use Linux even if I use Windows 7 daily, I have a virtual machine to satisfy some of my needs and curiosity. That's aside I have used Termux which is a terminal emulator for Android, I have literally spent the Lockdown, coding on it all the months and weeks. &lt;/p&gt;&lt;p&gt;I feel to talk about the need to use Linux and how it has revolutionized programming and development around the world. This is really a biased topic because people who use certain OS are gonna keep using it but I hope that they would get some insights at least from those articles.&lt;/p&gt;&lt;h2 id="web-development"&gt;Web development&lt;/h2&gt;&lt;p&gt;I have created several projects/websites using Vanilla Javascript and Django, so I can pretty much talk about the things which I've learned and the mistakes that have made. I have a good grasp on Django now so I feel much confident to write series about it, just covering the concepts and the terminologies in which I faced challenges in getting through.&lt;/p&gt;&lt;h2 id="general-programming"&gt;General Programming&lt;/h2&gt;&lt;p&gt;Well, I can't lie but I feel too excited when it comes to learning new things and I genuinely learn them until I create something from it, may it be C/C++, Python. Django, Javascript, BASH, or other tools or frameworks. I am not limiting myself to any language or topic, but ya I can proficiently write about one and slowly gather around others as well. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Jack of all trades, master of none.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That might be a good quote applicable to me but I believe in  &lt;a href="https://appunite.com/blog/become-a-pi-shaped-developer"&gt;PI-Shaped Learning&lt;/a&gt;. PI-Shaped learning emphasizes broadening the knowledge in all domains but having expertise in one. Like I can talk about Web development, Android development, DevOps but I will be majorly inclined towards one and have a deep knowledge of ins and outs of that domain. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Phew! That took a while to finish. But hey! Thanks a lot for reading till here. I hope you got my thoughts about the scope of this blog. I owe to continue this blogging journey in the future and improve my as well as the reader's skills and experience.&lt;/p&gt;&lt;p&gt;Well, until then HAPPY CODING :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-plus-teminal'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Terminal Integration&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-maps'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Maps&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/techstructive-blog-init</guid><pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Object-Oriented Programming in C++: Constructors</title><link>https://mr-destructive.github.io/techstructive-blog/oop-cpp-p3</link><description>After learning a bit about classes, objects, and access modifiers, we can move on to another important concept of Constructors and Destructors. This part will c</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;After learning a bit about classes, objects, and access modifiers, we can move on to another important concept of Constructors and Destructors. This part will cover Constructors. We'll explore what are constructors, why we need them, types of constructors, and their semantics in C++ as usual. &lt;/p&gt;&lt;p&gt;So without wasting any time, let's get started.&lt;/p&gt;&lt;h2 id="what-is-a-constructor"&gt;What is a constructor&lt;/h2&gt;&lt;p&gt;A constructor is a method just like another method in a class, but it has a special name for a reason. The name itself speaks, &lt;code&gt;Constructor&lt;/code&gt;, which will get called just after the object gets created.  A constructor is just a method but it should only have the name same as of the class, that's the thing that distinguishes it from other methods. &lt;/p&gt;&lt;p&gt;The main thing that stands out for a constructor is that you don't have to call it. It gets called automatically (just magically), yes you don't have to call it explicitly. That's a great feature in Object-Oriented Programming. We can control the flow of the program according to our needs. &lt;/p&gt;&lt;p&gt;A constructor has certain features or principle that makes it different from the rest of the class methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;There is no return type for a constructor.&lt;/li&gt;&lt;li&gt;The name of the constructor should be the same as the class name.&lt;/li&gt;&lt;li&gt;There can be multiple constructors for a class (depending on the parameters passed to it).&lt;/li&gt;&lt;li&gt;A constructor gets called automatically when an object is instantiated (created).&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="why-do-we-need-a-constructor"&gt;Why do we need a constructor?&lt;/h2&gt;&lt;p&gt;Let's suppose you wanted to initialize some variables (properties) before the main loop of a program starts or initiates. This can be done manually by accessing them in the mail function but for many objects, this can get really boring to write every time. This is where the constructor comes in and just improves the overflow structure and manageability of the program.&lt;/p&gt;&lt;p&gt;&lt;img alt="oopcpp2-const.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632390379922/V2avlZhzP.png" /&gt;&lt;/p&gt;&lt;p&gt;This looks silly but is actually used a lot just beyond initialization, you might want certain things to be done as soon as the object gets created. All ideas and flow of the program in a particular desired manner are all possible due to constructors. It is also a way of automating several repetitive tasks for better design and maintaining the codebase. &lt;/p&gt;&lt;h2 id="define-a-constructor-for-a-class-in-c"&gt;Define a constructor for a class in C++&lt;/h2&gt;&lt;p&gt;Now, it's time to get into code, and let's see how to define a constructor in a class using C++.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;iostream&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;blog&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// defining a constructor for the blog class&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Call from constructor&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632392596021/MY5H0maqx.png" /&gt;This is how you define a class in C++. A constructor doesn't even have a return type of void, literally, it doesn't return anything.  A Constructor can do anything another normal method can do except to return anything. We can also pass certain parameters to it as well. &lt;/p&gt;&lt;p&gt;The thing here is that, the constructor should be public if you want to call it from the main function or anywhere else outside the class(class itself / friend class / derived class). You can make it private or protected as per your needs and the hierarchy of your application. If you want to know more about those access modifiers(public/private/protected), you can check the previous part of this series.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Remember, you cannot call the constructor from the main function if it is not public.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We can actually create some good examples where the constructor plays a vital role in the design and the feasibility of the actual idea.&lt;/p&gt;&lt;p&gt;Let's say we want to create three objects, each taking the same input of properties from the user but the value will be different as obvious and also determine another property based on an input. Should we write those inputs for every object or write a function for the same. The latter will be the best choice, but which function are you thinking of? If that's a constructor then you are correct! Ya we can even write a normal method but we have a print function called up already, that might create some undesired behavior like unreferenced variables and segmentation fault while dealing with complex data structures or large applications.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;iostream&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Who is the Animal? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the name of Animal? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;monkey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;s name is &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632396836336/b6NLE-8287.png" /&gt;&lt;/p&gt;&lt;p&gt;We can see how well this can scale for creating many objects. This is just one of the examples where the constructor just single-handedly takes care of many things.  We can always create an array of objects but to keep things simple here, we have hardcoded the object names. &lt;/p&gt;&lt;h2 id="types-of-constructors"&gt;Types of Constructors&lt;/h2&gt;&lt;p&gt;Well, won't it be nice to pass the values to the constructor and then do certain computations? There is a solution to that, we can overload functions i.e we can create multiple constructors each having a unique combination of parameters associated with it. &lt;/p&gt;&lt;p&gt;The following are the types of constructors:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Default Constructors&lt;/li&gt;&lt;li&gt;Copy Constructors&lt;/li&gt;&lt;li&gt;Parameterized Constructor&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="default-constructor"&gt;Default Constructor&lt;/h3&gt;&lt;p&gt;This is the constructor which we have used so far, even if we don't define a constructor, the C++ compiler automatically creates one which does nothing. &lt;/p&gt;&lt;p&gt;We have already seen the normal constructors without any parameters, just a simple function that does some I/O to the console. &lt;/p&gt;&lt;h3 id="copy-constructor"&gt;Copy Constructor&lt;/h3&gt;&lt;p&gt;This is a great feature of constructors, you can copy certain properties of previously created objects or define new ones and pass them to the constructor. This is why I said we can have multiple constructors depending on the number of parameters or the type of parameters passes to it. &lt;/p&gt;&lt;p&gt;So, with that said, we can basically define constructors for different purposes with different requirements and conditions. This just opens up a new dimension of creating complex functions and programs with great flexibility and adaptivity. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;iostream&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Who is the Animal? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the name of Animal? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;monkey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// copy constructor with reference of an object of the same class&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is my pet &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;s name is &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632403268364/cfjwyvgUeN.png" /&gt;&lt;/p&gt;&lt;p&gt;In the above example, we have defined another constructor that accepts a parameter that is a reference to another created object and basically does some I/O operations. &lt;/p&gt;&lt;p&gt;Why would we need this?&lt;/p&gt;&lt;p&gt;Well, the name itself says it all. &lt;code&gt;To copy the values of existing objects&lt;/code&gt; with slight or minor modifications. It basically depends on how you want to copy the object into another. This can also be applied to additional class properties and just change the copy constructor and there it is, big tasks performed with minimal changes. We can also be used to modify the existing objects (though it can get a security issue, still pretty cool) by accessing the properties of that object in the copy constructor. &lt;/p&gt;&lt;h3 id="parameterized-constructor"&gt;Parameterized Constructor&lt;/h3&gt;&lt;p&gt;Now, we know that we can pass parameters to our constructors, let's exploit that functionality to create all sorts of constructors. No, I'm just kidding, you can create multiple constructors by passing in various combinations of parameters to it.&lt;/p&gt;&lt;p&gt;Let's take an example, instead of taking input from the default constructor we can pass in the values while creating the object, and the constructor which matches the parameters gets called. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;iostream&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// default constructor&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Who is the Animal? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the name of Animal? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;monkey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// constructor with two parameters (both String)&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is my pet &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// constructor with one parameter(String)&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;s name is &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; has &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; legs.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scooby&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pomello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632402898960/mc1D2S_iQ.png" /&gt;&lt;/p&gt;&lt;p&gt;We created the first object without any specification but the second object was passed with two parameters and we indeed called the correct constructor. The third object was just given a single parameter and again called the required constructor. &lt;/p&gt;&lt;p&gt;So, we can see that a particular constructor is called which matches the parameters passed to it. That's quite an intelligent and smart design. This just improves the overall diversity and adaptability hand in hand. &lt;/p&gt;&lt;h4 id="functionconstructor-overloading"&gt;Function/Constructor Overloading&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;When a single function(same name) has different implementations depending on the parameters passed to it is called Function overloading.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The thing above i.e Parameterized Constructors is technically called Function Overloading (Constructor in this case). We will look into this topic in much detail when we cover more on methods. But this might be enough to get your head around the concept of overloading in OOP. &lt;/p&gt;&lt;p&gt;Let's say we have a function that takes two parameters by default but also can take three parameters when given. We can process them by having a different implementation. This creates a lot of freedom and broadens the scope of customization in complex applications. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;iostream&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; is &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; years old.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Brock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632404708549/4h1izLpdS.png" /&gt;&lt;/p&gt;&lt;p&gt;In this example, we have a single function &lt;code&gt;intro&lt;/code&gt; but it has two implementations, one has a two-parameter and the other has just one. This is called Function Overloading. We just applied this in the functions in classes called constructors but the concept is the same. We'll dive into Overloading in the next few sections. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;That is it from this part. We'll see &lt;code&gt;Destructors&lt;/code&gt; in the next one. From this part, we learnt about constructors and how important they are in creating the desired flow to our application.  We also touched on the types of constructors and function overloading a bit, which are also important aspects of OOP. That's it from this one.&lt;/p&gt;&lt;p&gt;Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-crud-api'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: CRUD API&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-admin'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Admin Section&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/oop-cpp-p3</guid><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Django + Auth0 Quick Setup</title><link>https://mr-destructive.github.io/techstructive-blog/djagno-auth0-script</link><description>This is a guide and a walkthrough of how to quickly set up a base Django project with Auth0 as integration for authentication and authorization. I will walk you</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is a guide and a walkthrough of how to quickly set up a base Django project with Auth0 as integration for authentication and authorization. I will walk you through the Django setup and how to use and integrate the functionalities of the Auth0.  I will also discuss how why you should be using Auth0 and why I love it.&lt;/p&gt;&lt;p&gt;The script takes &lt;code&gt;2:44&lt;/code&gt; minutes time to do everything from scratch. From installing virtualenv in python to integrating the Auth0 application. &lt;/p&gt;&lt;p&gt;Here's how the script works:&lt;/p&gt;&lt;p&gt;&lt;img alt="authodj.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632830813802/MOvedPYdt.gif" /&gt;&lt;/p&gt;&lt;h3 id="contents"&gt;Contents&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="#what-is-auth0"&gt;What is Auth0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#why-i-love-auth0"&gt;Why I love Auth0&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#set-up-a-django-project"&gt;Set up a Django Project&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#integrate-auth0-to-a-django-project"&gt;Integrate Auth0 to a Django project&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#creating-a-bash-script-for-integrating-auth0"&gt;Creating a BASH Script for integrating Auth0&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="#appending-to-a-file"&gt;Appending to a file&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#adding-text-before-a-particular-line-using-sed"&gt;Adding text before a particular line using &lt;code&gt;sed&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#appending-to-a-line-using-sed"&gt;Appending to a line using &lt;code&gt;sed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#complete-bash-script"&gt;Complete BASH Script&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="what-is-auth0"&gt;What is Auth0&lt;/h2&gt;&lt;p&gt;Auth0 (&lt;code&gt;Auth zero&lt;/code&gt;) is a platform that provides easy authentication and authorization for a number of platforms in various programming languages and frameworks. The easy-to-follow documentation, availability for almost all web frameworks across platforms make it a big bonus for developers. They actually make the Developer experience flawless and beginner-friendly. &lt;/p&gt;&lt;p&gt;According to Auth0,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;They make your login box awesome&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And how true is that they make things pretty convenient and wicked fast to integrate a smooth functional backend for authentication and authorization. Of course, there are more things they offer than just making authentication systems but it is by far what the world knows them for.&lt;/p&gt;&lt;h2 id="why-i-love-auth0"&gt;Why I love Auth0&lt;/h2&gt;&lt;p&gt;Auth0 is a generous company that provides a free tier for a limited capacity of authentication and that might be more than enough for a developer getting its feet wet in the web development (backend). &lt;/p&gt;&lt;p&gt;They even provide a nice user interface out of the box for login/signup and even a dashboard ready-made, which is quite a lot of heavy lifting already done for you. Also, there is a dashboard for analyzing the number of sign-in/logins into the particular app. This provides the admin/developer of the app to get a closer look at the user registered in a day/week/months, number of active users, and so on. &lt;/p&gt;&lt;p&gt;So, who would not love it? I am willing to write and use their service for some of my projects. I already have used one for the Hashnode x Auth0 Hackathon, I made &lt;a href="https://github.com/Mr-Destructive/devquotes"&gt;devquotes&lt;/a&gt; using the authentication of Auth0 in my Django application. &lt;/p&gt;&lt;h2 id="set-up-a-django-project"&gt;Set up a Django Project&lt;/h2&gt;&lt;p&gt;If you are reading this you already know how to set up a Django project, I assume. But nevertheless, I can just include a quick introduction on how to do it. I have a script to do this. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;mkdir &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;pip install virtualenvvirtualenv env&lt;span class="nb"&gt;source&lt;/span&gt; env&lt;span class="se"&gt;\b&lt;/span&gt;in&lt;span class="se"&gt;\a&lt;/span&gt;ctivatepip install djangodjango-admin startproject &lt;span class="nv"&gt;$1&lt;/span&gt; .clear&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;You can check out  &lt;a href="https://techstructiveblog.hashnode.dev/django-quick-setup-script"&gt;Django Quick Setup Script&lt;/a&gt;  for the details of this script and also a more in-depth guide of Django project setup.&lt;/p&gt;&lt;p&gt;But if you want to understand the basics of the Django project setup here is a little guide about it:&lt;/p&gt;&lt;p&gt;Firstly, create a virtual environment, it's not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;You can use &lt;code&gt;pip3&lt;/code&gt; or &lt;code&gt;pip -m&lt;/code&gt;, or however you install normal python modules. This just installs the python virtual environment, we need to create one in the current folder, so for that navigate to the folder where you want to create the project and enter the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv venv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, &lt;code&gt;venv&lt;/code&gt; can be anything like &lt;code&gt;env&lt;/code&gt; just for your understanding and simplicity it's a standard name kept for the same. After this, you will see a folder of the same name i.e. &lt;code&gt;venv&lt;/code&gt; or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. Now, we need to activate the virtual environment, for that we can use the command :&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# for Linux/macOS :&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# for Windows:venv\Scripts\activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;After this, your command prompt will have a &lt;code&gt;(venv)&lt;/code&gt; attached to its start. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&lt;/p&gt;&lt;p&gt;After the virtual environment is set up and activated, you can install Django and get started with it. Firstly, install Django using pip:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install django&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;After the installation is completed, you can start a Django project in the current folder using the command: &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;django-admin startproject name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here name can be your project name. After this, you will see one new folder and one file pop up.Namely, the &lt;code&gt;project named&lt;/code&gt; folder and &lt;code&gt;manage.py&lt;/code&gt; file. So you don't have to touch the &lt;code&gt;manage.py&lt;/code&gt; file but we use it in most of the commands to use the Django functionalities. &lt;/p&gt;&lt;p&gt;You can now run your basic server using the command : &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;There is a base installed/setup of the Django project. Moving on in integrating the Auth0 login functionality in our webpage.&lt;/p&gt;&lt;h2 id="integrate-the-auth0-app-in-your-project"&gt;Integrate the Auth0 app in your project&lt;/h2&gt;&lt;p&gt;So, for integrating the Auth0 app for your web application, you need to have an Auth0 account, you can signup here. After this you can create an Auth0 application for any type of application, we have a couple of options:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Native Application&lt;/li&gt;&lt;li&gt;Single Page Application&lt;/li&gt;&lt;li&gt;Regular Web Application&lt;/li&gt;&lt;li&gt;Machine to Machine Application&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632748408741/sUeS8AgrX.png" /&gt;&lt;/p&gt;&lt;p&gt;You can choose as per your needs, but mostly it would be a Regular Web application if you have a backend like Django, Nodejs, PHP, or other types of frameworks and languages. So, moving ahead we have created an application for the Django framework as a backend. Now, we have a &lt;code&gt;Settings&lt;/code&gt; tab in the application dashboard, where we have different credentials for the Auth0 app to talk to our application.&lt;/p&gt;&lt;p&gt;The credentials needed to be stored safely are:- domain- Client ID (Key)- Client Secret&lt;/p&gt;&lt;p&gt;This has to be secured for our local application which will go into production when ready. You can use several options like dotenv, environment variables, and so on when the application is being deployed but for now, let's hardcode them in our Django project. &lt;/p&gt;&lt;p&gt;Now, you can follow the simple straightforward procedure to copy-paste your credentials from the  &lt;a href="https://auth0.com/docs/quickstart/webapp/django/01-login#logout"&gt;Auth0 official documentation&lt;/a&gt;. It's quite straightforward to follow the steps even for a beginner. &lt;/p&gt;&lt;p&gt;After the Auth0 app has been configured following the procedure in the documentation, you need to integrate several files like dashboard and index templates into your custom templates.&lt;/p&gt;&lt;p&gt;Following additional changes are also to be made if you have a user-defined app for your Django project.&lt;/p&gt;&lt;p&gt;In the &lt;code&gt;auth0login&lt;/code&gt; app, &lt;code&gt;view.py&lt;/code&gt; file:1. The &lt;code&gt;index&lt;/code&gt; function renders the base file for your project if the user is logged in.2. The &lt;code&gt;dashboard&lt;/code&gt; function renders the baked version of your profile/dashboard of users on your app.&lt;/p&gt;&lt;p&gt;You would also need to add the root URIs of your app that you will be using for testing or in production. For example, we can add &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt; to allow and use Auth0 in our development environment locally.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632828981455/2gc4h7tTh.png" /&gt;&lt;/p&gt;&lt;p&gt;You also need to specify the callback URLs for your application which is &lt;code&gt;/complete/auth0&lt;/code&gt; by default.&lt;/p&gt;&lt;h2 id="creating-a-bash-script-for-integrating-auth0"&gt;Creating a BASH Script for integrating Auth0&lt;/h2&gt;&lt;p&gt;So, we can now dive into creating the BASH Script to set up the Django x Auth0 application in minutes. The script is quite large, like 200 lines but don't worry! Its automation reduces the pain of integrating a User Authorization flawlessly. I am also thinking of adding the &lt;code&gt;cURL&lt;/code&gt; command and parsing in the Client ids, keys, and secret keys, etc. &lt;/p&gt;&lt;h3 id="appending-to-a-file"&gt;Appending to a file&lt;/h3&gt;&lt;p&gt;We can use the &lt;code&gt;cat&lt;/code&gt; command to append text to a file, using the syntax as below:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; filename&lt;/span&gt;&lt;span class="s"&gt;text&lt;/span&gt;&lt;span class="s"&gt;more text&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Remember here EOF is just a label to stop the command and save it to the file. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632826339707/_g_RXP3NE.png" /&gt;&lt;/p&gt;&lt;p&gt;So, we can see that we were able to append to a file, multiple lines using the cat command.  &lt;/p&gt;&lt;p&gt;We have used this concept in adding configuration and credentials to the &lt;code&gt;settings.py&lt;/code&gt; or the &lt;code&gt;urls.py&lt;/code&gt; files.&lt;/p&gt;&lt;h3 id="adding-text-before-a-particular-line-using-sed"&gt;Adding text before a particular line using &lt;code&gt;sed&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sed&lt;/code&gt; is a great command, and there is nothing you can't do with it, OK there might be exceptions. We can get write to a file directly (don't display the output) and specify the line number before which we want to append the text. We can then add the text we want and followed by the filename.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed -i &lt;span class="s1"&gt;&amp;#39;33 i sometext here&amp;#39;&lt;/span&gt; filename&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here, &lt;code&gt;33&lt;/code&gt; is the line number in the file which we want to insert before. We have used &lt;code&gt;'"'&lt;/code&gt; to add a &lt;code&gt;'&lt;/code&gt; inside a &lt;code&gt;'&lt;/code&gt;, this might feel a bit wired but that is how it is in BASH. &lt;/p&gt;&lt;p&gt;Let's say you want to add &lt;code&gt;print('Hello, World!')&lt;/code&gt; to a particular line, we have to enclose &lt;code&gt;'&lt;/code&gt; with these &lt;code&gt;"'&lt;/code&gt;( double and single quotes),&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed -i &lt;span class="s1"&gt;&amp;#39;2i print(&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;Hello, World&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt; hello.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will add the line &lt;code&gt;print('Hello World')&lt;/code&gt; to the file &lt;code&gt;hello.py&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632824742835/Uj8AF07UG.png" /&gt;&lt;/p&gt;&lt;h3 id="appending-to-a-line-using-sed"&gt;Appending to a line using sed&lt;/h3&gt;&lt;p&gt;We can even append text to a particular line using sed, we can use some escape characters and regex to add the text from the end of the line.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed -i &lt;span class="s1"&gt;&amp;#39;2i s/$/ textgoes here /&amp;#39;&lt;/span&gt; filename&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here 2 is any number of line you want to add text to, next &lt;code&gt;i&lt;/code&gt; a prompt for inserting text and then we have regex like &lt;code&gt;s/$/ /&lt;/code&gt;, this will put the text enclosed in &lt;code&gt;/ /&lt;/code&gt; to the end of the line as indicated by &lt;code&gt;$&lt;/code&gt;.  We have the filename at its usual place as before.&lt;/p&gt;&lt;p&gt;So, lets say, I want to add a comment to the second line in the previous example, I can use the following command to do it:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed -i &lt;span class="s1"&gt;&amp;#39;2 s/$/ # another comment/&amp;#39;&lt;/span&gt; hello.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632825067925/0eU2mkCDI.png" /&gt;&lt;/p&gt;&lt;p&gt;We have used these commands to add the &lt;code&gt;include&lt;/code&gt; function in the &lt;code&gt;urls.py&lt;/code&gt; in the project folder.&lt;/p&gt;&lt;p&gt;So those were all the operations we used for doing some automated editing for the Auth0 app integration to our Django project.&lt;/p&gt;&lt;p&gt;Below is the entire script and is also uploaded on &lt;a href="https://github.com/Mr-Destructive/django-auth0-quick-setup"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;&lt;h2 id="complete-bash-script"&gt;Complete BASH Script&lt;/h2&gt;&lt;p&gt;You can run the file by parsing the name of your project.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash script.sh mywebsite&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait for some 2-3 minutes, and the script will produce the Django application with the Auth0 app integrated. You will have to enter the credentials manually wherever applicable.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;mkdir &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;pip install virtualenvvirtualenv venv&lt;span class="nb"&gt;source&lt;/span&gt; venv/Scripts/activatepip install djangodjango-admin startproject &lt;span class="nv"&gt;$1&lt;/span&gt; .cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; requirements.txt&lt;/span&gt;&lt;span class="s"&gt;social-auth-app-django~=3.1 &lt;/span&gt;&lt;span class="s"&gt;python-jose~=3.0 &lt;/span&gt;&lt;span class="s"&gt;python-dotenv~=0.9&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;pip install -r requirements.txtpip freeze &amp;gt; requirements.txtpython manage.py startapp auth0logintouch auth0login/urls.pymkdir auth0login/templatestouch auth0login/templates/index.htmltouch auth0login/templates/dashboard.htmlsed -i &lt;span class="s1"&gt;&amp;#39;40 i \    &amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;social_django&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;/settings.pysed -i &lt;span class="s1"&gt;&amp;#39;41 i \    &amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth0login&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;/settings.pysed -i &lt;span class="s1"&gt;&amp;#39;21 i \    path(&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, include(&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;auth0login.urls&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)),&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;/urls.pysed -i &lt;span class="s1"&gt;&amp;#39;17 s/$/, include/&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;/urls.py cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; $1/settings.py&lt;/span&gt;&lt;span class="s"&gt;SOCIAL_AUTH_TRAILING_SLASH = False  # Remove trailing slash from routes&lt;/span&gt;&lt;span class="s"&gt;SOCIAL_AUTH_AUTH0_DOMAIN = &amp;#39;YOUR_DOMAIN&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;SOCIAL_AUTH_AUTH0_KEY = &amp;#39;YOUR_CLIENT_ID&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;SOCIAL_AUTH_AUTH0_SECRET = &amp;#39;YOUR_CLIENT_SECRET&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; $1/settings.py &lt;/span&gt;&lt;span class="s"&gt;SOCIAL_AUTH_AUTH0_SCOPE = [&lt;/span&gt;&lt;span class="s"&gt;    &amp;#39;openid&amp;#39;,&lt;/span&gt;&lt;span class="s"&gt;    &amp;#39;profile&amp;#39;,&lt;/span&gt;&lt;span class="s"&gt;    &amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;]&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;python manage.py migratecat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt;auth0login/auth0backend.py&lt;/span&gt;&lt;span class="s"&gt;from urllib import request&lt;/span&gt;&lt;span class="s"&gt;from jose import jwt&lt;/span&gt;&lt;span class="s"&gt;from social_core.backends.oauth import BaseOAuth2&lt;/span&gt;&lt;span class="s"&gt;class Auth0(BaseOAuth2):&lt;/span&gt;&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;Auth0 OAuth authentication backend&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;    name = &amp;#39;auth0&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;    SCOPE_SEPARATOR = &amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="s"&gt;    ACCESS_TOKEN_METHOD = &amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;    REDIRECT_STATE = False&lt;/span&gt;&lt;span class="s"&gt;    EXTRA_DATA = [&lt;/span&gt;&lt;span class="s"&gt;        (&amp;#39;picture&amp;#39;, &amp;#39;picture&amp;#39;),&lt;/span&gt;&lt;span class="s"&gt;        (&amp;#39;email&amp;#39;, &amp;#39;email&amp;#39;)&lt;/span&gt;&lt;span class="s"&gt;    ]&lt;/span&gt;&lt;span class="s"&gt;    def authorization_url(self):&lt;/span&gt;&lt;span class="s"&gt;        return &amp;#39;https://&amp;#39; + self.setting(&amp;#39;DOMAIN&amp;#39;) + &amp;#39;/authorize&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;    def access_token_url(self):&lt;/span&gt;&lt;span class="s"&gt;        return &amp;#39;https://&amp;#39; + self.setting(&amp;#39;DOMAIN&amp;#39;) + &amp;#39;/oauth/token&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;    def get_user_id(self, details, response):&lt;/span&gt;&lt;span class="s"&gt;        &amp;quot;&amp;quot;&amp;quot;Return current user id.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;        return details[&amp;#39;user_id&amp;#39;]&lt;/span&gt;&lt;span class="s"&gt;    def get_user_details(self, response):&lt;/span&gt;&lt;span class="s"&gt;        # Obtain JWT and the keys to validate the signature&lt;/span&gt;&lt;span class="s"&gt;        id_token = response.get(&amp;#39;id_token&amp;#39;)&lt;/span&gt;&lt;span class="s"&gt;        jwks = request.urlopen(&amp;#39;https://&amp;#39; + self.setting(&amp;#39;DOMAIN&amp;#39;) + &amp;#39;/.well-known/jwks.json&amp;#39;)&lt;/span&gt;&lt;span class="s"&gt;        issuer = &amp;#39;https://&amp;#39; + self.setting(&amp;#39;DOMAIN&amp;#39;) + &amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;        audience = self.setting(&amp;#39;KEY&amp;#39;)  # CLIENT_ID&lt;/span&gt;&lt;span class="s"&gt;        payload = jwt.decode(id_token, jwks.read(), algorithms=[&amp;#39;RS256&amp;#39;], audience=audience, issuer=issuer)&lt;/span&gt;&lt;span class="s"&gt;        return {&amp;#39;username&amp;#39;: payload[&amp;#39;nickname&amp;#39;],&lt;/span&gt;&lt;span class="s"&gt;                &amp;#39;first_name&amp;#39;: payload[&amp;#39;name&amp;#39;],&lt;/span&gt;&lt;span class="s"&gt;                &amp;#39;picture&amp;#39;: payload[&amp;#39;picture&amp;#39;],&lt;/span&gt;&lt;span class="s"&gt;                &amp;#39;user_id&amp;#39;: payload[&amp;#39;sub&amp;#39;],&lt;/span&gt;&lt;span class="s"&gt;                &amp;#39;email&amp;#39;: payload[&amp;#39;email&amp;#39;]}&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; $1/settings.py&lt;/span&gt;&lt;span class="s"&gt;AUTHENTICATION_BACKENDS = {&lt;/span&gt;&lt;span class="s"&gt;    #&amp;#39;YOUR_DJANGO_APP_NAME.auth0backend.Auth0&amp;#39;,&lt;/span&gt;&lt;span class="s"&gt;    &amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;}&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; $1/settings.py&lt;/span&gt;&lt;span class="s"&gt;LOGIN_URL = &amp;#39;/login/auth0&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;LOGIN_REDIRECT_URL = &amp;#39;/dashboard&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &amp;gt; auth0login/views.py&lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span class="s"&gt;from django.shortcuts import render, redirect&lt;/span&gt;&lt;span class="s"&gt;from django.contrib.auth.decorators import login_required&lt;/span&gt;&lt;span class="s"&gt;from django.contrib.auth import logout as log_out&lt;/span&gt;&lt;span class="s"&gt;from django.conf import settings&lt;/span&gt;&lt;span class="s"&gt;from django.http import HttpResponseRedirect&lt;/span&gt;&lt;span class="s"&gt;from urllib.parse import urlencode&lt;/span&gt;&lt;span class="s"&gt;import json&lt;/span&gt;&lt;span class="s"&gt;def index(request):&lt;/span&gt;&lt;span class="s"&gt;    user = request.user&lt;/span&gt;&lt;span class="s"&gt;    if user.is_authenticated:&lt;/span&gt;&lt;span class="s"&gt;        return redirect(dashboard)&lt;/span&gt;&lt;span class="s"&gt;    else:&lt;/span&gt;&lt;span class="s"&gt;        return render(request, &amp;#39;index.html&amp;#39;)&lt;/span&gt;&lt;span class="s"&gt;@login_required&lt;/span&gt;&lt;span class="s"&gt;def dashboard(request):&lt;/span&gt;&lt;span class="s"&gt;    user = request.user&lt;/span&gt;&lt;span class="s"&gt;    auth0user = user.social_auth.get(provider=&amp;#39;auth0&amp;#39;)&lt;/span&gt;&lt;span class="s"&gt;    userdata = {&lt;/span&gt;&lt;span class="s"&gt;        &amp;#39;user_id&amp;#39;: auth0user.uid,&lt;/span&gt;&lt;span class="s"&gt;        &amp;#39;name&amp;#39;: user.first_name,&lt;/span&gt;&lt;span class="s"&gt;        &amp;#39;picture&amp;#39;: auth0user.extra_data[&amp;#39;picture&amp;#39;],&lt;/span&gt;&lt;span class="s"&gt;        &amp;#39;email&amp;#39;: auth0user.extra_data[&amp;#39;email&amp;#39;],&lt;/span&gt;&lt;span class="s"&gt;    }&lt;/span&gt;&lt;span class="s"&gt;    return render(request, &amp;#39;dashboard.html&amp;#39;, {&lt;/span&gt;&lt;span class="s"&gt;        &amp;#39;auth0User&amp;#39;: auth0user,&lt;/span&gt;&lt;span class="s"&gt;        &amp;#39;userdata&amp;#39;: json.dumps(userdata, indent=4)&lt;/span&gt;&lt;span class="s"&gt;    })&lt;/span&gt;&lt;span class="s"&gt;def logout(request):&lt;/span&gt;&lt;span class="s"&gt;    log_out(request)&lt;/span&gt;&lt;span class="s"&gt;    return_to = urlencode({&amp;#39;returnTo&amp;#39;: request.build_absolute_uri(&amp;#39;/&amp;#39;)})&lt;/span&gt;&lt;span class="s"&gt;    logout_url = &amp;#39;https://%s/v2/logout?client_id=%s&amp;amp;%s&amp;#39; % \&lt;/span&gt;&lt;span class="s"&gt;                 (settings.SOCIAL_AUTH_AUTH0_DOMAIN, settings.SOCIAL_AUTH_AUTH0_KEY, return_to)&lt;/span&gt;&lt;span class="s"&gt;    return HttpResponseRedirect(logout_url)&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; auth0login/templates/index.html&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;div class=&amp;quot;login-box auth0-box before&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;img src=&amp;quot;https://i.cloudup.com/StzWWrY34s.png&amp;quot; /&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;h3&amp;gt;Auth0 Example&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;p&amp;gt;Zero friction identity infrastructure, built for developers&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;a class=&amp;quot;btn btn-primary btn-lg btn-login btn-block&amp;quot; href=&amp;quot;/login/auth0&amp;quot;&amp;gt;Log In&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; auth0login/templates/dashboard.html&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;div class=&amp;quot;logged-in-box auth0-box logged-in&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;h1 id=&amp;quot;logo&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;//cdn.auth0.com/samples/auth0_logo_final_blue_RGB.png&amp;quot; /&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;img class=&amp;quot;avatar&amp;quot; src=&amp;quot;{{ auth0User.extra_data.picture }}&amp;quot;/&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;h2&amp;gt;Welcome {{ user.username }}&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;    &amp;lt;pre&amp;gt;{{ userdata }}&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; auth0login/urls.py&lt;/span&gt;&lt;span class="s"&gt;from django.urls import path, include&lt;/span&gt;&lt;span class="s"&gt;from . import views&lt;/span&gt;&lt;span class="s"&gt;urlpatterns = [&lt;/span&gt;&lt;span class="s"&gt;    path(&amp;#39;&amp;#39;, views.index),&lt;/span&gt;&lt;span class="s"&gt;    path(&amp;#39;dashboard&amp;#39;, views.dashboard),&lt;/span&gt;&lt;span class="s"&gt;    path(&amp;#39;logout&amp;#39;, views.logout),&lt;/span&gt;&lt;span class="s"&gt;    path(&amp;#39;&amp;#39;, include(&amp;#39;django.contrib.auth.urls&amp;#39;)),&lt;/span&gt;&lt;span class="s"&gt;    path(&amp;#39;&amp;#39;, include(&amp;#39;social_django.urls&amp;#39;)),&lt;/span&gt;&lt;span class="s"&gt;]&lt;/span&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;python manage.py makemigrationspython manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Ok, so this was it, a quite big script but that's how automation can be. We were able to set up a Django base application with a ready app of Auth0 to extend the functionality. This was just a basic script also you can extend the functionalities like adding a curl command to fetch the credentials and make it more automated but that was not the aim of this article. &lt;/p&gt;&lt;p&gt;If you had any issues using the script please let me know, I'll be happy to fix those. Thanks for reading. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-admin'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Admin Section&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-conditionals-loops'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Conditionals and Loops&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/djagno-auth0-script</guid><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate></item><item><title>What is Machine Learning?</title><link>https://mr-destructive.github.io/techstructive-blog/ml-intro</link><description>We all hear about terms like  This is not the kind of article I write but, having such challenges can help me become a better technical writer, this is the chal</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We all hear about terms like &lt;code&gt;Machine Learning&lt;/code&gt;, &lt;code&gt;Artificial Intelligence&lt;/code&gt;, and others, but what do they actually mean and why do you need to care about these as a developer. This won't be a perfect guide in terms of experience but surely enough to get anyone through the basics of Machine Learning.&lt;/p&gt;&lt;p&gt;This is not the kind of article I write but, having such challenges can help me become a better technical writer, this is the challenge put forward in the Hashnode Bootcamp 4 to get out of my comfort zone. Here's my take on what I know about Machine Learning till now (P.S. Half of the stuff I discovered and re-learned during writing).&lt;/p&gt;&lt;h2 id="what-is-machine-learning"&gt;What is Machine Learning?&lt;/h2&gt;&lt;p&gt;Machine Learning is a technique in software development to predict and react to the inputs without being explicitly programmed or written. We can use the if-else condition till a point in time, after seeing real-world examples like customer service, driving, playing games(chess, checkers, etc), image prediction, and so on. You can't write code for every single case of these applications, So that is where we see Artificial Intelligence.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Artificial Intelligence is a process of simulating human-like behavior into computers /robots/ electronic systems.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;These are two quite similar terms(A.I., M.L.) but they have their own differences. Let's look at those differences:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Artificial Intelligence is a technology that enables computer systems to act and decide like humans.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Machine Learning is a process of extracting data and learning from the past experience or outcomes from that data.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Machine learning is actually a subset of AI. Machine learning actually is about training the computer system about an outcome using the data feed into it. We will actually look at the detailed process about it in the next few sections. &lt;/p&gt;&lt;h2 id="the-process-of-machine-learning"&gt;The Process of Machine Learning&lt;/h2&gt;&lt;p&gt;The first step should be to choose an idea or a goal that you would like to make the system predict or output the results.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Data Gathering&lt;/li&gt;&lt;li&gt;Filtering Data&lt;/li&gt;&lt;li&gt;Selecting an Algorithm &lt;/li&gt;&lt;li&gt;Training the system&lt;/li&gt;&lt;li&gt;Verifying and Evaluation of Training&lt;/li&gt;&lt;li&gt;Improving and Deploying the Model&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let's take the example of classifying a picture as either dog or cat.&lt;/p&gt;&lt;p&gt;&lt;img alt="Images.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632902918426/AoHlrL13z.gif" /&gt;&lt;/p&gt;&lt;h3 id="1-data-gathering"&gt;1. Data Gathering&lt;/h3&gt;&lt;p&gt;We can now move on to collecting the medium of data that will be used by our system to get the desired outcome, it might be to predict something, classify certain things, take decisions, etc.&lt;/p&gt;&lt;p&gt;In our example, as we want to classify an image into either a dog or a cat is classifying things from the given data set. For that, we will require images that depict this constraint.  We can use our personal data, public data and from other sources, you would like to get your hands on.&lt;/p&gt;&lt;p&gt;These are some of the popular places to get data publicly:   - &lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt;   - &lt;a href="https://datasetsearch.research.google.com/"&gt;Google Data Search&lt;/a&gt;   - &lt;a href="https://www.reddit.com/r/datasets/top/?sort=top&amp;amp;t=all"&gt;Reddit Datasets&lt;/a&gt;   - &lt;a href="https://github.com/awesomedata/awesome-public-datasets#machinelearning"&gt;Public Datasets on GitHub&lt;/a&gt;   - &lt;a href="https://registry.opendata.aws/"&gt;AWS Registry of Open Data&lt;/a&gt;&lt;/p&gt;&lt;h3 id="2-filtering-data"&gt;2. Filtering Data&lt;/h3&gt;&lt;p&gt;After you have collected the data from some sources, you will notice that it is not perfect as per your needs. And to be honest, there is no dataset that is perfect for your requirements, because otherwise there will be a ton of data to work with, it might be inefficient for humans to create and sort out from that data. So we may have to do it manually or take help from a data scientist. &lt;/p&gt;&lt;p&gt;But if you are just learning, it will be helpful for you to filter and clean the data yourself. There will be things in the data sets missing or there will be unwanted things in it. This is a critical step that everyone tends to ignore but at the end of the day,  spend about 80% of the time unknowingly. This is quite an important step as it decides the efficiency of the model you will have made. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Remove/Fill in the rows which are empty.&lt;/li&gt;&lt;li&gt;Remove the columns which are not related to your objective.&lt;/li&gt;&lt;li&gt;Fix certain wrong or inconsistent data.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id="group-data-as-training-and-testing"&gt;Group data as Training and Testing&lt;/h4&gt;&lt;p&gt;After the procedure has been applied, you can now separate the data set as Training and Testing Data. You have to create two datasets from one, the prior for training and the latter for testing the model system after evaluating the tests.&lt;/p&gt;&lt;p&gt;For our example, we have to separate the images which will be relatively easier to distinguish in the training data, and the tough ones for the testing data as it will challenge the model appropriately. &lt;/p&gt;&lt;h3 id="3-selecting-an-algorithm"&gt;3. Selecting an Algorithm&lt;/h3&gt;&lt;p&gt;Now, this is again an important step as it will make your project's backbone. This will be the algorithm that will identify, predict or decide on the outcomes from the data given to it.&lt;/p&gt;&lt;p&gt;We have the following types of algorithms &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Linear Regression&lt;/li&gt;&lt;li&gt;Logistic Regression&lt;/li&gt;&lt;li&gt;Decision Tree&lt;/li&gt;&lt;li&gt;Artificial Neural Network&lt;/li&gt;&lt;li&gt;k-Nearest Neighbors (KNN)&lt;/li&gt;&lt;li&gt;k-Means&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can choose any one of the above or find other types which will be more or less based on these algorithms. This algorithm will be decided by the outcomes you want, for example, whether you have to predict, classify, recommend, cluster, etc. the outcome from the given data. Different algorithms have different complexity as they have a completely different approaches.&lt;/p&gt;&lt;p&gt;You can research this more and find more about which will be suitable for your objectives or application.  &lt;/p&gt;&lt;p&gt;Now an important topic that is misleading, Model is the program that will work with the data in association with the algorithm and output the actual objective. Model is not the algorithm but it works with the chosen algorithm and processes the actual learning in machine learning. &lt;/p&gt;&lt;p&gt;So,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Model = Algorithm + Data&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The model will actually process the data according to the algorithm given and fill in the objectives may they be classifying or predicting. &lt;/p&gt;&lt;h3 id="4-training-the-system"&gt;4. Training the system&lt;/h3&gt;&lt;p&gt;Training is a step that is very interesting as it involves actually testing the model and it's really fun. We provide the model the &lt;code&gt;training data&lt;/code&gt; that we segregated while filtering the data. In this process we try to minimize the loss by making changes to the algorithm, fix some data set or bring in some additional dataset as per needs and again evaluate the results. This is a loop called &lt;code&gt;model fitting&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This step depends on the learning into consideration, whether you want to provide any supervision or not. &lt;/p&gt;&lt;h3 id="5-verifying-and-evaluation-of-training"&gt;5. Verifying and Evaluation of Training&lt;/h3&gt;&lt;p&gt;This is a part of &lt;code&gt;model fitting&lt;/code&gt; as it is the part of the loop which allows us to evaluate and verify the model.  We can evaluate the model based on its accuracy, precision, labels, etc. So based on those parameters we should be able to decide its complexity and performance.&lt;/p&gt;&lt;p&gt;These are important aspects to consider in evaluating the model.- Accuracy - Precision&lt;br /&gt;- Recall &lt;/p&gt;&lt;p&gt;You can get the details of the mathematics and logic involved in evaluating the model with some references like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.jeremyjordan.me/evaluating-a-machine-learning-model/"&gt;Evaluating ML model - Jeremy Jordan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://towardsdatascience.com/various-ways-to-evaluate-a-machine-learning-models-performance-230449055f15"&gt;Ways to Evaluate ML model - Towards DataScience &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="6-improving-and-deploying-the-model"&gt;6. Improving and Deploying the Model&lt;/h3&gt;&lt;p&gt;This might be the final step generally but it depends on the project, there are certain aspects that need to be taken care of like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Creating an API endpoint&lt;/li&gt;&lt;li&gt;Analysis and Visualization integration with client-side (web/android/ios/desktop app)&lt;/li&gt;&lt;li&gt;Creating a Pipeline for data input and output from the model.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There might be other options like CI/CD, Testing, feedback, and other production level details that need to be taken care of, you can read more about the deployment of machine learning models  &lt;a href="https://christophergs.com/machine%20learning/2019/03/17/how-to-deploy-machine-learning-models/"&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;You can learn about deploying an ML model for your learning and testing for free with the recommendations of  &lt;a href="https://www.freecodecamp.org/news/deploy-your-machine-learning-models-for-free/"&gt;FCC&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="different-types-of-machine-learning"&gt;Different Types of Machine Learning&lt;/h2&gt;&lt;p&gt;There are four basic types of Machine Learning :&lt;/p&gt;&lt;h3 id="1-supervised-learning"&gt;1. Supervised Learning&lt;/h3&gt;&lt;p&gt;In this type of ML, the model is given the labeled data in the training dataset and is evaluated. We provide both input and output to the model and hence it is supervised or tracked throughout the process. &lt;/p&gt;&lt;p&gt;&lt;img alt="3.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632909214720/1uHALiOG-.png" /&gt;&lt;/p&gt;&lt;p&gt;The above image is just for reference and not directly a model, height and weight can be a parameter to consider and are not only the thing to be considered her. It's just for making understand the concept of the learning process. &lt;/p&gt;&lt;h3 id="2-unsupervised-learning"&gt;2. Unsupervised Learning&lt;/h3&gt;&lt;p&gt;In this type of machine learning, the model is trained with unlabeled data. It is on the algorithm to actually see the pattern or logic in the dataset provided and give the output. The output will be known to the user but is not given to the model, hence called unsupervised learning. &lt;/p&gt;&lt;p&gt;&lt;img alt="4.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632909227565/KtU7Oppkc.png" /&gt;&lt;/p&gt;&lt;h3 id="3-semi-supervised-learning"&gt;3. Semi-Supervised Learning&lt;/h3&gt;&lt;p&gt;As the name suggests, it is a combination of both Supervised and Unsupervised learning. The dataset is given with the label but the model is also allowed to process its own label(kind of) into the output. Hence having the best of both worlds. There might be even some labeled and some unlabeled datasets as per the requirements of the application.&lt;/p&gt;&lt;p&gt;&lt;img alt="5.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1632909276475/TPGy91_LQ.png" /&gt;&lt;/p&gt;&lt;h3 id="4-reinforcement-learning"&gt;4. Reinforcement Learning&lt;/h3&gt;&lt;p&gt;In reinforcement learning, the model learns from feedback. It might look similar to supervised learning but here the feedback might not be instant and hence causing delay and improper decision making from the model. Though it is used in many places, it is like the realistic learning behavior of humans depicted to computers with this learning system.  &lt;/p&gt;&lt;p&gt;&lt;strong&gt;There are other types of learning systems as well but these are used quite commonly and are quite versatile as well.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="applications-of-machine-learning"&gt;Applications of Machine Learning&lt;/h2&gt;&lt;p&gt;The applications of Machines Learning are all around you. Just look carefully, you would have even feedback on a model! - Personal Assistants (Google Assistant/ Siri/ Alexa)- Gmail Inbox filter.- &lt;a href="https://towardsdatascience.com/how-youtube-recommends-videos-b6e003a5ab2f"&gt;Youtube Video Recommendation system&lt;/a&gt; .- Face recognition ( &lt;a href="https://en.wikipedia.org/wiki/DeepFace"&gt;DeepFace&lt;/a&gt; )- Product Recommendations.- Self-Driving Cars( &lt;a href="https://www.tesla.com/autopilot"&gt;Tesla&lt;/a&gt; )- Traffic Alerts (Google Map)- Text Improvement (&lt;a href="https://www.grammarly.com/blog/how-grammarly-uses-ai/"&gt;Grammarly&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;This list is quite huge and is increasing every day with new technologies and growing popularity. &lt;/p&gt;&lt;h2 id="can-github-copilot-take-away-developers-jobs"&gt;Can GitHub Copilot take away developers' jobs?&lt;/h2&gt;&lt;p&gt;This just doesn't focus on developers, it's every human's job on target this day but really? Is it a matter of concern? I don't think so, because,&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;the number of jobs lost = the number of jobs given.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;There will be a need for humans in some or the other way, remember a computer cannot is &lt;strong&gt;not smart&lt;/strong&gt; like humans, surely it has improved from what we thought a couple of years ago. But who discovered this? HUMANS. &lt;/p&gt;&lt;p&gt;Yes, Machine Learning is quite a powerful technique but humans will remain the essence in the world. It will be dependent on humans how we treat the models and use them to our and nature's advantage and not use them against nature to face the consequences later. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Ok, so from this big article, we can summarize the Machine Learning concept.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Machine learning is a program that has a dataset and algorithm along with the model for the objective, we train the model as per the requirements and objectives with our dataset. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We were able to understand some common processes involved in Machine Learning. We even discussed the applications and the state of Machine Learning in today's world. I hope you found this article helpful. Thank you for reading. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-setup'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Setup and Installation&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/flask-django-frameworks'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Flask and Django - the backend web frameworks&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/ml-intro</guid><pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate></item><item><title>Comment/Uncomment Code: Vim for Programmers</title><link>https://mr-destructive.github.io/techstructive-blog/vim-un-comment-p1</link><description>We as programmers always fiddle with commenting out code for code testing, documenting the function of code, and most importantly debugging. So you can In this </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We as programmers always fiddle with commenting out code for code testing, documenting the function of code, and most importantly debugging. So you can't wait to comment on a large chunk of code manually, as it is quite a tedious thing to do. Let's do it effectively in Vim.&lt;/p&gt;&lt;p&gt;In this part of the series, I'll cover how to comment/uncomment chunks/blocks of code effectively in Vim. We will see and use some commands, keybindings for doing so, and also we would add certain components to our vimrc file as well to design some custom key mappings.  Let's get faster with Vim.&lt;/p&gt;&lt;h2 id="how-to-comment-multiple-lines-effectively"&gt;How to comment multiple lines effectively&lt;/h2&gt;&lt;p&gt;To comment on multiple lines of code, we can use the Visual Block mode to select the lines, and then after entering into insert mode, we can comment a single line and it would be reflected on all the selected lines.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Press &lt;code&gt;CTRL+V&lt;/code&gt; and Select the line using j and k&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;After Selecting the lines, Press &lt;code&gt;Escape&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Press &lt;code&gt;Shift + I&lt;/code&gt;, to enter insert mode&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Enter the comment code (&lt;code&gt;//&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, or other)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img alt="vimcoment.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633518136135/06dfBTq2T.gif" /&gt;&lt;/p&gt;&lt;p&gt;So, using just simple steps you can comment out large chunks of code quite easily and effectively. If you are using some other language that has multiple characters for commenting like &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;- -&lt;/code&gt;, etc, you can type in any number of characters while being in insert mode after selecting the lines.&lt;/p&gt;&lt;p&gt;&lt;img alt="vimcppcom.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633520509953/0q-k2ZHC7.gif" /&gt;&lt;/p&gt;&lt;p&gt;This might look a bit wired on the first try but just try it every day, It is a life-saving and very satisfying experience once applied in a real-world scenario.&lt;/p&gt;&lt;h2 id="how-to-uncomment-multiple-lines-effectively"&gt;How to uncomment multiple lines effectively&lt;/h2&gt;&lt;p&gt;Now, as we have seen to comment out a large chunk of code, we can even uncomment the code very easily. It's even simpler than commenting the code.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Press &lt;code&gt;CTRL + V&lt;/code&gt; to enter Visual Block mode&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Select the commented characters&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Press &lt;code&gt;d&lt;/code&gt; to delete the comments&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Press &lt;code&gt;Escape&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img alt="vimuncoment.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633518156818/GJzRPTI3I.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can simply use the CTRL + V to select the comment, and then press d to delete all the comment characters. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;We are using the Visual Block mode as we only want the comment to be selected and not the entire code associated with the lines.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="using-multiline-comments-for-programming-languages"&gt;Using Multiline Comments for Programming languages&lt;/h2&gt;&lt;p&gt;Now you might say, why use multiple single-line comments when we can use multiline comments in almost all programming languages. Well, Of course, you can do that, it's easier for reading the code if syntax highlighting is accurate and greys out the commented part. We can simply add those characters to the start of the block and at the end of the block.  &lt;/p&gt;&lt;p&gt;But in Vim, we can customize that too, just imagine when you just select the chunk/block of code that you need to comment out and then simply press a few keystrokes (just 2) and the multiline comments are automatically (programmatically) added as per the programming language extension of the file.&lt;/p&gt;&lt;p&gt;Isn't that cool? Well, you just need to copy-paste the below code to your Vimrc file and source it and you are good to go. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; Comment&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="k"&gt;let&lt;/span&gt; ext &lt;span class="p"&gt;=&lt;/span&gt; tolower&lt;span class="p"&gt;(&lt;/span&gt;expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%:e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;py&amp;#39;&lt;/span&gt;         &lt;span class="k"&gt;let&lt;/span&gt; cmt1 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt2 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;       &lt;span class="k"&gt;elseif&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cpp&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;java&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cs&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rs&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;go&amp;#39;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt1 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/*&amp;#39;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt2 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*/&amp;#39;&lt;/span&gt;    &lt;span class="k"&gt;elseif&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt1 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;#39;&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt2 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;elseif&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt1 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;!--&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt2 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--&amp;gt;&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;elseif&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hs&amp;#39;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt1 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{-&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt2 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-}&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;elseif&lt;/span&gt; ext &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt1 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;=begin&amp;quot;&lt;/span&gt;        &lt;span class="k"&gt;let&lt;/span&gt; cmt2 &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;=end&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;endif&lt;/span&gt;    exe line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;normal O&amp;quot;&lt;/span&gt;. cmt1 &lt;span class="p"&gt;|&lt;/span&gt; exe line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;normal o&amp;quot;&lt;/span&gt;. cmt2 &lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; UnComment&lt;span class="p"&gt;()&lt;/span&gt;    exe line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;normal dd&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; exe line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;normal dd&amp;quot;&lt;/span&gt;   &lt;span class="k"&gt;endfunction&lt;/span&gt;&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; Comment&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;vnoremap&lt;/span&gt; &lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; UnComment&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The below screencast is an example of &lt;code&gt;HTML&lt;/code&gt; snippet in a file that is getting commented using mapping with the keys &lt;code&gt;,m&lt;/code&gt; you can put any other keybinding you like. &lt;img alt="htmcm.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633595891674/hbhrbtRHd.gif" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Similarly for the next screencast is of an &lt;code&gt;Javascript&lt;/code&gt; snippet in a file which is getting commented using a mapping with the keys &lt;code&gt;,m&lt;/code&gt; and uncommented using &lt;code&gt;m,&lt;/code&gt; again you can put any other keybinding you like. &lt;/p&gt;&lt;p&gt;&lt;img alt="jscom.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633595919104/xGTh5ztWu.gif" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;The following screencast is of a shell script(BASH) snippet.&lt;img alt="shcom.gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1633596156121/tbGHQBSSA.gif" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h3 id="multiline-comments-in-various-programming-languages"&gt;Multiline Comments in various Programming Languages:&lt;/h3&gt;&lt;h4 id="1-c-c-java-javascript-css-c-rust-go-php-swift-dart-kotlin"&gt;1. C / C++ / Java / Javascript / CSS / C# / Rust / Go / PHP / Swift / Dart / Kotlin&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/**/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="2-python"&gt;2. Python&lt;/h4&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;You can even use &lt;code&gt;"""&lt;/code&gt; double quotes instead of single quotes&lt;/p&gt;&lt;h4 id="3-bash-shell-scripting"&gt;3. BASH (Shell Scripting)&lt;/h4&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;: &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;You can even use &lt;code&gt;: "&lt;/code&gt; and &lt;code&gt;"&lt;/code&gt; double quotes instead of single quotes&lt;/p&gt;&lt;h4 id="4-haskell"&gt;4. Haskell&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{--}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="5-ruby"&gt;5. Ruby&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;=begin=end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="6-html"&gt;6. HTML&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;!----&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="7-julia"&gt;7. Julia&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#==#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="understanding-the-commands-keymapping"&gt;Understanding the Commands / Keymapping&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;NOTE : You need to go from the top to bottom while commenting on the block of code, otherwise, it would be a mismatch in commenting for specific language syntax. While uncommenting the order doesn't matter.&lt;/strong&gt;&lt;/p&gt;&lt;h4 id="getting-the-extension-filetype"&gt;Getting the extension (filetype)&lt;/h4&gt;&lt;p&gt;In Vim, we can get the file extension i.e. we can get the programming language associated with the current file. To do that we can use, &lt;code&gt;expand('%:e')&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This will give us the file extension of the current file. Just for simplicity, &lt;code&gt;%&lt;/code&gt; means the current file, added to it is &lt;code&gt;:e&lt;/code&gt; for excluding the filename and keeping the extension. We convert the extension into lowercase just for keeping things safe and programmatic and store it in a variable &lt;code&gt;ext&lt;/code&gt;. &lt;/p&gt;&lt;h4 id="checking-for-programming-language"&gt;Checking for programming language&lt;/h4&gt;&lt;p&gt;We then can then use an if-else ladder to check for the programming languages and assign two variables &lt;code&gt;cmt1&lt;/code&gt; for the initial characters in the multiline comment and &lt;code&gt;cmt2&lt;/code&gt; for enclosing the comment. &lt;/p&gt;&lt;h4 id="typing-in-the-characters"&gt;Typing in the characters&lt;/h4&gt;&lt;p&gt;We can use the function &lt;code&gt;line("'&amp;lt;")&lt;/code&gt; to get the line number of the previous visual selection. Similarly, &lt;code&gt;line("'&amp;gt;")&lt;/code&gt; for the ending line. We are using the &lt;code&gt;exe&lt;/code&gt; command to execute the function &lt;code&gt;line&lt;/code&gt; and so we have to use a concatenation of the commands even to write the raw commands like &lt;code&gt;i&lt;/code&gt; to insert mode, &lt;code&gt;o&lt;/code&gt; to insert mode but a line below the cursor. So, we use &lt;code&gt;normal&lt;/code&gt; command for that. This command indicates the interpreter to execute the following commands from the normal mode. &lt;/p&gt;&lt;p&gt;We have to enclose the &lt;code&gt;normal&lt;/code&gt; command in double-quotes/single quotes. We can simply use the variable again with concatenation.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;exe line&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;normal o&amp;quot;&lt;/span&gt;. cmt2 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command will fetch the last line's number of the previous visual selection followed by entering &lt;code&gt;o&lt;/code&gt; from the normal mode and concatenated with the value of the variable &lt;code&gt;cmt2&lt;/code&gt; which we have already initialized in the &lt;code&gt;Comment&lt;/code&gt; function. We are using &lt;code&gt;|&lt;/code&gt; for running multiple commands as we also need to include the comment at the beginning of the visual selection. &lt;/p&gt;&lt;p&gt;For uncommenting the code, we are simply deleting the entire first and the last line in the visual selection. For that, we have used &lt;code&gt;dd&lt;/code&gt; from the normal mode.  &lt;/p&gt;&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;&lt;p&gt;So, from the following type of tutorial, we were able to set up our Vim editor for efficient code commenting/ uncommenting using some commands, key shortcuts, and configuring the vimrc for making custom keymappings. We were also able to understand the multiline comments in various programming languages and use them in Vim very effectively with a simple addon to the config vimrc file.&lt;/p&gt;&lt;p&gt;Thank you for reading, hope you found this article helpful. If you have any queries or wanna add multiline comments for some more programming languages please let me know in the comments or contact section. &lt;/p&gt;&lt;p&gt;Happy Coding :)&lt;/p&gt;&lt;h3 id="references"&gt;References&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim/1676690"&gt;StackOverflow - Commenting lines in Vim &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/grepliz/3-ways-to-comment-out-blocks-of-code-in-vi-6j4"&gt;Liz Lam - 3 ways to comment code in Vim&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href="https://vi.stackexchange.com/questions/9644/how-to-use-a-variable-in-the-expression-of-a-normal-command"&gt;StackExchange - Use variable in normal command&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-text-editor-ide'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Why and How to make and use Vim as a text editor and customizable IDE&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/pipx-intro'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Pipx: A python package consumption tool for CLI packages&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/vim-un-comment-p1</guid><pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Flask and Django - the backend web frameworks</title><link>https://mr-destructive.github.io/techstructive-blog/flask-django-frameworks</link><description>We all have seen the buzz around web frameworks like Django, Flask, Node.js, etc but have you taken time to learn all of them? No, and you shouldn Before we get</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We all have seen the buzz around web frameworks like Django, Flask, Node.js, etc but have you taken time to learn all of them? No, and you shouldn't! Because many web frameworks share the same principle and workflow with a bit of difference. It's just like learning one programming language and applying the same concepts in a different syntax and mechanism. In the world of web frameworks, this is the case as well, but most of them will disagree with it as every web framework is unique in its design and that's true, don't get me wrong.&lt;/p&gt;&lt;p&gt;Before we get into frameworks let us understand the key components of the web application- &lt;strong&gt;Database&lt;/strong&gt; - It holds the data for our application.- &lt;strong&gt;Server&lt;/strong&gt; - Used to fetch/store/manage requests from the client. - &lt;strong&gt;API&lt;/strong&gt; - Used as an interface between the client and the Database. - &lt;strong&gt;Client&lt;/strong&gt; - The browser or any client that requests for resources.&lt;/p&gt;&lt;p&gt;&lt;img alt="djflask-webapp.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1635081505223/rLnSyA_7Y.png" /&gt;&lt;/p&gt;&lt;p&gt;Every web framework will serve the same purpose with different design, architecture, language but it will have a similar pattern in developing the application. Let's clear the concepts in this article.&lt;/p&gt;&lt;h2 id="what-is-a-back-end-web-framework"&gt;What is a back-end Web framework?&lt;/h2&gt;&lt;p&gt;A web framework is a tool/application meant for designing, creating, testing web applications a lot quicker with a lot of ease. Without web frameworks, you will have been writing some code that will tire you very quickly. &lt;/p&gt;&lt;p&gt;It even seems impossible to manually write markups for each piece of data in the application, which is taken care of by dynamic templating in Python-based frameworks like Django, Flask. The database queries are managed by the web frameworks as well, otherwise, you will have been writing SQL queries manually! How painful and frustrating that would look, of course, you can create scripts for querying to the database but you are then creating a component of a framework. &lt;code&gt;Don't waste time&lt;/code&gt; that's a takeaway from the philosophy of all the web frameworks.&lt;/p&gt;&lt;p&gt;Another thing that back-end web frameworks do is create homogeneity in development across different environments and applications. It also creates a developer-friendly environment. We must not forget how easy and quick applications can be built using the back-end web frameworks. &lt;/p&gt;&lt;h3 id="a-back-end-web-framework-provides-some-of-the-features-like"&gt;A back-end Web framework provides some of the features like:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Handle web requests&lt;/li&gt;&lt;li&gt;Manage DB by just using some simple scripts&lt;/li&gt;&lt;li&gt;Render Dynamic Templates&lt;/li&gt;&lt;li&gt;Provide a lot of native-language libraries integration&lt;/li&gt;&lt;li&gt;Organize a project much easily and effectively&lt;/li&gt;&lt;li&gt;Options to scale the application at any level&lt;/li&gt;&lt;li&gt;Provide some standard and secure way to run the server(production)&lt;/li&gt;&lt;li&gt;Design APIs much easily&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let us look at two of the most popular frameworks in the Python community.&lt;/p&gt;&lt;h3 id="1-flask"&gt;1. Flask&lt;/h3&gt;&lt;h3 id="2-django"&gt;2. Django&lt;/h3&gt;&lt;p&gt;&lt;img alt="backend framework ranking" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1635070666410/JbMc7NKP0.png" /&gt;&lt;/p&gt;&lt;p&gt;We are seeing that Django and Flask are among the top 3 back-end web frameworks in 2021. So there is no double thought on why you should learn these technologies.&lt;/p&gt;&lt;h3 id="what-is-flask"&gt;What is Flask&lt;/h3&gt;&lt;p&gt;Flask is the bare-bones framework that provides a lot of customizability with a lot less boilerplate code. It is a framework that provides a lot of third-party libraries to add functionalities to our application. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Flask is a micro web framework&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Flask as per the official documentation is a &lt;code&gt;micro&lt;/code&gt; framework indicating it has a very minimal setup. It is a back-end web framework that can be structured as per needs with a very little configuration overhead. That being said, it can get a bit limited in structuring and functionalities as it needs to taken care of manually.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Flask is the easiest back-end web framework to get started and learn the fundamentals of server-side&lt;/strong&gt;. Flask is quite flexible in terms of scalability and maintenance of decent-sized applications as well. Though the community is not that big and absence of standardization in Flask, it is a go-to back-end web framework for beginners as well as experts due to its simplicity and flawless integration with Python libraries. &lt;/p&gt;&lt;p&gt;The main concepts in Flask might be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Virtual Environment &lt;/li&gt;&lt;li&gt;WSGI as a web server&lt;/li&gt;&lt;li&gt;App routing&lt;/li&gt;&lt;li&gt;Jinga2 as a templating language&lt;/li&gt;&lt;li&gt;Creating Database connections&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, &lt;strong&gt;Flask is kind of a DIY back-end web framework with rich sets of libraries and customizability out of the box&lt;/strong&gt;. This can easily be a beginner's choice and a right one too.&lt;/p&gt;&lt;h3 id="what-is-django"&gt;What is Django&lt;/h3&gt;&lt;p&gt;Django is also a back-end web framework based on Python programming language but it is more standardized and high-level. Django encourages a defined pattern for development but with customization and freedom in mind.&lt;/p&gt;&lt;p&gt;Django also modularizes the components into so-called &lt;code&gt;apps&lt;/code&gt; to provide a scalable experience. It has a lot of boilerplate code to get up and running quite easily, it also has a &lt;code&gt;Admin section&lt;/code&gt; pre-built with all the functionalities. Similar to &lt;code&gt;Flask&lt;/code&gt;, it also provides flawless integration with all the Python libraries. It provides a much easier Database integration and pre-built &lt;code&gt;User&lt;/code&gt; authentication along with its model ready to plug in and use. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Django is a Batteries included Framework&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That means it has baked in functionalities like User-Authentication, Admin Section, Database Integration, RSS/Atom syndication feeds, etc. &lt;/p&gt;&lt;p&gt;&lt;img alt="djflask-dj.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png" /&gt;&lt;/p&gt;&lt;p&gt;The main concepts in Django include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Virtual Environment&lt;/li&gt;&lt;li&gt;WSGI/ASGI as web servers&lt;/li&gt;&lt;li&gt;Project structure&lt;/li&gt;&lt;li&gt;&lt;code&gt;Model View Controller&lt;/code&gt; Architecture in developing apps&lt;/li&gt;&lt;li&gt;Django Templating Language for rendering Dynamic Templates &lt;/li&gt;&lt;li&gt;&lt;code&gt;Object-Relational Mapping&lt;/code&gt; in creating the applications&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Unlike Flask, Django is already baked in with a lot of functionalities and integration with a ton of features. It should be good for beginners but many things are already taken care of that can be a huddle in &lt;strong&gt;actual learning process&lt;/strong&gt;, that being said it is a much scalable and production-ready web framework (not only back-end).&lt;/p&gt;&lt;h3 id="what-are-the-similarities-between-them"&gt;What are the similarities between them?&lt;/h3&gt;&lt;p&gt;Well, if you learn one the other will be quite easy enough to pick up. The overall development is almost similar but unique in its own way. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Pythonic syntax and libraries&lt;/li&gt;&lt;li&gt;Project Structure is quite similar to &lt;code&gt;blueprints&lt;/code&gt; in Flask and &lt;code&gt;apps&lt;/code&gt; in Django&lt;/li&gt;&lt;li&gt;Templating Language is almost similar&lt;/li&gt;&lt;li&gt;Static Files are handled similarly with a different syntax &lt;/li&gt;&lt;li&gt;URL Routing is the same as it binds the view(functions) with a pattern&lt;/li&gt;&lt;li&gt;Ease in Deployment with minimal configuration&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="what-should-you-learn"&gt;What should you learn?&lt;/h2&gt;&lt;p&gt;That question is dependent on the type of application you are trying to make but for a beginner trying to get hands dirty on the server-side, I would recommend &lt;code&gt;Flask&lt;/code&gt; as it is quite minimal and helps in constructing the base for the concepts like APIs, Databases, Requests, Admin section, etc. &lt;/p&gt;&lt;p&gt;This might not be that difficult for people trying to learn back-end from scratch but for people with a bit of programming and server-side experience, &lt;code&gt;Django&lt;/code&gt; should be a go-to framework for all their needs. &lt;/p&gt;&lt;p&gt;At the end of the day, it hardly matters what you do with which framework, what people see is the end result.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Thus, from this article, you might have got a bit understanding of why are the frameworks used in making applications and also the similarities and differences in the Python-based back-end web frameworks like Django and Flask. If you have any thoughts please let me know in the comments or on my social handles, any kind of feedback is much appreciated. &lt;/p&gt;&lt;p&gt;Thank you for reading till here, until then as always Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/ml-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;What is Machine Learning?&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/bash-crypto-scrapper'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Cryptocurrency Price Scrapping using BASH and Coingecko API&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/flask-django-frameworks</guid><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Hacktoberfest 2021</title><link>https://mr-destructive.github.io/techstructive-blog/hacktoberfest-2021</link><description>This was my second year as a Hacktoberfest participant, First year was very dry and not so exciting as this turned out to be a cracker of an experience. With mo</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;This was my second year as a Hacktoberfest participant, First year was very dry and not so exciting as this turned out to be a cracker of an experience. With more than month gone in with only a few contributions, the second half of October was a splendid one for me where I made a lot more than in entire 2 years.  &lt;/p&gt;&lt;p&gt;This is my Contributions so far in this month:&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://pbs.twimg.com/media/FCXfmqEVIAMmwug?format=jpg&amp;amp;name=large" /&gt;&lt;/p&gt;&lt;h2 id="maintaining-the-momentum"&gt;Maintaining the Momentum&lt;/h2&gt;&lt;p&gt;Since the beginning of September, I started to contribute to open-source little by little so as to really progress my way into learning new stuff and networking with more people. I also had Hacktoberfest in my mind and so I started with simple issues and got a different perspective of Open-source as it is another way to do things pretty quickly and feeling of getting things done for someone else as a community work. Finding Issues perfect for you is hard but shaping yourself with the requirements for the issue is what you can achieve over a period of time.&lt;/p&gt;&lt;p&gt;So I basically had some 5-6 pull requests merged in some Repositories, I don't trust numbers when it comes to open-source as it might be some &lt;code&gt;documentation changes&lt;/code&gt;, &lt;code&gt;branch name changes&lt;/code&gt;, &lt;code&gt;translations&lt;/code&gt;, etc. This might not be the best contribution I could have made but breaking the ice was an important step, for that I bought my expectations down to contribute to big organizations and projects and started sifting some doable issues. Since then, Hacktoberfest was around the corner and it just carried the momentum of my open-source contribution further.&lt;/p&gt;&lt;h2 id="getting-the-hang-of-open-source"&gt;Getting the hang of Open Source&lt;/h2&gt;&lt;p&gt;So, till mid-October, I just had 2 pull requests with only 1 merged. I was out of town for a week and had some college projects to be completed so I couldn't catch up with the contributions but after a few days of getting back on a regular schedule, I was able to submit half a dozen of PRs in a week (all merged). One of them was from the official &lt;code&gt;Jekyll&lt;/code&gt; repository :) I was pretty much elated with that contribution though it was only about adding 4-5 lines of documentation, it was something that can be useful for people as it was for me and it was not previously there in the official docs. &lt;/p&gt;&lt;p&gt;You will say, is open-source about merging PRs? No, it's not especially the &lt;code&gt;hacktoberfest&lt;/code&gt; labeled ones. I have contributed to only 5 projects with hacktoberfest accepted label others were the stuff which I personally liked and wanted to genuinely contribute to. I also would like to address some issues and things which are not in the spirit of Open source, firstly &lt;strong&gt;most of the issues with hacktoberfest accepted labels are from front end, so trivial, self-assigned. I understand it's meant for beginners but it's not only for beginners or is it? I might be wrong here.&lt;/strong&gt; Still, the maintainers need to up the standards a bit for equal opportunity for everyone to contribute with the spirit of open source.&lt;/p&gt;&lt;p&gt;I wanted to be a maintainer this year but didn't feel much confident about it. It can be a challenge for maintainers as well to fetch attention and come up with good issues and projects. That's a thought for another year until then I will be a happy contributor.&lt;/p&gt;&lt;blockquote&gt;&lt;h3 id="hacktoberfest-is-only-about-open-source-but-open-source-is-not-only-about-hacktoberfest"&gt;Hacktoberfest is only about Open Source but Open source is not only about Hacktoberfest&lt;/h3&gt;&lt;/blockquote&gt;&lt;p&gt;Well, Hacktoberfest is about open-source right? But Open source is not only about Hacktoberfest, like just contributing to getting 4 PRs merged and just forgetting open source because it was mentioned so(also get some Swags). This was my mistake last year :( I just didn't touch open-source after Hacktoberfest. This year I would definitely not repeat the mistake and continue providing value and gain more experience. &lt;/p&gt;&lt;h2 id="what-were-my-learnings"&gt;What were my learnings&lt;/h2&gt;&lt;p&gt;I learned some skills that I might not have otherwise thought about learning. Understanding &lt;code&gt;Svelte&lt;/code&gt;, &lt;code&gt;Github Actions&lt;/code&gt; for &lt;code&gt;Go&lt;/code&gt; lang, leveraging &lt;code&gt;Django&lt;/code&gt; and &lt;code&gt;Bash&lt;/code&gt; skills were some of my key takeaways from this year of Hacktoberfest. This is too much for me compared to the previous year in which I just used some &lt;code&gt;C++&lt;/code&gt; and &lt;code&gt;Bash&lt;/code&gt; to create an Algorithm or function. How stupid of me for contributing to that kind of project and pulling up 4 PRs for that, though I was a beginner and have come too far from making that mistake again. Thanks to everyone who gave me a chance to contribute.   &lt;/p&gt;&lt;p&gt;Let's see my top 4 contributions as per my opinion:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Ananto30/golpo-svelte/pull/14"&gt;Created a ripple effect button as a &lt;code&gt;Svelte&lt;/code&gt; component&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/soumya997/Listreqs/pull/2"&gt;Created a BASH script to convert a pip list to freeze format output&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/julien-bouquet/geo-api/pull/18"&gt;Added &lt;code&gt;GitHub&lt;/code&gt; Actions workflow for linting in &lt;code&gt;go&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/jekyll/jekyll/pull/8852"&gt;Additional Documentation for running Jekyll local&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="whats-next-in-open-source-for-me"&gt;What's next in Open Source for me&lt;/h2&gt;&lt;p&gt;I'll continue to sort and pick up some issues in my spare time and try to learn something that I have never worked with or am too excited to work on. I have a lot of plans for some Open source projects of existing applications and would like to make them from the ground up. &lt;/p&gt;&lt;p&gt;Some of the things I'm looking for in open source next:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Open-source alternative to existing projects/apps&lt;/li&gt;&lt;li&gt;Any new application/project&lt;/li&gt;&lt;li&gt;Automation of tasks (using Python/BASH)&lt;/li&gt;&lt;li&gt;Writing documentation for existing projects&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Don't take my word for it, you'll see it in action soon(probably in 2022) XD. Until then it's about learning and documenting the process.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, it's almost Halloween with Diwali around the corner and sadly an end-of-a-month-long celebration of Open source. Though you can anytime contribute to open source this is a month you can do more than just open source. This year for me was an absolute delight and definitely improved from the horrendous previous experiences. The things I spent time learning in lock-down when there was no result/reward for the effort, are finally getting rewarded, and am much confident than I ever was. Hopefully, you have not read the entire article but that's fine unless you have taken time to read it. Thank you for being here. Until then Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-editing-speed'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Enhancing Editing Speed&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-text-editor-ide'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Why and How to make and use Vim as a text editor and customizable IDE&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/hacktoberfest-2021</guid><pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Crossposting with a single script: Crossposter.sh</title><link>https://mr-destructive.github.io/techstructive-blog/crossposter-shellscript</link><description>If you have been writing articles you know the pain to get some attention, if you have already been cross-posting your articles it usually takes some time to do</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;If you have been writing articles you know the pain to get some attention, if you have already been cross-posting your articles it usually takes some time to do that. This task can be automated with a shellscript. If you have been cross-posting articles on &lt;code&gt;medium.com&lt;/code&gt;, &lt;code&gt;dev.to&lt;/code&gt; and at &lt;code&gt;hashnode.com&lt;/code&gt;, then I have a treat for you. &lt;/p&gt;&lt;p&gt;Introducing &lt;strong&gt;crossposter.sh&lt;/strong&gt;!!&lt;/p&gt;&lt;h2 id="what-is-crosspostersh"&gt;What is Crossposter.sh?&lt;/h2&gt;&lt;h3 id="crosspost-to-devtohahsnodemedium-from-the-command-line"&gt;Crosspost to dev.to/hahsnode/medium from the command line.&lt;/h3&gt;&lt;p&gt;Crossposter.sh is a shellscript(BASH) to automate crossposting to platforms like dev.to, medium.com and hashnode.com. The script takes in markdown version of your post with a few inputs from you and posts it to those platforms. You would require a token/key for each of those platforms to post it from the command line. You can check out the official repository of &lt;a href="https://github.com/Mr-Destructive/crossposter"&gt;Crossposter&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The actual script is still not perfect (has a few bugs). Though it posts on &lt;code&gt;dev.to&lt;/code&gt; and &lt;code&gt;medium.com&lt;/code&gt; easily, the &lt;code&gt;hashnode.com&lt;/code&gt; is buggy as it parses the raw markdown into the post and doesn't render as desired. So, &lt;strong&gt;its a under-development script&lt;/strong&gt;, fell free to raise any issues or PRs on the official GitHub repo.   &lt;/p&gt;&lt;p&gt;Run the script on a bash interpreter with the command:&lt;/p&gt;&lt;p&gt;&lt;code&gt;bash crosspost.sh&lt;/code&gt;&lt;/p&gt;&lt;p&gt;For posting the article you need to provide the following details:&lt;/p&gt;&lt;h2 id="front-matter"&gt;Front-Matter&lt;/h2&gt;&lt;h3 id="meta-data-about-the-post"&gt;Meta data about the post&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Title of Post&lt;/li&gt;&lt;li&gt;Subtitle of Post&lt;/li&gt;&lt;li&gt;Publish status of post(&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;Tags for the post (comma separated values)&lt;/li&gt;&lt;li&gt;Canonical Url (original url of the post)&lt;/li&gt;&lt;li&gt;Cover Image (URL of the post's image/thumbnail)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This information is a must for &lt;code&gt;dev.to&lt;/code&gt; especially the &lt;code&gt;title&lt;/code&gt;. This should be provide in the same order as given below:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;The title of the post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;The description of your article&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;programming, anythingelse&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;canonical url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;url of your original blog&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;cover_image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;coverimage_url&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is no need to enclose any of them with quotation marks. &lt;code&gt;Published&lt;/code&gt; argument will be &lt;code&gt;true&lt;/code&gt; if you want to publish it and &lt;code&gt;false&lt;/code&gt; if you want to keep it in your Drafts.&lt;/p&gt;&lt;p&gt;In the demonstrations, we just need to enter the tokens once. The tokens will be stored locally in the &lt;code&gt;keys.txt&lt;/code&gt; file and retrieved later within the script.&lt;/p&gt;&lt;h2 id="posting-on-devto"&gt;Posting on &lt;strong&gt;dev.to&lt;/strong&gt;:&lt;/h2&gt;&lt;p&gt;Posting on dev.to requires their &lt;code&gt;API key&lt;/code&gt; which can be generated by going on the &lt;a href="https://dev.to/settings/account/"&gt;Dev Community API Keys&lt;/a&gt;. From there you can generate a new key with any name you like. You just need to enter the key to CLI once or manually enter in the &lt;code&gt;keys.txt&lt;/code&gt; file with the format &lt;code&gt;dev.to:key&lt;/code&gt; on the first line. This will be used for the future cross-posting whenever you execute the shell script(&lt;code&gt;bash crosspost.sh&lt;/code&gt;)&lt;/p&gt;&lt;p&gt;You can provide the &lt;a href="#front-matter"&gt;front matter&lt;/a&gt; manually in your markdown file or you will be prompted for the input. So, that is all you will require for posting on dev.to from the Command line.  &lt;/p&gt;&lt;p&gt;Lets see the script in action &lt;/p&gt;&lt;p&gt;&lt;img alt="dev.to" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/devto.gif" /&gt;&lt;/p&gt;&lt;p&gt;If you want to add in more stuff to the post, you can check out the &lt;a href="https://developers.forem.com/api#operation/createArticle"&gt;DEV.to API docs&lt;/a&gt; which is powered by &lt;a href="https://www.forem.com/"&gt;Forem&lt;/a&gt;, there a ton of options you can hook to the front-matter in the shellscript.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE: There is a limit of 10 requests per 30 seconds, so keep in mind while testing the script and don't try to spam&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="posting-on-hashnodecom"&gt;Posting on &lt;strong&gt;hashnode.com&lt;/strong&gt;:&lt;/h2&gt;&lt;p&gt;This part is still under development as it only displays the raw markdown in the post, also the &lt;code&gt;tags&lt;/code&gt; are too heavy to implement from the API as &lt;code&gt;id&lt;/code&gt; of every tag is required along with the &lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Still it serves some purpose at least. For posting on &lt;code&gt;hashnode.com&lt;/code&gt;, we need &lt;code&gt;Personal Access Token&lt;/code&gt;. This can be generated by going to &lt;a href="https://hashnode.com/settings/developer"&gt;Developer Settings&lt;/a&gt;. You will also require the user-id of your &lt;code&gt;hashnode&lt;/code&gt; account. You can get your user-id/username from the &lt;a href="https://hashnode.com/settings"&gt;settings&lt;/a&gt; tab under profile information. We require Username for posting to the Publication Blog if any. As usual, the &lt;code&gt;Personal Access Token&lt;/code&gt; for interacting with the &lt;a href="https://api.hashnode.com/"&gt;Hashnodes' GraphQL API&lt;/a&gt;. The API is quite user friendly and provides everything in one place. There are docs for running each and every &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;mutations&lt;/code&gt; present in the API. &lt;/p&gt;&lt;p&gt;You can paste the token when prompted from the script or manually type in the &lt;code&gt;keys.txt&lt;/code&gt; text file as &lt;code&gt;hashnode:token&lt;/code&gt; on the 4th line. Yes, that should be on the &lt;code&gt;4th&lt;/code&gt; line, thats make retrieving much more easier and safe. Next also input in the &lt;code&gt;username&lt;/code&gt; when the script asks for the input or again type in on the &lt;code&gt;5th&lt;/code&gt; line, &lt;code&gt;hashnode_id:username&lt;/code&gt; in the text file &lt;code&gt;keys.txt&lt;/code&gt;. Please enter the credentials from the script prompt so as to avoid errors and misconfigurations when doing manually&lt;/p&gt;&lt;p&gt;This will create the Post on hashnode with the title, subtitle, cover image correctly but will mess up the content. I tried hard but its just not happening. There needs to be some character for newline as the API rejects the &lt;code&gt;rn&lt;/code&gt; characters passed in, so I have substited them with &lt;code&gt;br&lt;/code&gt; and the result is raw markdown. &lt;strong&gt;As the Hashnode API is still under development and they are bringing changes and new features in, the API should improve in its core functionality and make it much easier for creating some common queries&lt;/strong&gt;. So, I'll create issue on GitHub for posting the actual content via the script.&lt;/p&gt;&lt;p&gt;So, this is the demonstration of posting on hashnode.&lt;/p&gt;&lt;p&gt;&lt;img alt="hashnode" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/hashnode.gif" /&gt;&lt;/p&gt;&lt;h2 id="posting-on-mediumcom"&gt;Posting on &lt;strong&gt;medium.com&lt;/strong&gt;:&lt;/h2&gt;&lt;p&gt;Medium API is much more versatile and markdown friendly, though it has some limitation on the number of posts you can make in a day. For posting on &lt;code&gt;Medium.com&lt;/code&gt;, we will require the &lt;code&gt;Integration Token&lt;/code&gt; which can be generated on the &lt;a href="https://medium.com/me/settings"&gt;settings tab&lt;/a&gt;. As similar to &lt;code&gt;hashnode&lt;/code&gt;, you can name the token whatever you like and then get the token. Paste the token when prompted from the script or manually type in the &lt;code&gt;keys.txt&lt;/code&gt; text file as &lt;code&gt;medium:token&lt;/code&gt; on the &lt;code&gt;2nd&lt;/code&gt; line. We also require the Medium_id, but we can get that from the token itself, so inside the script once the token is obtained, the curl command is executed to fetch in the &lt;code&gt;id&lt;/code&gt; and it is stored on the next(&lt;code&gt;3rd&lt;/code&gt;) line in the &lt;code&gt;keys.txt&lt;/code&gt; file for actually posting on &lt;code&gt;medium.com&lt;/code&gt;. So that is all the configuration you need for posting on &lt;code&gt;medium.com&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;There is some documentation on &lt;a href="https://github.com/Medium/medium-api-docs"&gt;Medium API&lt;/a&gt;, we can even post to a Publication, that shall be created in future. Also the cover images can be posted on medium, it is not currently done but that can again be a #TODO. &lt;strong&gt;The tags are not rendered on Medium yet with the script.&lt;/strong&gt; The way we can parse  strings is limited in BASH, so this might still be a doable thing later. Most of the checkboxes are ticked like title, subtitle, cover-image, canonical url, and importantly the content.&lt;/p&gt;&lt;p&gt;Let's look at post on medium from the script.&lt;/p&gt;&lt;p&gt;&lt;img alt="medium" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/medium.gif" /&gt;&lt;/p&gt;&lt;h2 id="all-platforms"&gt;All platforms:&lt;/h2&gt;&lt;p&gt;Now, once you have configured every thing, you can opt for the &lt;code&gt;4&lt;/code&gt; choice that is post on all platforms(dev.to, hashnode and medium), but as hashnode is not looking a good option right now, so there is the &lt;code&gt;5&lt;/code&gt; option for only &lt;code&gt;dev.to&lt;/code&gt; and &lt;code&gt;medium&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;&lt;img alt="allplatforms" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/crossposter.gif" /&gt;&lt;/p&gt;&lt;h2 id="why-use-crosspostersh"&gt;Why use Crossposter.sh?&lt;/h2&gt;&lt;p&gt;This can be not so big of an issue for most of the people but it was a good side project to work and learn more about how APIs work and get some ideas on the design of the platform. Though it is quite time saving to cross post on 3 different platforms within a minute or two. You can tailor your own script as per your specifications and desire.   &lt;/p&gt;&lt;p&gt;So, if you are an author on all of the mentioned platforms, please give it a try. Other Platforms are welcome for contributions. If you found any unexpected things, please hit them in the &lt;code&gt;issues&lt;/code&gt; tab. &lt;/p&gt;&lt;h2 id="script"&gt;Script&lt;/h2&gt;&lt;p&gt;The script mostly leverages &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt; and some other basic utilities in BASH. &lt;/p&gt;&lt;h3 id="using-curl-for-posting-the-article-from-apis"&gt;Using &lt;code&gt;curl&lt;/code&gt; for posting the article from APIs&lt;/h3&gt;&lt;p&gt;Curl is a life saver command for this project, without this tool, the project might not be as great and efficient. Let's see some quick commands used in the script.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;api-key&amp;quot;&lt;/span&gt;: &lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;$key&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;content&amp;quot;:\&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, the above command is quite basic, some more additions are also added as per the specifications of the Platform. But, let us understand the structure of the command we are sending to the APIs. The first part is the Header (&lt;code&gt;-H&lt;/code&gt;), in here we specify the content that is going to get parsed and the api-keys to access the API. Next, we have the body or the data (&lt;code&gt;-d&lt;/code&gt;), here we parse in the actual contents, it might be the front matter along with the markdown content. Finally we have the &lt;code&gt;url&lt;/code&gt; where we send the &lt;code&gt;POST&lt;/code&gt; request i.e. the &lt;code&gt;API endpoint&lt;/code&gt;. The is the escape character that is used to preserve the literal value of the next character and in short we can shorten the command to fit in the next line.&lt;/p&gt;&lt;p&gt;The wired &lt;code&gt;$body&lt;/code&gt; is used to parse the value of the variable &lt;code&gt;body&lt;/code&gt; inside of single quotes as in BASH, we can only access the variables' value in double quotes. We are using single quotes as we have to pass the &lt;code&gt;json&lt;/code&gt; object and which has already double quotes in it.  &lt;/p&gt;&lt;h3 id="using-sed-for-editing-text"&gt;Using &lt;code&gt;sed&lt;/code&gt; for editing text&lt;/h3&gt;&lt;p&gt;Sed is a super-powerful stream editor, its somewhat similar to Vim without an interface, only commands. We use this tool to manipulate the front-matter for posting on the platforms by parsing them to variables in BASH. We also use to enter the api keys inputted by user from variables into the file at a specific position to retrieve later. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed -i &lt;span class="s2"&gt;&amp;quot;1a title: &lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; file.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we are appending(&lt;code&gt;a&lt;/code&gt;) to the 1st line, text &lt;code&gt;title: $title&lt;/code&gt;, here &lt;code&gt;$title&lt;/code&gt; is the variable, so we are technically parsing the value of the variable &lt;code&gt;title&lt;/code&gt;. We are editing the file &lt;code&gt;file.txt&lt;/code&gt; in-place &lt;code&gt;-i&lt;/code&gt; i.e. we are editing it live without creating any temp or backup files.       &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sed -n -e &lt;span class="s2"&gt;&amp;quot;s/dev.to://p&amp;#39; keys.txt&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we are essentially getting the text after a particular pattern. In this case we are searching in &lt;code&gt;keys.txt&lt;/code&gt; file for the string &lt;code&gt;dev.to:&lt;/code&gt; and anything after that till the end of line is returned, we can further store it in the variable and do all sorts of operation.&lt;/p&gt;&lt;h3 id="using-awk-for-programmatic-editing"&gt;Using &lt;code&gt;awk&lt;/code&gt; for programmatic editing&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;awk &lt;span class="s1"&gt;&amp;#39;{print $0&amp;quot;\r\n&amp;quot;}&amp;#39;&lt;/span&gt; temp.txt &amp;gt;file.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AWK is a command-line utility for manipulating or writing certain operations/patterns programmatically. We use this tool so as to add &lt;code&gt;4r4n&lt;/code&gt; to the end of each line, the APIs can't parse the file contents directly so we have to add certain characters before the end of line and do further operations.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat temp.md &lt;span class="p"&gt;|&lt;/span&gt; tr -d &lt;span class="s1"&gt;&amp;#39;\r\n&amp;#39;&lt;/span&gt; &amp;gt; temp.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After we have added the &lt;code&gt;\r\n&lt;/code&gt; characters to the end of the file, we simply can use &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;tr&lt;/code&gt; to merge all the lines into a single line. This is how we parse the contents to the API more safely and concisely, of course we need to parse them in a variable by reading the file.&lt;/p&gt;&lt;p&gt;OK, I won't bore anyone with more BASH but that were some of the quite important commands in the script that form the backbone of the cross-posting and handling text with the APIs.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, we can see &lt;code&gt;crosspost.sh&lt;/code&gt; is a BASH script that cross-posts markdown articles with a bit of inputs to 3 different platforms within a couple of minutes. This article was basically to demonstrate the project and its capabilities also highlighting the issues present. I hope you liked the project, please do try it and comment the feedback please. Thank you for reading, Until next time, Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/python-feedparser'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Feedparser: Python package for reading RSS feeds&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/hello-golang'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Installation and Hello-World&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/crossposter-shellscript</guid><pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate></item><item><title>Basics of curl command</title><link>https://mr-destructive.github.io/techstructive-blog/curl-basics</link><description>We all might have used the curl command but might be unaware of it. It Curl or cURL command is the utility or tool to access the internet from the command Befor</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We all might have used the curl command but might be unaware of it. It's super oldand still serves a great purpose. It has been available since 1996 and still iswidely used in many embedded technologies, web API testing, CLI applications,etc. In this article, we'll see some basics of using the curl command along withits applications.&lt;/p&gt;&lt;h2 id="what-is-the-curl-command"&gt;What is the curl command?&lt;/h2&gt;&lt;p&gt;Curl or cURL command is the utility or tool to access the internet from the commandline interface using various protocols. This looks trivial but it can blow upyour mind! Most people use this tool for fetching and processing thedata from the servers/internet from their terminal without the browser butthere is a lot more to it. It is used in various embedded devices for accessingthe network in a lightweight and accessible way. Let's see how you can use the curlcommand from the very basics.&lt;/p&gt;&lt;h2 id="why-do-we-need-it"&gt;Why do we need it?&lt;/h2&gt;&lt;p&gt;Before we talk about how to use the curl command let's talk about why might we needthat? There are a lot of reasons and it even depends on the application you areusing.  You can use curl to test your API, well there are other tools likePOSTMAN, Insomnia, etc but for keeping things simple you can quickly get inwith curl and test some endpoints.  You might require curl for creating someCLI applications that require fetching/posting to an URL over the internet.If you are using the terminal, curl integrates really very well with the shellprogramming languages like BASH, ZSH, etc So, after making WHY out of the way,let's start with the actual content. &lt;/p&gt;&lt;h2 id="structure-of-curl-command"&gt;Structure of curl command&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;curl or Client URL is a command-line utility that helps in accessing/postingdata with various protocols over the internet.&lt;/strong&gt; It basically serves as abare-bones browser URL search bar.  You can't render those pages like theactual GUI, and all but you can get is the HTML source code, JSON response,etc.  That's still quite powerful and used in tons of applications. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl URL arguments &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above is a basic structure of the curl command. We see the argumentstructure in-depth in the next section. Firstly, let's take a simple curl command with just the URL is given.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl &lt;span class="s2"&gt;&amp;quot;https://github.com&amp;quot;&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;From this query to &lt;code&gt;github.com&lt;/code&gt;, you are literally going to &lt;code&gt;GitHub.com&lt;/code&gt; and getting a response as the entire HTML source code of the page.If you don't want to spam the output in the terminal, you can redirect the output to a file.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl &lt;span class="s2"&gt;&amp;quot;https://github.com&amp;quot;&lt;/span&gt; &amp;gt;temp.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;With this command, we store the output of the command in the file temp.html, it can be any other file you like. &lt;/p&gt;&lt;h3 id="arguments"&gt;Arguments&lt;/h3&gt;&lt;p&gt;It turns out that you can even parse in certain arguments to the &lt;code&gt;curl&lt;/code&gt; command to get some desired and modified results. Let's take a look at some of them.The &lt;a href="https://curl.se/docs/manpage.html"&gt;entire list of arguments&lt;/a&gt; is quite hugeand baffling, but this shows how customizable the command is. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; (silent the progress bar)&lt;/li&gt;&lt;li&gt;&lt;code&gt;-X&lt;/code&gt; (web requests &lt;code&gt;POST, GET, etc&lt;/code&gt; to the URL)&lt;/li&gt;&lt;li&gt;&lt;code&gt;-o&lt;/code&gt; (output to a file)&lt;/li&gt;&lt;li&gt;&lt;code&gt;-H&lt;/code&gt; ( provide Header to the request)&lt;/li&gt;&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; (providing the data e.g. in POST request)&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -s -o &lt;span class="s2"&gt;&amp;quot;https://github.com&amp;quot;&lt;/span&gt; temp.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command doesn't load the progress bar and simply outputs the response in afile, making the execution process in the terminal clean.&lt;/p&gt;&lt;h3 id="integration-with-other-commands"&gt;Integration with other commands&lt;/h3&gt;&lt;p&gt;As said, the &lt;code&gt;curl&lt;/code&gt; command can be well integrated with the other commands using piping in shell, assigning to variables, and so on.&lt;/p&gt;&lt;p&gt;Let's see how we can convert the &lt;code&gt;JSON&lt;/code&gt; response to a BASH variable.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -H &lt;span class="s2"&gt;&amp;quot;api-key: N2vDzMyEeYGTxjUTePhC8bYd&amp;quot;&lt;/span&gt; https://dev.to/api/users/me&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$resp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here, we are fetching the &lt;code&gt;JSON&lt;/code&gt; response from the &lt;code&gt;dev.to&lt;/code&gt; &lt;a href="https://developers.forem.com/api/"&gt;API&lt;/a&gt;,The wired string &lt;code&gt;N2vDzMyEeYGTxjUTePhC8bYd&lt;/code&gt; is my &lt;a href="https://dev.to/settings/account"&gt;dev.to API token&lt;/a&gt;(don't worry I have revoked it:) ) we have provided an argument &lt;code&gt;-H&lt;/code&gt; that is a Header for accepting a &lt;code&gt;Json&lt;/code&gt; response. We can store the contents of the curl command by using the &lt;code&gt;$( )&lt;/code&gt; and assigning that to the variable name of your choice.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -H &lt;span class="s2"&gt;&amp;quot;api-key: N2vDzMyEeYGTxjUTePhC8bYd&amp;quot;&lt;/span&gt; https://dev.to/api/users/me &lt;span class="p"&gt;|&lt;/span&gt; grep -o -P &lt;span class="s1"&gt;&amp;#39;(?&amp;lt;=username&amp;quot;:&amp;quot;).*(?=&amp;quot;,&amp;quot;name)&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Here, we have stored the username from a &lt;code&gt;JSON&lt;/code&gt; response to the variable username. We have piped the curl command so that we can work with that &lt;code&gt;JSON&lt;/code&gt; response and modify the contents and then store the final results in a variable.In this case, we are using &lt;code&gt;grep&lt;/code&gt; to filter out the content between the key &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;, thus we get the value we desired. To see the value you can always run the echo command as below:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;So, that's how the &lt;code&gt;curl&lt;/code&gt; command integrates flawlessly with BASH and other shell programming languages. &lt;/p&gt;&lt;h2 id="where-is-it-used"&gt;Where is it used?&lt;/h2&gt;&lt;p&gt;&lt;code&gt;curl&lt;/code&gt; is actually used in API testing, CLI applications, Web Scrapping, etc. It's a great tool for terminal lovers. Let's see where we can use the curl command actually to make some good projects.&lt;/p&gt;&lt;h3 id="api-testing"&gt;API Testing&lt;/h3&gt;&lt;p&gt;We can use, &lt;code&gt;curl&lt;/code&gt; to test an API, it might be API you would have made or to simply test and play with other API available publicly. You can get an in-depth guide about &lt;a href="https://www.codepedia.org/ama/how-to-test-a-rest-api-from-command-line-with-curl/"&gt;Testing a REST API with curl&lt;/a&gt;.Actually, curl can do more than just testing, I have made a &lt;a href="https://gist.github.com/Mr-Destructive/80860664b1014ef0b94092d68ead1044"&gt;bash script&lt;/a&gt; that actually posts some data over a database through the API so that I don't have to do that manually. That is the kind of automation I love to do and curl! Just did that.&lt;/p&gt;&lt;h3 id="web-scrapping"&gt;Web Scrapping&lt;/h3&gt;&lt;p&gt;Web-scrapping is usually trending with Python, but I have done that with BASH.That might be an outdated idea but is a good task to learn the basics ofWeb-scrapping with BASH ;). I must say that sed, awk, grep are the tools arepowerful like heck in doing these tricks. I have made this&lt;a href="https://mr-destructive.github.io/techstructive-blog/bash/2021/07/15/BASH-Crypto-Coingecko.html"&gt;crypto-currency&lt;/a&gt;and&lt;a href="https://mr-destructive.github.io/techstructive-blog/bash/2021/07/27/BASH-script-dictionary-scrap.html"&gt;dictionary&lt;/a&gt;scrapper with BASH. Web-scrapping can be done with the curl command by fetching toan API if any or any website. We need to search and find the particular fields,classes, or ids the elements the required data might be into and then extractand filter using the tools like grep, sed or awk.&lt;/p&gt;&lt;h3 id="cli-applications"&gt;CLI Applications&lt;/h3&gt;&lt;p&gt;We can make CLI applications like creating a terminal view of existingapplications using their APIs or website. I recently made a CLI for&lt;a href="https://github.com/Mr-Destructive/crossposter"&gt;cross-posting articles&lt;/a&gt; todev. to, hashnode and medium. That is a project still in progress(tons of bugs)but still serving a decent job. Definitely &lt;code&gt;curl&lt;/code&gt; might not be the only commandthat works here, but the project might look so incomplete without &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;There might be other applications as well, who knows there is a lot to do with this command.&lt;/strong&gt; If you know one, please let everyone know in the comments.&lt;/p&gt;&lt;h3 id="references"&gt;References:&lt;/h3&gt;&lt;p&gt;Special Thanks to the creator of the curl command - &lt;a href="https://github.com/bagder"&gt;Magnus Daniel Stenberg&lt;/a&gt; and the developers who are still contributing and maintaining the great project.&lt;/p&gt;&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;&lt;p&gt;So, from this article, we were able to understand the basics of the &lt;code&gt;curl&lt;/code&gt; command and understand its applications in actual programming stuff. Hope you liked it. Thanks for reading and until then Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-variables'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Variables and Types&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-slices'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Slices&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/curl-basics</guid><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: What is it?</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-intro</link><description>Welcome to Django Basics series, in this series we Django is an open-source framework, it is maintained by the Django Software Foundation Organization. You can </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Welcome to Django Basics series, in this series we'll explore the basics of the Django web framework. In this part, we'll understand what this web framework provides and what actually the back-end development consists of. We'll discuss where Django is used and why it is a great choice for beginners as well as experienced developers. &lt;/p&gt;&lt;h2 id="what-is-django"&gt;What is Django?&lt;/h2&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction"&gt;Django&lt;/a&gt; is a back-end web framework. It is based on python which means you have to write most of the project's code in Python. But Django comes with a lot of boilerplate code and thus it becomes quite quick in the development. &lt;/p&gt;&lt;p&gt;Django is an open-source framework, it is maintained by the Django Software Foundation Organization. You can view the source code at &lt;a href="https://github.com/django/django"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="backend"&gt;BACKEND ?&lt;/h3&gt;&lt;p&gt;The term &lt;code&gt;backend&lt;/code&gt; refers to the section or an essential component in Web development, it consists of a &lt;code&gt;database&lt;/code&gt;, &lt;code&gt;API&lt;/code&gt;, and the &lt;code&gt;web server&lt;/code&gt; itself which allows the components to connect together. There might be other components like &lt;code&gt;load-balancers&lt;/code&gt;, &lt;code&gt;middleware&lt;/code&gt;, etc. But the core of web applications revolves around &lt;strong&gt;Databases&lt;/strong&gt; and &lt;strong&gt;API&lt;/strong&gt;. &lt;/p&gt;&lt;h4 id="database"&gt;Database&lt;/h4&gt;&lt;p&gt;A database is a technology or tool that lets you store the data which might be used for serving the actual application, that might be a frontend app, standalone API, etc. The data you want to store might be generally the User Accounts, Content of the App, basically any some form of data(there are exceptions here, you can't directly store media files in DB). The Database allows to make content management and the application dynamic and can be personalized. We have certain types of databases like SQL(relational), NO-SQL, Cloud, Network, etc. The tools of these database management are PostgreSQL, MySQL, MongoDB, HarperDB,etc. These tools allow you to manage your database in a convenient way.  &lt;/p&gt;&lt;h4 id="api"&gt;API&lt;/h4&gt;&lt;p&gt;An API or Application Programming Interface is a way for any frontend app, outside the system to access the database. API allows you to query to the database with GET, POST, DELETE, PUT, etc kinds of operation/requests to the database via the webserver. In API, we have endpoints or (URL routes) at which a particular designated operation can be performed. In APIs, we currently have four primary architectures namely RESTful (quite famous and well established), SOAP, gRPC, and GRAPHQL (new and increasing in popularity). &lt;/p&gt;&lt;h3 id="framework"&gt;Framework?&lt;/h3&gt;&lt;p&gt;A framework is a tool to do a certain task efficiently and avoid some repetitive patterns by abstracting many layers in developing it. Django is a high-level framework which means it abstracts certain processes in making the application. It is ideal for beginners to get up and running with a professional full-stack web application(though it requires some learning).&lt;/p&gt;&lt;p&gt;Django makes the project ideal for experienced as well as beginner web developers. The community and the ecosystem of Python are quite amazing as well as there are a ton of resources to get you through your projects.  &lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png" /&gt;&lt;/p&gt;&lt;p&gt;The above is a high-level view of how Django project development works, the application might be not only one but several other standalone applications working together to make one project in Django. There is a lot of abstraction in Django like the Middleware, Session Management, Security, etc. This should be a good overview of the development map in Django.&lt;/p&gt;&lt;p&gt;Django follows an MVT architecture. Architecture is a standard in developing an application/project for the ease of the workflow and making it an even experience. &lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png" /&gt;&lt;/p&gt;&lt;p&gt;The above diagram depicts the architecture in Django, the components in the Django server include the Model, View, and Template.&lt;/p&gt;&lt;h3 id="model"&gt;Model&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; refers to the design of the database or a blueprint of the data that is bound with the application in the project. &lt;/p&gt;&lt;h3 id="view"&gt;View&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;View&lt;/code&gt; is the part to control the way the data should be presented or the how response should be given back to a request from the server(client)&lt;/p&gt;&lt;h3 id="template"&gt;Template&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;Template&lt;/code&gt; is the markup or the form of document that is to be rendered on the client-side and these are controlled by the views and parsed with the data from the models.&lt;/p&gt;&lt;h2 id="why-would-you-need-it"&gt;Why would you need it?&lt;/h2&gt;&lt;p&gt;As a developer you would find a need to host your projects on the internet, for that learning and deploying a web server from the ground up might be quite complex and time-consuming, Django solves this problem quite well. Not only it is easy but even scalable at a production level, making it quite a robust choice for anyone. And as a bonus thing, it is based on Python, which makes it even easier to write code for people staying at an abstracted perspective in programming. Python has by far the richest sets of libraries and utilities for any domain, this integration with Django is a deadly combination. &lt;/p&gt;&lt;h4 id="batteries-included"&gt;Batteries included?&lt;/h4&gt;&lt;p&gt;Django solves many problems by abstracting away many things like managing the database, rendering dynamic templates(HTML), properly structuring and serving static and media files, well-organized project structure, and many other things. You just have to get the actual thing done i.e. the server logic(or how to design the API/Database models). On top of that, Django has a built-in fully fledged Admin section and a User model. An Admin section is where you can manage the project in a better way without touching the code. It also has certain applications/libraries to make the development of APIs, integrating various databases, forms for posting data, support for Bootstrap a lot easier. It's like a &lt;code&gt;plug and play&lt;/code&gt; kind of thing for the development of web applications. &lt;/p&gt;&lt;p&gt;Hence, it is rightly called the &lt;code&gt;Batteries Included&lt;/code&gt; web framework.&lt;/p&gt;&lt;h3 id="key-features-of-django"&gt;Key features of Django&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Ease in integrating a database&lt;/li&gt;&lt;li&gt;Flawless Django Template Engine&lt;/li&gt;&lt;li&gt;Easy to scale up/down&lt;/li&gt;&lt;li&gt;Python libraries support out of the box&lt;/li&gt;&lt;li&gt;Amazing Documentation / Helpful community&lt;/li&gt;&lt;li&gt;Developing Production-ready projects quickly&lt;/li&gt;&lt;li&gt;Baked in support for testing, APIs, cookies, sessions, etc&lt;/li&gt;&lt;li&gt;Optimized for security, SEO, and DRY(don't repeat yourself) principles&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="applications-built-with-django"&gt;Applications built with Django&lt;/h2&gt;&lt;p&gt;Django is used in quite a famous application that you might be using daily. &lt;/p&gt;&lt;p&gt;Django along with Python powers the top applications on the internet like:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;YouTube&lt;/li&gt;&lt;li&gt;Instagram&lt;/li&gt;&lt;li&gt;Spotify&lt;/li&gt;&lt;li&gt;Disqus&lt;/li&gt;&lt;li&gt;Dropbox&lt;/li&gt;&lt;li&gt;Pinterest&lt;/li&gt;&lt;li&gt;National Geographic&lt;/li&gt;&lt;li&gt;Mozilla&lt;/li&gt;&lt;li&gt;BitBucket&lt;/li&gt;&lt;li&gt;Discovery Network&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You have to say, it is powerful and has firm grounds in the tech industry. It's highly unlikely that Django will be overtaken by another framework at least some years from now.  &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Django is a tool to build web applications fast and in a scalable and Pythonic way&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="what-will-this-series-cover"&gt;What will this series cover?&lt;/h2&gt;&lt;p&gt;Learning Django from the ground up. We will learn the setup, folder structure, architecture of Django, What are apps, views, URLs, models, serializers, static and template files, and there is a ton of stuff to be covered. &lt;/p&gt;&lt;h3 id="resources-to-learn-django"&gt;Resources to learn Django&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.djangoproject.com/start/"&gt;Django Official Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/c/veryacademy/playlists?view=50&amp;amp;sort=dd&amp;amp;shelf_id=2"&gt;Very Academy - Django Playlist&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HHx3tTQWUx0&amp;amp;list=PLCC34OHNcOtqW9BJmgQPPzUpJ8hl49AGy"&gt;Codemy.com - Django&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UmljXZIypDc&amp;amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p"&gt;Corey Schafer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=SIyxjRJ8VNY&amp;amp;list=PLsyeobzWxl7r2ukVgTqIQcl-1T0C2mzau"&gt;Telusko&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From this article, we were able to understand the Django framework, what is it, and why it should be used on a high level. Further, we explored the web application(backend) components which are targeted by Django for ease of developing applications. We also saw the baseline architecture that Django uses to make projects. &lt;/p&gt;&lt;p&gt;In the next section, we'll start the actual coding in Django, firstly how to set up the environment and understanding the folder structure, and so on. So I hoped you enjoyed the article. Thank you for reading. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: What is it?&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-keymaps'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Keymapping Guide&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-intro</guid><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: Setup and Installation</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-setup</link><description>The crucial aspect of starting to learn any framework is the ease to set it up and Django by far is the easiest of the options out there. There is just a few li</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;The crucial aspect of starting to learn any framework is the ease to set it up and Django by far is the easiest of the options out there. There is just a few lines of code to install django if you already have python installed in your system. In this article, we see how to setup a django project along with a virtual environment. &lt;/p&gt;&lt;p&gt;If you already have python and pip installed, you can move on to the &lt;a href="#setting-up-virtual-environment-in-python"&gt;virtual environment setup&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="installing-python-and-pip"&gt;Installing Python and PIP&lt;/h2&gt;&lt;p&gt;Django is a python based framework so that makes sense to have Python installed along with its package manager to use Django.  &lt;/p&gt;&lt;p&gt;To install Python, you can visit the official &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; website to download any relevant version for your system (recommended 3.7 and above). &lt;/p&gt;&lt;p&gt;Mostly the Python installation comes with the option to install &lt;code&gt;pip&lt;/code&gt;(python's package manager) but if you missed that, that's fine, you can install the &lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;get-pip.py&lt;/a&gt; file into your system and run the below code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python get-pip.py   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure the include the relative path to the file if you are not in the same folder as the file.&lt;/p&gt;&lt;p&gt;So, that should be python setup in your local machine. To check that python was installed correctly, type in &lt;code&gt;python --version&lt;/code&gt; and &lt;code&gt;pip --version&lt;/code&gt; to check if they return any version number. IF they do, Congratulations !! You installed Python successfully and if not, don't worry there might be some simple issues that can be googled out and resolved easily. &lt;/p&gt;&lt;hr /&gt;&lt;p&gt;Let's move on to the actual setting of the Django project set up.   &lt;/p&gt;&lt;h2 id="setting-up-virtual-environment-in-python"&gt;Setting up Virtual Environment in python&lt;/h2&gt;&lt;p&gt;Virtual Environment is a software which isolates the installation of dependencies and libraries for a specific project, making it a clean and safe environment for deployment as well as maintenance. &lt;/p&gt;&lt;p&gt;In Python, we have a virtual environment package known as &lt;code&gt;virtualenv&lt;/code&gt; that does this thing. It is for installing the Python related packages into a isolated folder. So, we can install the &lt;code&gt;virtualenv&lt;/code&gt; package in python by following the following steps:&lt;/p&gt;&lt;h3 id="installing-virtualenv"&gt;Installing Virtualenv&lt;/h3&gt;&lt;p&gt;Firstly, install the virtual environment package, it's not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use &lt;code&gt;pip3&lt;/code&gt; or &lt;code&gt;pip -m&lt;/code&gt;, or however you install normal python modules. This just installs the python virtual environment, we need to create a virtual environment in the current folder.&lt;/p&gt;&lt;h3 id="creating-a-virtual-environment"&gt;Creating a virtual environment&lt;/h3&gt;&lt;p&gt;We need to create the environment so as to give the Python interpreter an indication to consider the current folder as an isolated Python environment. We need to create a virtual environment in the current folder, so for that navigate to the folder where you want to create the project and enter the following command: &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv venv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, &lt;code&gt;venv&lt;/code&gt; can be anything like &lt;code&gt;env&lt;/code&gt; just for your understanding and simplicity it's a standard name kept for the same. After this, you will see a folder of the same name i.e. &lt;code&gt;venv&lt;/code&gt; or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. &lt;/p&gt;&lt;h3 id="activating-virtual-environment"&gt;Activating Virtual environment&lt;/h3&gt;&lt;p&gt;Now, we need to activate the virtual environment, this means that any thing installed in the prompt with the virtualenv activated will be isolated from the entire system and will be installed on in the virtual environment. To activate the environment, we can use the command :&lt;/p&gt;&lt;h4 id="for-linuxmacos"&gt;for Linux/macOS :&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source venv/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="for-windows"&gt;for Windows:&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;venv\Scripts\activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this, your command prompt will have a &lt;code&gt;(venv)&lt;/code&gt; attached in the beginning. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&lt;/p&gt;&lt;h2 id="installing-django"&gt;Installing Django&lt;/h2&gt;&lt;p&gt;After the virtual environment is set up and activated, you can install Django and get started with it. Django is a python module or package, which can be easily installed using its package manager &lt;code&gt;pip&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Install Django using pip:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install django&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="create-a-django-project"&gt;Create a Django Project&lt;/h2&gt;&lt;p&gt;After the installation is completed, you can start a Django project in the current folder from the django package we installed. There are several commands available in the django module which you can execute in the command line that we'll discuss later.For now, we will use the command &lt;code&gt;startproject&lt;/code&gt; this is one of the &lt;a href="https://github.com/django/django/tree/main/django/core/management/commands"&gt;management commands&lt;/a&gt; in Django. The &lt;a href="https://docs.djangoproject.com/en/3.2/ref/django-admin/"&gt;django-admin&lt;/a&gt; is a command line utility for doing the administrative tasks related to Django.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;django-admin startproject myproject&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;myproject&lt;/code&gt; can be your project name. After this, you will see one new folder and one file pop up.&lt;/p&gt;&lt;p&gt;Namely, the &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; folder and &lt;code&gt;manage.py&lt;/code&gt; file. We don't have to touch the &lt;code&gt;manage.py&lt;/code&gt; file but we use it in most of the commands to use the Django functionalities, it is quite similar to the &lt;code&gt;django-admin&lt;/code&gt; command. &lt;/p&gt;&lt;p&gt;You can now run your basic server using the command : &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OR&lt;/p&gt;&lt;p&gt;You can use &lt;code&gt;djagno-admin&lt;/code&gt; command, but you need to set certain environment variables and modify the settings.py file as per the project-name. You can use the &lt;code&gt;django-admin&lt;/code&gt; as the steps given in the django &lt;a href="https://docs.djangoproject.com/en/3.2/ref/django-admin/#cmdoption-settings"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The output of the command &lt;code&gt;python manage.py runserver&lt;/code&gt; should be visible in the browser at &lt;code&gt;https://127.0.0.1:8000&lt;/code&gt; as below :&lt;/p&gt;&lt;p&gt;&lt;img alt="Django-Base-Project" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/screenshotr_2021-11-20T15-40-50.png" /&gt;&lt;/p&gt;&lt;p&gt;That's it the base django project is installed in your system. To stop the server simply press &lt;code&gt;Ctrl+C&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Follow the below GIF for a clear understanding of those instructions:&lt;/p&gt;&lt;p&gt;&lt;img alt="Django-basics-part2-setup" src="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/djp2.gif" /&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="quick-setup-script"&gt;Quick-Setup-Script&lt;/h2&gt;&lt;p&gt;You can avoid manually typing the commands once you get the idea of the process in setting up a django project by executing a simple shell script (for Linux/macOS) or a batch script (for Windows). The script looks something like:&lt;/p&gt;&lt;p&gt;For Linux/macOS:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;mkdir &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;pip install virtualenvvirtualenv venv&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activatepip install djangodjango-admin startproject &lt;span class="nv"&gt;$1&lt;/span&gt; .clear&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save as commands.sh file&lt;/p&gt;&lt;p&gt;For Windows: &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;mkdir&lt;/span&gt; &lt;span class="nv"&gt;%1&lt;/span&gt; &lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;%1&lt;/span&gt;pip install virtualenvvirtualenv env&lt;span class="k"&gt;call&lt;/span&gt; env\Scripts\activatepip install djangodjango-admin startproject &lt;span class="nv"&gt;%1&lt;/span&gt; .&lt;span class="k"&gt;cls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;save as commands.bat file&lt;/p&gt;&lt;p&gt;For further instructions you can checkout the &lt;a href="https://github.com/Mr-Destructive/django-quick-setup-script"&gt;GitHub repository&lt;/a&gt; or a detailed &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/web-development/python/2021/08/15/Django-Quick-Setup.html"&gt;article&lt;/a&gt; about it.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From this section, we were able to setup the Django project in our local system. In the next part, we will cover the &lt;code&gt;folder structure&lt;/code&gt; of the Django project. We won't directly go into the code part because that is very easy once you understand the flow of the framework and its internal working. So, thanks for reading and Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-conditionals-loops'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Conditionals and Loops&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/ml-intro'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;What is Machine Learning?&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-setup</guid><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: Folder Structure</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-folder-struct</link><description>After setting up the development for the Django framework, we will explore the project structure. In this part, we understand the structure along with the vario</description><content:encoded>&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;&lt;p&gt;After setting up the development for the Django framework, we will explore the project structure. In this part, we understand the structure along with the various components in the Project as well as individual apps. We will understand the objective of each file and folder in a brief and hopefully by the end of this part, you'll be aware of how the Django project is structured and get a good overview of the flow of development in the Django project.&lt;/p&gt;&lt;h2 id="project-structure"&gt;Project Structure&lt;/h2&gt;&lt;p&gt;We will create a Django project from scratch and understand it from the ground up. As in the previous part, I've shown you how to create a project. In this section, we'll create a project &lt;code&gt;Blog&lt;/code&gt;. TO do that, we'll create a folder called &lt;code&gt;Blog&lt;/code&gt;, install and set up the virtual environment as discussed and explained in the previous part.&lt;/p&gt;&lt;p&gt;After the virtual environment is created and activated, we'll create the project.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;django-admin startproject Blog .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;After this command, if we see the directory structure, it should look something like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="Basic Django folder structure" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637661221/blogmedia/tree_ak3mgm.png" /&gt;&lt;/p&gt;&lt;p&gt;As we can see there are 6 files and a folder. The base folder is for the configuration at a project level. I have actually not shown the &lt;code&gt;venv&lt;/code&gt; ( using &lt;code&gt;-I venv&lt;/code&gt; option on tree command) as it is out of the scope of this series. The &lt;code&gt;venv&lt;/code&gt; folder contains modules and scripts which are installed in the virtual environment. &lt;/p&gt;&lt;p&gt;So, lets break the folder structure down into understandable files.&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637745146/blogmedia/16_qenomh.png" /&gt;&lt;/p&gt;&lt;h3 id="managepy"&gt;manage.py&lt;/h3&gt;&lt;p&gt;Our project consists of a &lt;code&gt;manage.py&lt;/code&gt; file which is to execute several commands at a project level. We do not have to edit any of the contents of this file (never). It is the file that allows us to run the server, apply migrations, create an Admin account, create apps, and do a lot of crucial things with the help of python. &lt;/p&gt;&lt;p&gt;So, it's just the command-line utility that helps us interact with the Django project and applications for configurations. &lt;/p&gt;&lt;h3 id="project-folder"&gt;Project Folder&lt;/h3&gt;&lt;p&gt;Now, this is the folder where the project-configuration files are located. &lt;strong&gt;The name of the folder is the same as that of the project&lt;/strong&gt;. This makes the folder unique and hence creates a standard way to store files in a structured way. &lt;/p&gt;&lt;p&gt;The folder is a python package which is indicated by the &lt;code&gt;__init__.py&lt;/code&gt; file. The purpose of the &lt;code&gt;__init__.py&lt;/code&gt; file is to tell the Python environment that the current folder is a Python package. &lt;/p&gt;&lt;p&gt;The folder consist of several files(5 files):&lt;/p&gt;&lt;h3 id="settingspy"&gt;settings.py&lt;/h3&gt;&lt;p&gt;This is a really important file from the project's point of view. This contains certain configurations that can be applied to the rest of the project (or all the apps). &lt;/p&gt;&lt;p&gt;In the &lt;code&gt;settings.py&lt;/code&gt; file, we can do some of the following operations :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;List of &lt;code&gt;applications&lt;/code&gt; that might be pre-installed or user-defined.&lt;/li&gt;&lt;li&gt;Configure the Middleware. &lt;/li&gt;&lt;li&gt;Configure and connect the Database.&lt;/li&gt;&lt;li&gt;Configure Templates/Static/Media files.&lt;/li&gt;&lt;li&gt;Custom Configuration for Time-Zones, Emails, Authentication, CORS, etc.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Besides the above-mentioned options, there is a lot of project-specific configurations or application-specific settings as well. &lt;/p&gt;&lt;p&gt;Here, you'll have a question,&lt;/p&gt;&lt;h3 id="what-is-an-application"&gt;WHAT IS AN APPLICATION?&lt;/h3&gt;&lt;p&gt;An application is a component of a project. There are also Python packages that are made to be used as a Django app that allows reusing the components. But when we are developing the project, we can break a complex process/project into individual apps. &lt;/p&gt;&lt;p&gt;For Example, a project of &lt;code&gt;Blogging Platform&lt;/code&gt; might have an application for &lt;code&gt;posts&lt;/code&gt;, &lt;code&gt;users&lt;/code&gt;, &lt;code&gt;api&lt;/code&gt;, &lt;code&gt;homepage&lt;/code&gt;, etc. So the project &lt;code&gt;Blogging Platform&lt;/code&gt; might have separated the components like its API, Homepage, Post, Users, and so on to keep the development independent and well organized.&lt;/p&gt;&lt;p&gt;So, we can understand apps as separate components of a large project. We can also understand apps as reusable components, you can use the &lt;code&gt;posts&lt;/code&gt; app in another project or in a particular app of the same project making it easier and faster to create the project.&lt;/p&gt;&lt;h3 id="urlspy"&gt;urls.py&lt;/h3&gt;&lt;p&gt;This is a file for managing the &lt;code&gt;URL&lt;/code&gt; routes of the project. We'll discuss URLs and Views in their own part in the series. This file basically has a list of URLs that should be paired with a &lt;code&gt;view&lt;/code&gt; or any other function. In the project folder, the URL patterns mostly link a baseurl to the URL file of the particular application. Don't worry if you can't get some of the terms, you'll clearly understand when we see them in the future parts of this series.&lt;/p&gt;&lt;h3 id="wsgipy"&gt;wsgi.py&lt;/h3&gt;&lt;p&gt;WSGI or Web Server Gateway Interface is a file that is used to configure the project for production or deployment. This takes care of the server when we deploy into production. It is a Synchronous Web Server i.e. it listens to only one request and responds to that at a time.&lt;/p&gt;&lt;p&gt;Some of the common WSGI servers are &lt;a href="https://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/modwsgi/"&gt;Apache&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/uwsgi/"&gt;uWSGI&lt;/a&gt;, &lt;a href="https://docs.cherrypy.dev/"&gt;cherrypy&lt;/a&gt;, &lt;a href="https://github.com/buchuki/aspen/blob/master/aspen/wsgi.py"&gt;Aspen&lt;/a&gt;, etc.&lt;/p&gt;&lt;h3 id="asgipy"&gt;asgi.py&lt;/h3&gt;&lt;p&gt;ASGI or Asynchronous Server Gateway Interface is also similar to the WSGI file but it serves as an asynchronous web server. This file handles the requests which might be asynchronous i.e. the web server can respond to multiple requests and respond to them at a time. We can even send tasks to the background using this type of server configuration. &lt;/p&gt;&lt;p&gt;Some of the common ASGI servers are &lt;a href="https://www.uvicorn.org/"&gt;Uvicorn&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/daphne/"&gt;Daphne&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/hypercorn/"&gt;Hypercorn&lt;/a&gt;, etc.&lt;/p&gt;&lt;h2 id="creating-a-django-project-application"&gt;Creating a Django Project Application&lt;/h2&gt;&lt;p&gt;So, let's create an application to see the structure of the basic app in Django. To create an app, we can use the &lt;code&gt;startapp&lt;/code&gt; option with the &lt;code&gt;python manage.py&lt;/code&gt; command followed by the name of the app like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py startapp name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, &lt;code&gt;name&lt;/code&gt; can be any app name you'd like to give. &lt;/p&gt;&lt;h2 id="application-structure"&gt;Application Structure&lt;/h2&gt;&lt;p&gt;After creating an app, let the name be anything it should have a similar structure as :&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637731715/blogmedia/apptree_zr12s0.png" /&gt;&lt;/p&gt;&lt;p&gt;As we can see there are a couple of things to be discussed here. The main components that we are going to work on within developing the application in the project are: &lt;code&gt;models.py&lt;/code&gt;, &lt;code&gt;views.py&lt;/code&gt;, &lt;code&gt;test.py&lt;/code&gt;. There are other files that we will create manually like the &lt;code&gt;urls.py&lt;/code&gt;, &lt;code&gt;serializers.py&lt;/code&gt;, etc.&lt;/p&gt;&lt;p&gt;You also need to add the name of the app in quotes in the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; list in the &lt;code&gt;settings.py&lt;/code&gt; file. Something like this:&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637748258/blogmedia/installed_apps_ozir1p.png" /&gt;&lt;/p&gt;&lt;p&gt;The application files can be summarized as :&lt;/p&gt;&lt;p&gt;&lt;img alt="App structure summary" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637745151/blogmedia/17_xyefpq.png" /&gt;&lt;/p&gt;&lt;p&gt;Let us look at each of the files and folders in the application:&lt;/p&gt;&lt;h3 id="modelspy"&gt;models.py&lt;/h3&gt;&lt;p&gt;As the same suggests, we need to define the model of a database here. The actual structure and the relationship are created with the help of python and Django in this file. This is the place where the crust of the web application might be defined. &lt;/p&gt;&lt;p&gt;There are various aspects in creating a model like &lt;code&gt;Fields&lt;/code&gt;, &lt;code&gt;Relationship&lt;/code&gt;, &lt;code&gt;Meta-data&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, etc. These are defined with the help of python along with the Django Models. In most cases, a model is like a single &lt;code&gt;table&lt;/code&gt; in an actual database. &lt;/p&gt;&lt;p&gt;The file is quite important and interesting as it abstracts away the manual work of typing &lt;code&gt;SQL&lt;/code&gt; queries to create the database. &lt;/p&gt;&lt;h3 id="migrations"&gt;migrations&lt;/h3&gt;&lt;p&gt;This migrations folder is a way for Django to keep track of the changes in the database. At every &lt;code&gt;migration&lt;/code&gt; or actual query that runs to create the table or the database structure. There might be multiple steps or iteration of the database, this folder stores those pieces of information.&lt;/p&gt;&lt;p&gt;To make an analogy, it is like a &lt;code&gt;.git&lt;/code&gt; folder but for keeping track of the migrations or changes to the database. &lt;/p&gt;&lt;h3 id="adminpy"&gt;admin.py&lt;/h3&gt;&lt;p&gt;This is the file for performing the operations at the admin level. We generally use this file to register the models into the &lt;code&gt;Admin section&lt;/code&gt; without touching any frontend part. It provides a built-in &lt;code&gt;CRUD&lt;/code&gt;(Create Read Update Delete) functionality to the model. This is really good for testing up the model manually before putting effort into the frontend part. &lt;/p&gt;&lt;p&gt;Other than this, we can customize the admin section with this file. We will see the details in the part of the &lt;code&gt;Admin section&lt;/code&gt; in this series.&lt;/p&gt;&lt;h3 id="viewspy"&gt;views.py&lt;/h3&gt;&lt;p&gt;This is a file, that acts as a controller/server logic for the Django framework. We can define functions and classes as a response to the incoming requests from the server via the &lt;code&gt;urls.py&lt;/code&gt; file. There are a couple of approaches when it comes to writing the format of the functions like &lt;code&gt;class-based views&lt;/code&gt;, &lt;code&gt;function-based views&lt;/code&gt;, and others depending on the type of operation is been done.&lt;/p&gt;&lt;p&gt;As said earlier, it is the &lt;code&gt;V&lt;/code&gt;(View) in the &lt;code&gt;MVT&lt;/code&gt; architecture in Django Framework. This is the place where we write the logic from the server-side to let's say render HTML pages(templates), query to the database with CRUD operations, return an HTTP response, etc.  &lt;/p&gt;&lt;h3 id="urlspy_1"&gt;urls.py&lt;/h3&gt;&lt;p&gt;This is the file in which a list of URL patterns is mapped to the particular view function. This &lt;code&gt;urls.py&lt;/code&gt; is specific to the app and it might be prefixed with the URL route mentioned in the project folder's &lt;code&gt;urls.py&lt;/code&gt; file.  &lt;/p&gt;&lt;p&gt;So, not going much deeper, simply to put it's a map of a particular URL path with a function associated to it which gets triggered(called) when the user visits the URL. &lt;/p&gt;&lt;h3 id="testspy"&gt;tests.py&lt;/h3&gt;&lt;p&gt;This is a file where we can perform automated tests on the application. This might be in integration with models, other applications, project settings, etc. This is a component that Django makes it to have easy and quick unit testing along with the Python modules for advanced testing. It is quite easier to integrate python modules and libraries into almost anything in the Django Project.&lt;/p&gt;&lt;h3 id="appspy"&gt;apps.py&lt;/h3&gt;&lt;p&gt;This is the file for app-level configuration. We can change the default fields, app name, email settings, other module-specific settings that can be used in the models, views, or in another place that can be defined here. &lt;/p&gt;&lt;h2 id="other-foldersfiles"&gt;Other Folders/files&lt;/h2&gt;&lt;p&gt;Apart from the app folder and the project folder, we may have other folders like the &lt;code&gt;templates&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;media&lt;/code&gt;, etc. There are also python package-specific folders for which you may need to create folders.&lt;/p&gt;&lt;h3 id="templates"&gt;Templates&lt;/h3&gt;&lt;p&gt;There are a couple of standard ways you can set up your Templates folder. Either in the root project or inside individual apps. The choice is yours, however, you feel comfortable. I personally use only one template folder in the root directory, but you can keep it wherever you want, but these two are the standard ones for ease of reading and maintaining the projects.&lt;/p&gt;&lt;h3 id="static"&gt;Static&lt;/h3&gt;&lt;p&gt;The Static folder is the folder in which you store your &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;javascript&lt;/code&gt;, and &lt;code&gt;images&lt;/code&gt;(images or media files that are used in the templates). This is a good way to improve the performance as in the production the webserver collects all the static files and stores them in a single place for responding to the requests. The template folder if present in the root folder, has a sub-folder as the application names and inside the &lt;code&gt;app-name&lt;/code&gt;, we put in all the &lt;code&gt;.html&lt;/code&gt; or other template files. &lt;/p&gt;&lt;p&gt;As similar to the &lt;code&gt;template&lt;/code&gt; folder, the location can be modified or set as a configuration from the settings.py file. Usually, the static files(&lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;js&lt;/code&gt;, etc) are stored in the root folder with app names as subfolders. &lt;/p&gt;&lt;h3 id="media"&gt;Media&lt;/h3&gt;&lt;p&gt;The media folder is where you can store the media-specific to the user or the application processed data. For example, we can store the profile pictures of users, email attachments if it's an email application, thumbnails of the posts for a blogging platform, etc. &lt;/p&gt;&lt;p&gt;The configuration of the Media folder is quite similar to the Static folder but it has certain additional configurations. We'll look at them in their sections in this series.&lt;/p&gt;&lt;p&gt;Phew! That was all the folder structure you need to get started with Django. There might be other folders and files specific for project, application, python modules but it won't be much hard to understand those as well.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From this part, we were able to understand the folder structure of the Django framework. We explored the various files and folders with their use cases and their purpose. So, by reading the above description of the files and folders you might have got a rough idea about the flow of the development cycle in Django.&lt;/p&gt;&lt;p&gt;In the next part, we'll start with actually getting hands dirty in the code and making our first view. Thank you for reading and Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/django-basics-models'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Creating Models&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/oop-cpp-p2'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Object-Oriented Programming in C++: Access Modifiers&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-folder-struct</guid><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: Views and URLS</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-views-urls</link><description>After getting familiar with the folder structure of the Django framework, we Views are the functions written in python as a logic control unit of the webserver </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;After getting familiar with the folder structure of the Django framework, we'll create our first view in an app. The basics of creating and mapping a view with a URL will be cleared by the end of this part.&lt;/p&gt;&lt;h2 id="creating-views"&gt;Creating Views&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Views are the functions written in python as a logic control unit of the webserver&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To create a view or typically-like function, we need to write a function in the &lt;code&gt;views.py&lt;/code&gt; file inside of the application folder. The function name can be anything but should be a sensible name as far as its usability is concerned. Let's take a basic example of sending an HTTP response of "Hello World".&lt;/p&gt;&lt;h4 id="project_nameapp_nameviewspy"&gt;project_name/app_name/views.py&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yes, we are simply returning an HTTP Response right now, but rendering Templates/HTML Documents is quite similar and easy to grasp in Django. So, this is a view or a piece of logic but there is a piece missing in this. Where should this function be used? Of course a URL i.e a path to a web server.&lt;/p&gt;&lt;p&gt;We'll see how to map the views to an URL in Django in the next section&lt;/p&gt;&lt;h2 id="mapping-the-views-to-a-url"&gt;Mapping the Views to a URL&lt;/h2&gt;&lt;p&gt;We need to first create a &lt;code&gt;urls.py&lt;/code&gt; file in the application folder to create a map of the URL to be mapped with the view. After creating the file in the same app folder as the &lt;code&gt;views.py&lt;/code&gt;, import the function in the view into the file.&lt;/p&gt;&lt;h4 id="project_nameapp_nameurlspy"&gt;project_name/app_name/urls.py&lt;/h4&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The path can be anything you like but for simplicity, we'll keep it blank('') for now.   &lt;/p&gt;&lt;p&gt;Now, you have the path for your view to work but it's not linked to the main project. We need to link the app urls to the project urls. &lt;/p&gt;&lt;p&gt;To link the urls of your app to the main project folder, you need to just add a single line of code in the &lt;code&gt;urls.py&lt;/code&gt; file of the project folder.&lt;/p&gt;&lt;p&gt;In projectname folder -&amp;gt; urls.py&lt;/p&gt;&lt;h4 id="project_nameurlspy"&gt;project_name/urls.py&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You need to add the line &lt;code&gt;path('', include('post.urls')),&lt;/code&gt; and also import the &lt;code&gt;include&lt;/code&gt; function from &lt;code&gt;django.urls&lt;/code&gt;. This additional statement includes the urls or all the &lt;code&gt;urlpatterns&lt;/code&gt; in the &lt;code&gt;post&lt;/code&gt; app from the &lt;code&gt;urls.py&lt;/code&gt; file into the project's url-routes. &lt;/p&gt;&lt;p&gt;Here, the URL path can be anything like &lt;code&gt;'home/'&lt;/code&gt;, &lt;code&gt;'about/'&lt;/code&gt;, &lt;code&gt;'posts/'&lt;/code&gt;, etc. but since we are just understanding the basics, we'll keep it &lt;code&gt;''&lt;/code&gt; i.e. the root URL. &lt;/p&gt;&lt;p&gt;You can also see that there is another route in our project &lt;code&gt;'admin/'&lt;/code&gt; which is a path to the admin section. We'll explore this path and the entire Admin Section in some other part of this series.&lt;/p&gt;&lt;p&gt;Now if you start the server and visit the default URL i.e &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;, you will see a simple HTTP message &lt;code&gt;Hello World&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt="Hello World view" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png" /&gt;&lt;/p&gt;&lt;h2 id="breaking-the-path-function-in-urlpatterns"&gt;Breaking the &lt;code&gt;path&lt;/code&gt; function in urlpatterns&lt;/h2&gt;&lt;p&gt;The path function in the urlpatterns takes in at least 2 parameters, i.e. the URL pattern and the view of any other function that can be related to the webserver. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;path( &amp;#39; &amp;#39;,   view,    name )       ^       ^        ^        |       |        |       |       |     url_name       |   function_name   url_path    &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="url-path"&gt;URL path&lt;/h3&gt;&lt;p&gt;The URL Path is the pattern or literally the path which you use in the Browser's search bar. This can be static i.e. some hard-coded text like &lt;code&gt;home/&lt;/code&gt;, &lt;code&gt;user/&lt;/code&gt;, &lt;code&gt;post/home/&lt;/code&gt;, etc. and we can also have dynamic URLs like &lt;code&gt;post/&amp;lt;pk:id&amp;gt;/&lt;/code&gt;, &lt;code&gt;user/&amp;lt;str:name&amp;gt;/&lt;/code&gt;, etc. here the characters &lt;code&gt;&amp;lt;pk:id&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;str:name&amp;gt;&lt;/code&gt; will be replaced by the actual id(integer/primary key) or the name(String) itself. &lt;/p&gt;&lt;p&gt;This is used in an actual web application, where there might be a user profile that needs the unique user-id to render it specifically for that user. The User-Profile is just an example, it can anything like posts, emails, products, any form of a content-driven application. &lt;/p&gt;&lt;h3 id="view"&gt;View&lt;/h3&gt;&lt;p&gt;The view or the function is the name of the function that will be attached to that URL path. That means once the user visits that URL, the function is literally called. &lt;strong&gt;View is just a fancy word for a function(or any logic basically).&lt;/strong&gt; There is a lot to be covered when it comes to &lt;code&gt;View&lt;/code&gt; as there are a lot of ways to create it, there are two types of views, how to use them for various use-cases that can be learned along the way because it is a topic where the crust of Django exists.  &lt;/p&gt;&lt;p&gt;We'll learn to create different implementations and structure our views, for time-being just consider them as the unit where every operation on the web can be performed. We can create other standalone functions in python to work with the views to make it a bit structured and readable.&lt;/p&gt;&lt;h3 id="url-name"&gt;URL Name&lt;/h3&gt;&lt;p&gt;This is an optional parameter to the path function as we do not mandatorily need to give the URL map a name. This can be really useful in multi-page application websites where you need to link one page to another and that becomes a lot easier with the URL name. We do not need this right now, we'll touch it when we'll see the Django Templating Language. &lt;/p&gt;&lt;h2 id="example-views"&gt;Example Views&lt;/h2&gt;&lt;p&gt;Let's create some examples to understand the working of Views and URLs. We'll create a dynamic URL and integrate the Python module in the views to get familiarized with the concept.&lt;/p&gt;&lt;h3 id="dynamic-urls"&gt;Dynamic URLs&lt;/h3&gt;&lt;p&gt;We can use the dynamic URLs or placeholder variables to render out the content dynamically. Let's create another set of View and URL map.&lt;/p&gt;&lt;h4 id="project_nameapp_nameviewspy_1"&gt;project_name/app_name/views.py&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Welcome, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This view or function takes an additional argument called &lt;code&gt;name&lt;/code&gt; and in response, it just says &lt;code&gt;Welcome, name&lt;/code&gt; where the name can be any string. Now after creating the view, we need to map the view to a URL pattern, We'll add a path for this greet function. &lt;/p&gt;&lt;h4 id="project_nameapp_nameurlspy_1"&gt;project_name/app_name/urls.py&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;greet/&amp;lt;str:name&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;greet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see how we have created the url-pattern here. The greet part is static but the &lt;code&gt;&amp;lt;str:name&amp;gt;&lt;/code&gt; is a variable or just a URL parameter to be passed to the view as the value of the variable &lt;code&gt;name&lt;/code&gt;. We have also given the URL map a name called greet, just for demonstration of its creation. &lt;/p&gt;&lt;p&gt;You'll get an error, 100% if you are blindly following me! Didn't you forget something?&lt;/p&gt;&lt;p&gt;Import the greet function from the views like so:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, after we visit the URL &lt;code&gt;https://127.0.0.1:8000/greet/harry&lt;/code&gt;, you should see a response &lt;code&gt;Welcome, harry&lt;/code&gt; as simple as that. &lt;/p&gt;&lt;p&gt;&lt;img alt="Greet URL Demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif" /&gt;&lt;/p&gt;&lt;p&gt;Now, how is this working? We see the view first. The function takes two parameters one is most common the request which stores the meta-data about the request, the other parameter is the name that we will be use to respond to the server dynamically. The name variable is used in the string with the HttpResponse function to return a simple string.&lt;/p&gt;&lt;p&gt;Then, in the URLs, we need to find a way to pass the variable name to the view, for that we use the &lt;code&gt;&amp;lt;string:name&amp;gt;&lt;/code&gt; which is like a URL parameter to the view. The path function automatically parses the name to the appropriate view and hence we call the greet function with the name variable from the URL.&lt;/p&gt;&lt;h3 id="using-pythonic-things"&gt;Using Pythonic things&lt;/h3&gt;&lt;p&gt;We'll use some Python libraries or functions in the Django App. In this way, we'll see it's nearly no-brainer to use Python functions or libraries in the Django framework as indeed all files which we are working with are Python files.&lt;/p&gt;&lt;h4 id="project_nameapp_nameviewspy_2"&gt;project_name/app_name/views.py&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It&amp;#39;s &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This view is using the random module, you can pretty much use other web-compatible modules or libraries. We have used the &lt;code&gt;random.randint&lt;/code&gt; function to generate the pseudo-random number between 1 and 6. We have used the f-string (&lt;code&gt;f"{variable}"&lt;/code&gt;)styled Response string as int is not compatible with the response concatenation. So this is the logic of our map, now we'll need to link it to a URL-path. &lt;/p&gt;&lt;h4 id="project_nameapp_nameurlspy_2"&gt;project_name/app_name/urls.py&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;throw/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, import the view name from the views as &lt;code&gt;from .views import dice&lt;/code&gt; also add other views if present. Now if we go to the URL &lt;code&gt;https://127.0.0.1:8000/throw/&lt;/code&gt;, we shall see a random number in the response. This is how we used Python to make the logic of our view.&lt;/p&gt;&lt;p&gt;&lt;img alt="Dice URL Demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif" /&gt;&lt;/p&gt;&lt;p&gt;So, that was the basics of creating and mapping views and urls. It is the most fundamental of the workflow in Django project development. You need to get familiar with the process of mapping Views and urls before diving into Templates, Models, and other complex stuff. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From this part of the series, we touched upon the basics of views and URLs. The concept of mapping URLs and views might have been much cleared and it will be even gripping after we explore the Template handling and Static files in the next part. If you have any queries or mistakes I might have made please let me know. Thanks for reading and Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-movement-speed'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Enhancing Movement Speed&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-setup-script'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Quick Setup Script&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-views-urls</guid><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: Templates</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-templates</link><description>After learning the basics of views and URLs, we can now move on to the next concept i.e. Templates. In Django, Templates are quite an important component for th</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;After learning the basics of views and URLs, we can now move on to the next concept i.e. Templates. In Django, Templates are quite an important component for the application as it acts as the &lt;code&gt;frontend&lt;/code&gt; for the web application. With the help of templates and some features provided by Django, it becomes very intuitive and simple to make dynamic web content.In this part, we understand what are templates and what is the way to render them. &lt;/p&gt;&lt;h2 id="what-are-templates"&gt;What are Templates&lt;/h2&gt;&lt;p&gt;Templates are simply a &lt;code&gt;html&lt;/code&gt; document or kind of a wireframe for content to be displayed for the web app. Templates allow us to render some more relevant pieces of data rather than simple text HTTP responses as we did earlier. We can even re-use certain components of a template in other using the Django Templating Language (more on this later). &lt;/p&gt;&lt;p&gt;So, using HTML templates, we can write a complete Webpage. If you are unfamiliar with HTML, you can check out the basics of HTML with this &lt;a href="https://www.youtube.com/playlist?list=PL081AC329706B2953"&gt;playlist&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Even If you are not familiar with HTML, this tutorial might be quite basic and not overwhelm you with all the tags.&lt;/p&gt;&lt;h2 id="creating-templates"&gt;Creating Templates&lt;/h2&gt;&lt;p&gt;To create a Template, we can write a simple HTML document like the below:&lt;/p&gt;&lt;p&gt;Create a folder &lt;code&gt;templates&lt;/code&gt; in the base folder, inside the templates folder, create a file &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;templates\index.html&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a simple HTML template, with the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags. As Django is a framework, there is a standard for storing all the templates for the project and application. There are a couple of standard of options:- One of which is creating a &lt;code&gt;templates&lt;/code&gt; folder in the root folder as discussed earlier, also we need to modify the &lt;code&gt;project_name/settings.py&lt;/code&gt; file. &lt;/p&gt;&lt;p&gt;Inside the &lt;code&gt;settings.py&lt;/code&gt; file, we need to locate the &lt;code&gt;TEMPLATES&lt;/code&gt; section and modify as below:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),],&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;APP_DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;context_processors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.template.context_processors.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.template.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="p"&gt;],&lt;/span&gt;        &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this snippet, we have changed the &lt;code&gt;DIRS&lt;/code&gt; option to search the templates in the folder &lt;code&gt;templates&lt;/code&gt; in the root directory. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;The other standard is creating a templates folder in each application.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We can create the templates folder in each application instead of a single folder. &lt;/p&gt;&lt;h2 id="rendering-templates"&gt;Rendering Templates&lt;/h2&gt;&lt;p&gt;After creating a template and making the required settings to make sure Django is able to pick up those templates, we need to work with views and URLs to actually render those templates. &lt;/p&gt;&lt;p&gt;There are a couple of ways to render templates in Django and some of them are discussed below:&lt;/p&gt;&lt;h3 id="using-templateview"&gt;Using TemplateView&lt;/h3&gt;&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/3.2/ref/class-based-views/base/#django.views.generic.base.TemplateView"&gt;TemplateView&lt;/a&gt; is a class which is comes with &lt;code&gt;django.views.generic&lt;/code&gt; library. This class allows us to render a template by providing in the name of the template, arguments or variables to be parsed, and so on. &lt;/p&gt;&lt;p&gt;The simplest way to render a template is by the following way:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to import the &lt;code&gt;TemplateView&lt;/code&gt; from the &lt;code&gt;django.core.generic&lt;/code&gt; so as to use the class for rendering the template. &lt;/p&gt;&lt;p&gt;The &lt;code&gt;TemplateView&lt;/code&gt; class takes in a couple of arguments, we'll use the &lt;code&gt;template_name&lt;/code&gt; as an argument that takes in the name of the template. Here, we use the &lt;code&gt;index.html&lt;/code&gt; as the template which we created earlier. We don't need to specify the entire path to the template as we make modifications in the &lt;code&gt;settings.py&lt;/code&gt; file to pick the template from the mentioned directory. We use &lt;code&gt;as_view&lt;/code&gt; function to load the class as a function/view.  &lt;/p&gt;&lt;p&gt;Activate the virtual environment for the proper functioning of the project.&lt;/p&gt;&lt;p&gt;After activating the virtual environment we can run the server as follows:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   We can now see the following output and thus, we are now rendering a simple HTML template in Django.&lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639384994/blogmedia/templ1_vbwp5d.png" /&gt;&lt;/p&gt;&lt;h3 id="using-render"&gt;Using render&lt;/h3&gt;&lt;p&gt;We can also use the &lt;a href="https://docs.djangoproject.com/en/4.0/topics/http/shortcuts/#render"&gt;render function&lt;/a&gt; from &lt;code&gt;django.shortcuts&lt;/code&gt; to simply render a template. But we will create a Python function or a View to actually render the template. So, we'll create a View-URL map as we created in the &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/11/30/Django-Basics-P4.html"&gt;previous part&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Firstly, let's create a view function in the &lt;code&gt;post/views.py&lt;/code&gt; file, more generally (&lt;code&gt;app_name/views.py&lt;/code&gt; file). Firstly, we need to import the render function from &lt;code&gt;django.shortcuts&lt;/code&gt; and then return the function call of render.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in the URLs, we'll create a different pattern like for e.g. 'home/'&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;home/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, after creating the View-URL map and making sure the URL of the app is loaded in the project URLs, we can see the result as a simple HTML template.   &lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639386932/blogmedia/templ2_rgoppj.png" /&gt;&lt;/p&gt;&lt;h2 id="django-templating-language"&gt;Django Templating Language&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://docs.djangoproject.com/en/3.2/ref/templates/language/"&gt;Django Templating Language&lt;/a&gt; is Django's way of making templates more dynamic and easy to write dynamic web applications. We'll take a brief look at what we can do with this type of Templating Language in Django.&lt;/p&gt;&lt;h3 id="variables"&gt;Variables&lt;/h3&gt;&lt;p&gt;This is the most common use case for the Django Templating Language/Engine as we can use the &lt;a href="https://docs.djangoproject.com/en/3.2/ref/templates/language/#variables"&gt;variables&lt;/a&gt; from the Backend and inject it in the template. We can parse the variable into the template by the syntax : &lt;code&gt;{{ variable_name " }}}}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;To show its use cases, we can declare a variable in a view and then parse it in the Template. Though it is not dynamic right now we can later on fetch values from the database and store them in the form of variables in our views. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;templates/home.html&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, {{ name }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;post/views.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;variable_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Kevin&amp;quot;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;    &lt;span class="c1"&gt;#The name can be anything, like a database query object, form detail, etc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;As we can see the variable in views is passed as a dictionary in python. The reference key along with a value of the variable as the name of the variable. We will use the key in the templates to parse the value of the variable.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;post/urls.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;home/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vardemo/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variable_demo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;var&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="variable demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639389288/blogmedia/templ3_wvhagw.png" /&gt;&lt;/p&gt;&lt;p&gt;As we can see, we were able to load the variable into the template using the Django Templating Engine. &lt;/p&gt;&lt;h3 id="conditional-statement"&gt;Conditional statement&lt;/h3&gt;&lt;p&gt;We can even use the conditional statement in the Template using a very simple syntax. We can use &lt;code&gt;{% if condition"  }} %}&lt;/code&gt; to use certain special kinds of blocks in the Template. We need to end those blocks as well using the syntax &lt;code&gt;{% endif  %}&lt;/code&gt;, here &lt;code&gt;if&lt;/code&gt; can be other blocks which we'll explore ahead.&lt;/p&gt;&lt;p&gt;To create a basic if condition in the template, we can understand with the following example.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;app_name/views.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;if_else.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Here, we have used the key name as &lt;code&gt;num&lt;/code&gt; indicating we can give different names to the key which needs to be used in the template to render the values.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;app_name/urls.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;if_demo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ifdemo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;templates/if_else.html&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {{ num }}    {% if num &amp;gt; 5 %}        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It&amp;#39;s Greater then 5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% elif num == 5 %}        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It&amp;#39;s five!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% else %}        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It&amp;#39;s less than 5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% endif %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="if-else demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639411425/blogmedia/templ3_exj0fv.png" /&gt;&lt;/p&gt;&lt;p&gt;So, as we can see that, we can use the if-else conditions in the template and that is already powerful. This can be a bit messy as to handle mathematical operations or conditions into a single condition. This can really be used for really large datasets that can be shimmed down to really less coding and also improve readability.&lt;/p&gt;&lt;h3 id="for-loop"&gt;For loop&lt;/h3&gt;&lt;p&gt;Now, the most crucial component of the Django templating language is the loops. We can actually iterate over objects/lists in the template. This becomes a huge concept for actually making a dynamic web application. We n\might want to iterate over all the entries in a database, or any other form of data which can make the app a lot dynamic and feel real-time. &lt;/p&gt;&lt;p&gt;The syntax of for loop is almost similar to the if-else condition. We just replace the condition with the iterator and the list/object from the view context. &lt;code&gt;{% for i in list %}&lt;/code&gt;, also end the for loop like &lt;code&gt;{% endfor %}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;app_name/views.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;for_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;sports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;football&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cricket&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;volleyball&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hockey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;basketball&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sport_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sports&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;We have created a simple Python list called &lt;code&gt;sports&lt;/code&gt; and we parse them to the template using a dictionary object, &lt;code&gt;sport_list&lt;/code&gt; as the key for storing the value of the &lt;code&gt;sports&lt;/code&gt; list.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;app_name/urls.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;for/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_demo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fordemo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;templates/for.html&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {% for sport in sport_list %}        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ sport }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {% endfor %}    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="for loop demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639475328/blogmedia/templ3_q8z8fr.png" /&gt;&lt;/p&gt;&lt;p&gt;We have used simple for loop in Pythonic syntax, we use an iterator in this case, &lt;code&gt;sport&lt;/code&gt; acts as an iterator. We use this to store values one by one from the list &lt;code&gt;sport_list&lt;/code&gt; which was earlier passed in the views as a key in the dictionary. &lt;/p&gt;&lt;p&gt;Hence, this is quite scalable and used to fetch the objects/entries in the database and hence making it a lot easier to make a dynamic web application faster.&lt;/p&gt;&lt;h2 id="template-inheritance"&gt;Template Inheritance&lt;/h2&gt;&lt;p&gt;So, far we have seen that we need to create the base template again and again like all the basic HTML elements, title, and all the basic structure. But what if, we can reuse a specific template in another and extend the functionality of that template into a new one. This avoids the redundancy of writing the entire basic template or the layout of a web app over and over again.&lt;/p&gt;&lt;p&gt;To do that, Django has the Template inheritance. We can use a template as its basic layout or a specific component in the web application. Again, similar to the for, if-else blocks the syntax for inheriting a template is quite similar. &lt;/p&gt;&lt;p&gt;Take, for example, the home.html which consisted of only a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag in it. We can use this kind of template in other templates to really make it the home page. For that, we first need to enclose the template in a &lt;code&gt;block&lt;/code&gt;, which is what allows us to use it in other templates.To create a &lt;code&gt;block&lt;/code&gt;, we simply need to write the following syntax before the component which we do not want in other templates:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;templates/home.html&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% block body %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is not going to get inherited &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% endblock %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This will be inherited&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;In this we have used the &lt;code&gt;blocks&lt;/code&gt; with a name like &lt;code&gt;body&lt;/code&gt; as &lt;code&gt;{% block body %}&lt;/code&gt; this can be anything you like. We end the block with the similar syntax as the for/if blocks as &lt;code&gt;{% endblock %}&lt;/code&gt;. Anything in between the blocks i.e &lt;code&gt;block block_name&lt;/code&gt; and &lt;code&gt;endblock&lt;/code&gt; is not inherited i.e it is unique to this template.&lt;/p&gt;&lt;p&gt;We will see how we can use this template in other templates. We will actually extend this template and use the blocks to render the content in the template.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;templates/if_else.html&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% extends &amp;#39;home.html&amp;#39; %}{% block body %}    {{ num }}    {% if num &amp;gt; 5 %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It&amp;#39;s Greater then 5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% elif num == 5 %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It&amp;#39;s five!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% else %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It&amp;#39;s less than 5&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% endif %}{% endblock %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   So, we first say to Django to extend the &lt;code&gt;home&lt;/code&gt; template i.e. the Django will load the blocks from this template only, remember it will just load and not use the blocks until we explicitly tell it to. &lt;/p&gt;&lt;p&gt;To use the blocks or kind of plug in the template content in the &lt;code&gt;if_else.html&lt;/code&gt; or any other template, we need to again call the &lt;code&gt;blocks&lt;/code&gt;. Here, we need to write the content inside the &lt;code&gt;blocks&lt;/code&gt; to properly parse the blocks as this is an HTML template. The order of opening and closing elements do matter. So, when we say &lt;code&gt;endblock&lt;/code&gt; the last part of the base template is loaded i.e. the closing &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt; tags. This is like plugging the template as it is before and after the block body. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;app_name/views.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;   &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;if_else.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;num&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;app_name/urls.py&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;if_demo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ifdemo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639479714/blogmedia/tempinher2_enisls.png" /&gt;&lt;img alt="template inheritance demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639477721/blogmedia/tempinher_lk0op0.png" /&gt;      &lt;/p&gt;&lt;p&gt;&lt;img alt="" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639479954/blogmedia/template-inh_lc8szo.gif" /&gt;&lt;/p&gt;&lt;p&gt;The above gif illustrates the example in a neat way. The block is loaded from the given template as the extended template and hence it plugs the block into the frame of the template. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we were able to understand the concept of Templates in Django, we were able to use variables, loops, conditional statements, and template inheriting in a Django application. In the next part, we'll try to touch up with the static files and see how to properly structure and configure them.&lt;/p&gt;&lt;p&gt;Thank you for reading, if you didn't understand any of the examples, please let me know, I'll be happy to share the code. Happy Coding :)&lt;/p&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-templates</guid><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: Static Files</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-static-files</link><description>After creating templates, it should be rather tempting to add some styles and logic to them. Well yes, we Static files as the name suggests are the files that d</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;After creating templates, it should be rather tempting to add some styles and logic to them. Well yes, we'll see how to add static files in a web application using django. Static files are not only CSS, but also media/images and Javascript files as well. In this part of the series, we'll cover the basics of working with static files in django including the configuration, rendering and storing of the static files. &lt;/p&gt;&lt;h2 id="what-are-static-files"&gt;What are Static Files?&lt;/h2&gt;&lt;p&gt;Static files as the name suggests are the files that don't change, your style sheets(css/scss) are not gonna change for every request from the client side, though the template might be dynamic. Also your logo, images in the design will not change unless you re-design it XD So these are the static files that needs to be rendered along with the templates.&lt;/p&gt;&lt;p&gt;We have basically 3 types of static files, CSS, Javascript files and media files/static templates,etc. They are all rendered in the same way but as per their conventions and usage. &lt;/p&gt;&lt;p&gt;You can learn about the theoretical information on &lt;a href="https://docs.djangoproject.com/en/4.0/howto/static-files/"&gt;static files&lt;/a&gt; from the django documentation.&lt;/p&gt;&lt;h2 id="how-to-configure-static-files"&gt;How to configure Static Files&lt;/h2&gt;&lt;p&gt;Firstly you can create a folder for all the static files in the root folder. Usually the convention is &lt;code&gt;static&lt;/code&gt; as the name of the folder. So, if you have created the template folder in the root directory, similar to that static folder can be created in that path. &lt;/p&gt;&lt;p&gt;Next after creating the static folder in the project root folder, we need to configure the &lt;code&gt;settings.py&lt;/code&gt; file to actually tell Django web server to look for all our static files in that folder. To do that, go to the &lt;code&gt;settings.py&lt;/code&gt; file, now by this time you would have known where the &lt;code&gt;settings.py&lt;/code&gt; file is (inside the project-named folder). Add the following at the end of the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# import os&lt;/span&gt;&lt;span class="c1"&gt;# STATIC_URL = &amp;#39;/static/&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ignore the &lt;code&gt;import os&lt;/code&gt; if you already have imported and the &lt;code&gt;STATIC_URL&lt;/code&gt; if already there in the file. The &lt;code&gt;STATICFILES_DIRS&lt;/code&gt; is the configuration that we tell the django environment to look for all our static files in the base/root directory of the project where the &lt;code&gt;static/&lt;/code&gt; folder is. The &lt;code&gt;os.path.join()&lt;/code&gt; actually gets the path of the directory in our operating system to the folder specified in the case of our project the &lt;code&gt;BASE_DIR&lt;/code&gt; is the path of the project and we add in the static folder to actually the project path. The final piece and the crucial one is the &lt;code&gt;"static/"&lt;/code&gt; path, this can be other location where you have created your static folder within the project.&lt;/p&gt;&lt;p&gt;That's it! Yes, it's that simple. We can now create static files and render them in our templates. &lt;/p&gt;&lt;h2 id="creating-and-storing-static-files"&gt;Creating and Storing Static files&lt;/h2&gt;&lt;p&gt;Now this part is customizable and it depends on your preference, how you want to organize the static folder. The convention that I follow is creating separate folders namely for &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;js&lt;/code&gt; and &lt;code&gt;assets&lt;/code&gt;(or &lt;code&gt;img&lt;/code&gt;) mostly. And inside of this folders you can store the respective static files. This also creates the project more scalable in terms of it's maintenance. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;static\  |__css\  |__js\  |__assets\&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let's create a static file and an image to demonstrate the concept of static files in django. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;css/style.css&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;#1d1dff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;center&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;#ff6600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;square&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;assets/tbicon.png &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Demo Image (that's my blog icon)   &lt;/p&gt;&lt;p&gt;&lt;img alt="Demo image" src="https://github.com/Mr-Destructive/techstructive-blog/blob/gh-pages/assets/img/tbicon.png?raw=true" /&gt;&lt;/p&gt;&lt;h2 id="rendering-static-files-from-templates"&gt;Rendering Static Files from Templates&lt;/h2&gt;&lt;p&gt;So, after configuring and creating the static files, we now can inject them into our templates. If you try to do the traditional way i.e. linking stylesheets/images/script files with HTML, it just won't work as you expect to and there's no point in using traditional way while creating a web application with a framework. So, there is a framework specific way to do things which make it easier and efficient for the project. &lt;/p&gt;&lt;p&gt;To render any static file, we need to load the static tag which allows us to embed links for the static files into the templates. This means if the static files are not loaded directly instead in production(deploying our application) the static files are stored in a folder &lt;code&gt;STATIC_ROOT&lt;/code&gt; which the server then loads, we'll see how that internally works when we get to deployment techniques for Django project. &lt;/p&gt;&lt;p&gt;To load the static files from our configuration, we can simpy include the tag on top of the template.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% load static %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above templating tag will load the &lt;code&gt;static&lt;/code&gt; tag which allows us to embed the links to the static files as explained earlier. &lt;/p&gt;&lt;p&gt;Now, we can actually access any file with the static folder in our templates with a particular syntax as below:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;css/style.css&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Its just a example how to load the file, we are calling the static tag which we have loaded in previously and from there we are referencing the css file. The compact syntax would be : &lt;code&gt;{% static  'path-to-file'  %}&lt;/code&gt;      &lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE: The path to the static file is relative from the Static folder, i.e. enter the path of the file considering the static folder as the base directory.&lt;/strong&gt; &lt;/p&gt;&lt;h3 id="demonstration-of-the-static-file"&gt;Demonstration of the static file&lt;/h3&gt;&lt;p&gt;Let's render the static file which we created earlier i.e. the css file and the image into a template. &lt;/p&gt;&lt;p&gt;Assuming you have a app called &lt;code&gt;post&lt;/code&gt; in your django project, you can render static files as below:&lt;/p&gt;&lt;h1 id="templateshomehtml"&gt;templates/home.html&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% load static %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;css/style.css&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% block body %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is not going to get inherited &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% endblock %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This will be inherited&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We are loading the static tag and then loading the css file using the tag syntax as explained above.       &lt;/p&gt;&lt;h1 id="staticcssstylecss"&gt;static/css/style.css&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;#1d1dff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;center&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;#ff6600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;square&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This is the static file,&lt;code&gt;style.css&lt;/code&gt; stored inside the css folder of the static folder. This contains basic (very lame) CSS styling as we can understand.     &lt;/p&gt;&lt;h1 id="postviewspy"&gt;post/views.py&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The &lt;code&gt;views.py&lt;/code&gt; file has the function that renders the template &lt;code&gt;home.html&lt;/code&gt; from the templates folder inside the application specific folder.   &lt;/p&gt;&lt;h1 id="posturlspy"&gt;post/urls.py&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This is the application level configuration for the url routes to the views linking the views(functions) from the &lt;code&gt;views.py&lt;/code&gt; file. The url in this file(code-snippet) is linking the root url('') to the home view in the &lt;code&gt;views.py&lt;/code&gt; file.&lt;/p&gt;&lt;h1 id="blogurlspy"&gt;Blog/urls.py&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The urls file in the project folder is the core configuration for project level url routes to individual applications within the project.&lt;/p&gt;&lt;p&gt;Append the following if your templates and static files are not configured properly.&lt;/p&gt;&lt;h1 id="blogsettingspy"&gt;Blog/settings.py&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;   &lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),],&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;APP_DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;context_processors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.template.context_processors.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.template.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="p"&gt;],&lt;/span&gt;        &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;SO, the result of the above code is as simple template as shown in the picture below:&lt;/p&gt;&lt;p&gt;&lt;img alt="Static file demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640621276/blogmedia/static-1_vu41gf.png" /&gt;&lt;/p&gt;&lt;p&gt;This will also work if you do it with traditional HTML syntax, but I'd explained why it's not recommended to do it while using frameworks.&lt;/p&gt;&lt;p&gt;Let's see how static files are rendered in inherited templates. We'll tinker with the &lt;code&gt;for.html&lt;/code&gt; template created in the &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/12/14/Django-Basics-P5.html"&gt;previous part&lt;/a&gt;.  &lt;/p&gt;&lt;h1 id="templateforhtml"&gt;template/for.html&lt;/h1&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;static&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;span class="x"&gt;    &amp;lt;img src=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;assets/tbicon.png&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; height=&amp;quot;50px&amp;quot; width=&amp;quot;50px&amp;quot; /&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;sport&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;sport_list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;span class="x"&gt;        &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;sport&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;span class="x"&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We will have re-load the static tag for each template only if we need to include a new static file in the template. So we use the &lt;code&gt;{% load static %}&lt;/code&gt; again as we are loading the static file (image) in this template.&lt;/p&gt;&lt;h1 id="postviewspy_1"&gt;post/views.py&lt;/h1&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;for_demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;sports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;football&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cricket&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;volleyball&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hockey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;basketball&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sport_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sports&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="posturlspy_1"&gt;post/urls.py&lt;/h1&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;for/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_demo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fordemo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, that's the url and view map created, we can now be able to see the result in the &lt;code&gt;127.0.0.1:8000/for/&lt;/code&gt; url to see the below result:&lt;/p&gt;&lt;p&gt;&lt;img alt="Static demo for inheritance of tempaltes" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640622976/blogmedia/static-tempinh_peyjrg.png" /&gt;&lt;/p&gt;&lt;p&gt;The list style has been changed and thus we can see that the CSS from the parent template is also being inherited. &lt;/p&gt;&lt;p&gt;Here is the django project structure which I have created with this series so far:&lt;/p&gt;&lt;p&gt;&lt;img alt="Folder tree structure" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640624705/blogmedia/trr-static_bgt9du.png" /&gt;&lt;/p&gt;&lt;p&gt;So that has been it for the Static files in Django. Though there are lot of depth for rendering and loading the static files, we'll explore as we get our grasp in the django and web development terminologies. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this article, we were able to configure and render static files like CSS/Images and optionally Javascript into the Django application. We covered from ground how to configure, load and structure the folder for storing all the static files at the project level. &lt;/p&gt;&lt;p&gt;Hope you found it helpful and if you have any queries please let me know. We'll start with the databases probably from the next part in the Django Basics Series. Until then have a great week and as always Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/why-use-vim'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Why use Vim ?&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/technical-writer-journey'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;My Journey as a Technical Writer&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-static-files</guid><pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate></item><item><title>Django Basics: Creating Models</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-models</link><description>We have seen the basics of Django templating in the previous parts of the series. Now, we can move on to the more backend stuff in Django which deals with the D</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We have seen the basics of Django templating in the previous parts of the series. Now, we can move on to the more backend stuff in Django which deals with the Databases, queries, admin section, and so on. In this particular part, we'll cover the fundamental part of any application in Django i.e the &lt;code&gt;Model&lt;/code&gt;. We'll understand what the model is, how to structure one, how to create relationships and add constraints on the fields, etc. &lt;/p&gt;&lt;h2 id="what-ate-models"&gt;What ate Models?&lt;/h2&gt;&lt;p&gt;A model is a Django-way(Pythonic) to structure a database for a given application. It is technically a class that can act as a table in a database generally and inside of the class, the properties of it act as the attributes of that database. It's that simple. Just a blueprint to create a table in a database, don't worry about what and where is our database. We will explore the database and its configuration in the next part. &lt;/p&gt;&lt;p&gt;By creating a model, you don't have to write all the basic SQL queries like &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;attrb1_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;attrb2_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If your application is quite big or is complex in terms of the relations among the entities, writing SQL queries manually is a daunting task and also quite repetitive at times. So Django handles all the SQL crap out of the way for the programmer. So Models are just a Pythonic way to create a table for the project/application's database.&lt;/p&gt;&lt;h2 id="how-to-create-a-model"&gt;How to create a Model?&lt;/h2&gt;&lt;p&gt;Creating a model for an application is as easy as creating a class in python. But hey! It's more than that as there are other questions to address while designing the class. You need to design the database before defining the fields in the model.&lt;/p&gt;&lt;p&gt;OK, we'll it's not straightforward as it seems to but still for creating simple and dummy projects to start with. You can use certain tools like &lt;a href="https://www.lucidchart.com/pages/database-diagram/database-design-tool"&gt;lucidchart&lt;/a&gt;, &lt;a href="https://dbdiagram.io/home"&gt;dbdiagrams.io&lt;/a&gt;, and other tools you are comfortable with. It's important to visualize the database schema or the structure of the application before tinkering with the actual database inside the project. Let's not go too crazy and design a simple model to understand the process.&lt;/p&gt;&lt;p&gt;Here's a basic model for a Blog:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#from django.db import models&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Article&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ignore the &lt;code&gt;from django.db import models&lt;/code&gt; as it is already in the file created by Django. If not, please uncomment the line and that should be good to go.This is a basic model you might wanna play with but don't dump it anywhere. &lt;/p&gt;&lt;p&gt;We define or create our models in the application inside the project. Inside the application there is already a file called &lt;code&gt;models.py&lt;/code&gt; just &lt;strong&gt;append&lt;/strong&gt; the above code into it. The application can be any application which makes the most sense to you or better create a app if not already created and name it as &lt;code&gt;article&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt; or anything you like.&lt;/p&gt;&lt;p&gt;If you are familiar with Python OOP(object-oriented programming), we have basically inherited the &lt;code&gt;models.Model&lt;/code&gt; class from the &lt;code&gt;django.db&lt;/code&gt; module into our model.&lt;/p&gt;&lt;p&gt;If you want more such examples, let's see more such models :&lt;/p&gt;&lt;p&gt;An E-Mail application core model. Attributes like &lt;code&gt;sender&lt;/code&gt;, &lt;code&gt;subject&lt;/code&gt; of the mail, &lt;code&gt;body&lt;/code&gt; of the mail, &lt;code&gt;recipients_list&lt;/code&gt; i.e. the &lt;code&gt;To:&lt;/code&gt; section in a mail system and the &lt;code&gt;attachment_file&lt;/code&gt; for a file attachment to a mail if any.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#from django.db import models&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;user&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmailUser&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;recipients_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EmailUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mail_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;attachment_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A sample model for a note-taking app, consisting of a Note and a Book. A book might be a collection of multiple notes i.e. a single book can have multiple notes so we are using a &lt;code&gt;ManyToManyField&lt;/code&gt;, what is that? We'll see that shortly.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;user.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Textfield&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;modified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are just dummies and are not recommended to use anywhere especially in a serious project. So, we have seen a model, but what are these fields and the constraints like &lt;code&gt;on_delete&lt;/code&gt;, &lt;code&gt;max_length&lt;/code&gt;, and others in the upcoming section on fields.&lt;/p&gt;&lt;h2 id="fields-in-django"&gt;Fields in Django&lt;/h2&gt;&lt;p&gt;Fields are technically the attributes of the class which here is the model, but they are further treated as a attribute in a table of a database. So the model becomes a list of attributes which will be then parsed into an actual database. &lt;/p&gt;&lt;p&gt;By creating attributes inside a class we are defining the structure for a table. We have several types of fields defined already by django for the ease of validating and making a constrained setup for the database schema.&lt;/p&gt;&lt;p&gt;Let's look at some of the types of fields in Django Models.&lt;/p&gt;&lt;h3 id="types-of-fields"&gt;Types of Fields&lt;/h3&gt;&lt;p&gt;Django has a lot of fields defined in the models class. If you want to go through all the fields, you read through the django docs &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/fields/#model-field-types"&gt;field references&lt;/a&gt;. We can access the fields from the &lt;code&gt;models&lt;/code&gt; module like &lt;code&gt;name = models.CharField(max_length=10)&lt;/code&gt;, this is a example of defining a attributes &lt;code&gt;name&lt;/code&gt; which is a CharField. We can set the max_length which acts a constraint to the attribute as we do not want the name field to be greater than 10 and hence parsing the parameter &lt;code&gt;max_length&lt;/code&gt; to 10. &lt;/p&gt;&lt;p&gt;We have other field types like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;IntegerField&lt;/code&gt; -&amp;gt; for an integer value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;TextField&lt;/code&gt; -&amp;gt; for long input of text (like text area in html).&lt;/li&gt;&lt;li&gt;&lt;code&gt;EmailField&lt;/code&gt; -&amp;gt; for an single valid email field.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DateField&lt;/code&gt; -&amp;gt; for inputting in a date format. &lt;/li&gt;&lt;li&gt;&lt;code&gt;URLField&lt;/code&gt; -&amp;gt; for input a URL field.&lt;/li&gt;&lt;li&gt;&lt;code&gt;BooleanField&lt;/code&gt; -&amp;gt; for a boolean value input.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And there are other fields as well which can be used as per requirements.&lt;/p&gt;&lt;p&gt;We also have some other fields which are not directly fields so to speak but are kind of relationship defining fields like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ForeignKey&lt;/code&gt; -&amp;gt; Define a many-to-one relationship to another model/class. &lt;/li&gt;&lt;li&gt;&lt;code&gt;ManyToManyField&lt;/code&gt; -&amp;gt; define a many-to-many relationship to another model/class.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OneToOneField&lt;/code&gt; -&amp;gt; define a one to one relationship between different tables/model/class.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So, that's about the field types for just a feel of how to structure or design a database table using a model with some types of attributes. We also need to talk about constraints which needs to added to the fields inside the models. &lt;/p&gt;&lt;h3 id="field-optionsarguments"&gt;Field Options/Arguments&lt;/h3&gt;&lt;p&gt;We can add constraints and pass arguments to the fields in the models. We can add arguments like &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;blank&lt;/code&gt;, &lt;code&gt;defualt&lt;/code&gt;, &lt;code&gt;choices&lt;/code&gt;, etc. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;null=True/False&lt;/code&gt; -&amp;gt; Set a check for the entry in the table as not null in the database.&lt;/li&gt;&lt;li&gt;&lt;code&gt;blank=True/False&lt;/code&gt; -&amp;gt; Set a check for the input validation to empty or not.&lt;/li&gt;&lt;li&gt;&lt;code&gt;unique=True/False&lt;/code&gt; -&amp;gt; Set a constraint to make the entry unique throughout the table.&lt;/li&gt;&lt;li&gt;&lt;code&gt;defualt=anyvalue&lt;/code&gt; -&amp;gt; Set a default value for the field.&lt;/li&gt;&lt;li&gt;&lt;code&gt;choices=list&lt;/code&gt; -&amp;gt; Set a list of defined choices to select in the field (a list of two valued tuple).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also have another constraint specific to the fields like &lt;code&gt;max_length&lt;/code&gt; for &lt;code&gt;CharField&lt;/code&gt;, &lt;code&gt;on_delete&lt;/code&gt; for ForeignKey which can be used as a controller for the model when the related model is deleted, &lt;code&gt;verbose_name&lt;/code&gt; to set a different name for referencing the entry in the table/model from the admin section compared to the default name of the model, &lt;code&gt;verbose_name_plural&lt;/code&gt; similar to the &lt;code&gt;verbose_name&lt;/code&gt; but for referencing the entire table/model. Also &lt;code&gt;auto_now_add&lt;/code&gt; and &lt;code&gt;auto_now&lt;/code&gt; for &lt;code&gt;DateTimeField&lt;/code&gt; so as to set the current date-time by default.&lt;/p&gt;&lt;p&gt;More options and arguments that can be passed to the fields in models are given in the django docs &lt;a href="https://docs.djangoproject.com/en/4.0/topics/db/models/#field-options"&gt;field options&lt;/a&gt;&lt;/p&gt;&lt;p&gt;These are some of the options or arguments that we can or need to pass to the fields to set up a constrained schema for our database. &lt;/p&gt;&lt;h3 id="meta-class"&gt;Meta class&lt;/h3&gt;&lt;p&gt;Meta class is a nested class inside the model class which is most of the times used for ordering the entries(objects) in the table, managing permissions for accessing the model, add constraints to the models related to the attributes/fields inside it, etc.&lt;/p&gt;&lt;p&gt;You can read about the functionalities of the Meta class in the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/options/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="model-methods"&gt;Model methods&lt;/h2&gt;&lt;p&gt;As a class can have functions, so does a model as it is a Python class after all. We can create kind of a helper methods/functions inside the model. The model class provides a helpful &lt;code&gt;__str__()&lt;/code&gt; function which is used to rename an object from the database. We also have other predefined helper functions like &lt;code&gt;get_absolute_url&lt;/code&gt; that generates the URL and returns it for further redirection or rendering.&lt;/p&gt;&lt;p&gt;Also, you can define the custom functions that can be used as to help the attributes inside the model class.&lt;/p&gt;&lt;h2 id="django-orm"&gt;Django ORM&lt;/h2&gt;&lt;p&gt;Django has an Object Relational Mapper is the core concept in Django or the component in Django that allows us to interact with the database without the programmer writing SQL/DB queries. It is like a Pythonic way to write and execute sql queries, it basically abstracts away the layer to manually write SQL queries. &lt;/p&gt;&lt;p&gt;We'll explore the details of how the ORM works under the hood but it's really interesting and fascinating for a Beginner to make web applications without learning SQL(not recommended though personally). For now, its just magical to see Django handling the DB operations for you. You can get the references for learning about the Queryset in ORM from the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/querysets/"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;h2 id="example-model"&gt;Example Model&lt;/h2&gt;&lt;p&gt;Let us set up a model from what we have learned so far. &lt;/p&gt;&lt;p&gt;We'll create a model for a Blog Post again but with more robust fields and structure. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#from django.db import models&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;draft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Draft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique_for_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;publish&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;draft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-publish&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see in the above model that we have defined the Meta class which is optional and is generally written to modify how to entries inside the table appear or order with other functionalities as well. We have also added the choices option in the status field which has two choices &lt;code&gt;Draft&lt;/code&gt; and &lt;code&gt;Publish&lt;/code&gt; one which is seen by the django interface and the other to the end-users. We have also added certain fields like slug that will create the URL for the blog post, also certain options like &lt;code&gt;unique&lt;/code&gt; has been set to restrict duplicate entries being posted to the database. The &lt;code&gt;related_name&lt;/code&gt; in the &lt;code&gt;ForeignKey&lt;/code&gt; refers to the name given to the relation from the Article model to the User model in this case. &lt;/p&gt;&lt;p&gt;So, we can see that Django allows us to structure the schema of a database. Though nothing is seen as an end result, when we configure and migrate the model to our database we will see the results of the hard work spent in creating and designing the model. &lt;/p&gt;&lt;h2 id="database-specific-fields"&gt;Database Specific fields&lt;/h2&gt;&lt;p&gt;By this time, you will have gotten a feel of what a database might be. Most of the projects are designed around SQL databases but No-SQL databases and others are also used in cases which suite them the most. We have tools to manage this database in SQL we call it the Database Management System (DBMS). It's just a tool to manage data, but there is not just a single Database management tool out there, there are gazillions and bazillions of them. Most  popular include &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;PostgreSQL&lt;/code&gt;, &lt;code&gt;SQLite&lt;/code&gt;, &lt;code&gt;Oracle&lt;/code&gt;, &lt;code&gt;Microsoft Access&lt;/code&gt;, &lt;code&gt;Maria DB&lt;/code&gt;, and tons of others. &lt;/p&gt;&lt;p&gt;Well, these different DBMS tools are almost similar with a few hiccups here and there. So, different Database tools might have different fields they provide. For Example, in Database &lt;code&gt;PostgreSQL&lt;/code&gt; provides the ListField which &lt;code&gt;SQLite&lt;/code&gt; doesn't that can be the decision to be taken before creating any project. There might be some fields that some DBMS provide and other doesn't.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;We understood the basics of creating a model. We didn't touch on the database yet but the next part is all about configuration and migration so we'll get hands-on with the databases. We covered how to structure our database, how to write fields in the model, add constraints and logic to them and explore the terminologies in Django like ORM, Database Types, etc. &lt;/p&gt;&lt;p&gt;Thank you for reading the article, if you have any feedback kindly let me know, and until then Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-tabs'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Tabs&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-folder-struct'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Folder Structure&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-models</guid><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Django Basics: Database Configurations</title><link>https://mr-destructive.github.io/techstructive-blog/django-database-conf</link><description>In this part of the series, we will create an external database and configure the settings for that database. We also look into the process of migrations which </description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In this part of the series, we will create an external database and configure the settings for that database. We also look into the process of migrations which is to convert a model which we created in the previous part into the actual structure/schema for the database. I'll be using &lt;code&gt;PostgreSQL&lt;/code&gt; for most of the demonstrations but it should be similar for other database management tools. This part will make your Django project link to a local database.  &lt;/p&gt;&lt;h2 id="selecting-a-database"&gt;Selecting a Database&lt;/h2&gt;&lt;p&gt;If you have read my previous article about models, you would have got a glimpse of the tools to manage a database, but not quite to choose a database for your project. This section covers that specifically. We will see what options you have while selecting a database.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;SQL databases&lt;/li&gt;&lt;li&gt;sqlite&lt;/li&gt;&lt;li&gt;PostgreSQL&lt;/li&gt;&lt;li&gt;MySQL&lt;/li&gt;&lt;li&gt;MariaDB&lt;/li&gt;&lt;li&gt;Oracle&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Selecting a database hugely depends on the type of application you are going to make, but most of the time it's SQL as a choice just because it has been dominated for a variety of application types over 4 decades. Still, NoSQL is growing in popularity and has some advantages over SQL in many modern applications. You need to analyze your project a bit deeper and understand the flow of data in a better way to make a decision about SQL and No-SQL, but most of the time it's gonna be SQL. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Also Django doesn't officially support NoSQL, so you'll have to turn up some third-party libraries to integrate and manage a database.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;After deciding the type of database, you have one more decision to make here. It's picking up a DBMS tool. There are a lot of databases like PostgreSQL, MySQL, MariaDB, Oracle, etc. you need to pick whichever you feel comfortable and the one which suits your project architecture and requirements more closely. Though there might be very few differences in all the SQL Database tools there are a few things that distinguishes one from the other. &lt;/p&gt;&lt;h2 id="creating-a-database"&gt;Creating a Database&lt;/h2&gt;&lt;p&gt;To create a database, you need to go to the Admin app of the DBMS tool you are using, for Postgres it's pgAdmin, for MySQL it's MySQL Administrator or PHPMyAdmin. You need to do the research for setting up a database locally for your project. But Django already is paired with &lt;code&gt;SQLite&lt;/code&gt; which is a relational database but with a few quirks. It is really great to get started with a project without creating or managing an entire database system. The SQLite database is all contained in a file called &lt;code&gt;db.sqlite3&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;If you want to work on a particular database like PostgreSQL, MySQL, etc. you need to create the database using the management tool and keep the configuration data like &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, etc. after creating the database. &lt;/p&gt;&lt;p&gt;I'll give a demo of creating a simple database in PostgreSQL but mostly it is a bit different in other DBMS tools as each of them have their own GUI applications. Install &lt;a href="https://www.postgresql.org/download/"&gt;Postgres&lt;/a&gt; and &lt;a href="https://www.pgadmin.org/download/"&gt;pgAdmin&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This is a demonstration of creating a database in pgAdmin -3 &lt;/p&gt;&lt;p&gt;&lt;img alt="postgres - db creation" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642325269/blogmedia/postgcreate_wnmyre.gif" /&gt;&lt;/p&gt;&lt;p&gt;This is how you create a database in pgAdmin-3, it should be quite straightforward and simple to follow in other DBMS tools as well. You will also require a password to open the Admin interface for these tools, so keep that password handy we'll require that later.&lt;/p&gt;&lt;p&gt;The following is the process to create a database/schema in MySQL&lt;img alt="mysql - db creation" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642327473/blogmedia/mysqlcreate_bnkqxg.gif" /&gt;&lt;/p&gt;&lt;p&gt;This will create an empty database in your local machine. We'll want our Django project to link that particular database and use it inside its applications. In the next part, we'll configure the &lt;code&gt;settings.py&lt;/code&gt; file to access the database from the local machine.&lt;/p&gt;&lt;h2 id="configurations-for-database"&gt;Configurations for Database&lt;/h2&gt;&lt;p&gt;We need to configure the &lt;code&gt;settings.py&lt;/code&gt; file for integrating the database in our project. Django has a dedicated section for the database in that file. By default, the database configuration is created for the SQLite database which as I said earlier it is the default database that Django uses if not specified and configured. &lt;/p&gt;&lt;p&gt;So, when you first see the configuration for the database in the &lt;code&gt;settings.py&lt;/code&gt; file, you will see configuration like the following:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;For PostgreSQL or any other database, we will require more things than the &lt;code&gt;sqlite&lt;/code&gt; configuration. Namely, we will need the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;name&lt;/code&gt; of the database&lt;/li&gt;&lt;li&gt;&lt;code&gt;user&lt;/code&gt; of the database&lt;/li&gt;&lt;li&gt;&lt;code&gt;password&lt;/code&gt; for that user&lt;/li&gt;&lt;li&gt;&lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; for the database. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The port is optional as most of the database tools pick up the default port for their purpose. For PostgreSQL, the default port is &lt;code&gt;5432&lt;/code&gt; and for MySQL is &lt;code&gt;3306&lt;/code&gt;. Leave it blank like &lt;code&gt;'PORT': '',&lt;/code&gt; if you are not sure what is the port for that database. We also need to specify the &lt;code&gt;ENGINE&lt;/code&gt; as it is the database backend to be used for the project. There are options for specific databases as mentioned in the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/settings/#engine"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;In PostgreSQL, the default user is &lt;code&gt;postgres&lt;/code&gt;, it might depend on your configuration and setup though. The pgAdmin will prompt you for a password when first installing the Postgres on your machine. The password to be used is for the default user of the database. The &lt;code&gt;name&lt;/code&gt; is the name that you gave while creating the database in the Postgres admin section. Finally, the host is generally &lt;code&gt;localhost&lt;/code&gt; as we are using the local database which is our system, and &lt;code&gt;port&lt;/code&gt; as said earlier is &lt;code&gt;5432&lt;/code&gt; by default for PostgreSQL.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blogapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12345678&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For MySQL, the default &lt;code&gt;user&lt;/code&gt; is &lt;code&gt;root&lt;/code&gt; and the &lt;code&gt;port&lt;/code&gt; is &lt;code&gt;3306&lt;/code&gt;. The password is the default password you use to access the MySQL Administrator application. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blogapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3306&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For further details on how to configure a Database in a Django project you can check out these articles:- &lt;a href="https://dev.to/mungaigikure/how-to-set-up-postgres-in-your-django-project-575i"&gt;PostgreSQL setup in Django&lt;/a&gt;- &lt;a href="https://medium.com/@omaraamir19966/connect-django-with-mysql-database-f946d0f6f9e3"&gt;MySQL setup in Django&lt;/a&gt;- &lt;a href="https://medium.com/code-zen/django-mariadb-85cc9daeeef8"&gt;Maria DB setup in Django&lt;/a&gt;- &lt;a href="https://www.mongodb.com/compatibility/mongodb-and-django"&gt;Mongo DB setup in Django&lt;/a&gt;&lt;/p&gt;&lt;p&gt;MongoDB is a NoSQL database so, it will be quite different to set up and configure the database at least in the longer run. I've no experience with NoSQL so please forgive me in this part. There are very rare instances you will need a NoSQL database with Django. &lt;/p&gt;&lt;p&gt;There are other configurations as well which might be specific for the purpose and can be explored in the &lt;a href="https://docs.djangoproject.com/en/4.0/ref/databases/"&gt;django documentation&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="verify-the-database-connection"&gt;Verify the database connection&lt;/h3&gt;&lt;p&gt;To check if the database was actually linked in the Django project, I'll introduce you to a great tool in Django: &lt;code&gt;python manage.py shell&lt;/code&gt; (make sure to be in the virtual environment).This command will open a python interpreter in the shell. It is an interactive console so that we can test some aspects in our project. For instance to check if the database is connected or not:&lt;/p&gt;&lt;p&gt;Execute the code after running the command &lt;code&gt;python manage.py shell&lt;/code&gt; from a virtual environment.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_connection&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this returns &lt;code&gt;None&lt;/code&gt; you are good to go. And if the result is tons of error messages, you have something wrong in the configuration or the database itself.&lt;/p&gt;&lt;p&gt;&lt;img alt="db connection test" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642342286/blogmedia/djb-8-db-connect_l4xqqr.png" /&gt;&lt;/p&gt;&lt;h3 id="installing-database-adapter"&gt;Installing database adapter&lt;/h3&gt;&lt;p&gt;Before we can do anything with the database, we need one thing which is a &lt;strong&gt;database adapter&lt;/strong&gt;. Now, this is dependent on the database you are using. The list is as follows:- &lt;a href="https://pypi.org/project/psycopg2/"&gt;psycopg2&lt;/a&gt; for PostgreSQL- &lt;a href="https://pypi.org/project/mysqlclient/"&gt;mysqlclient&lt;/a&gt; for MySQL and MariaDB- &lt;a href="https://pypi.org/project/cx-Oracle/"&gt;cx-Oracle&lt;/a&gt; for Oracle&lt;/p&gt;&lt;p&gt;SQLite does not require an adapter as the database is a file stored in the base directory as &lt;code&gt;db.sqlite3&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The above list is nothing but Python packages that allow the Django ORM (which is under the hood python) to operate the database. To install them you can simply install with &lt;code&gt;pip&lt;/code&gt; as &lt;code&gt;pip install psycopg2&lt;/code&gt; , &lt;code&gt;pip install mysqlclient&lt;/code&gt;, and so on. Make sure you are in a python virtual environment. &lt;/p&gt;&lt;p&gt;After installing the particular package, we can now move on to the migration process.&lt;/p&gt;&lt;h2 id="migrating-the-models"&gt;Migrating the models&lt;/h2&gt;&lt;p&gt;Now, we have a clean and fresh instance of a database created. What next? We'll now use the logic in the &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2022/01/04/Django-Basics-P7.html"&gt;previous part&lt;/a&gt;, where we created and designed the logic for the database i.e. &lt;code&gt;Models&lt;/code&gt;. Now, we can combine our physical database i.e. the database we just created on a DBMS tool locally, and the logical model to populate and give it a structure. &lt;/p&gt;&lt;p&gt;We'll perform &lt;strong&gt;migration&lt;/strong&gt; on our database. &lt;/p&gt;&lt;p&gt;This is where the magic happens and probably the step which should be carefully be executed if working with a real-time (production-level) database. Because the commands you'll run are gonna directly affect the database. &lt;/p&gt;&lt;p&gt;Making a migration is a two-step process. But what is migration?&lt;/p&gt;&lt;p&gt;The Django documentation states it as the version control for the database schema and takes their word for that. It is basically a folder(hidden) that stores the state of your database structure just like commits in git. &lt;/p&gt;&lt;p&gt;Let's see it practically&lt;/p&gt;&lt;h3 id="makemigrations"&gt;Makemigrations&lt;/h3&gt;&lt;p&gt;For actually creating tables, relations attributes in a database from a model. We use the command &lt;code&gt;makemigrations&lt;/code&gt;. This command creates a file inside the &lt;code&gt;migrations&lt;/code&gt; folder inside the application folder whose model has been recently created or updated. It doesn't affect the database but it creates a file which in turn after a &lt;code&gt;migrate&lt;/code&gt; command will be parsed to the actual database using the ORM.So, for any attribute or logical change inside the model we use the &lt;code&gt;makemigrations&lt;/code&gt; command as below:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py makemigrations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;We do not use the above command if any functional change i.e. operations involving querying the database and other operations that don't affect how the database is structured or stored. Though we have to use the &lt;code&gt;makemigrations&lt;/code&gt; command when the fields in the model are changed even slightly.  &lt;/p&gt;&lt;h3 id="migrate"&gt;Migrate&lt;/h3&gt;&lt;p&gt;To see the result or create the actual tables, attributes, and relations among the tables in the database, we need to run the command &lt;code&gt;migrate&lt;/code&gt; which will see the latest file in the migration folder and execute the queries to change the schema of the database. So, this is a very powerful command that can perform SQL queries under the hood with python. The below demonstration shows the output of these two commands in a Postgres database.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="demonstration"&gt;Demonstration&lt;/h3&gt;&lt;p&gt;&lt;img alt="db migration" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642334950/blogmedia/migration_zi6d2c.gif" /&gt;&lt;/p&gt;&lt;p&gt;Let's follow the GIF/video in sequence:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create the database in the DBMS tool&lt;/li&gt;&lt;li&gt;Configure &lt;code&gt;settings.py&lt;/code&gt; for the database connection&lt;/li&gt;&lt;li&gt;Install &lt;code&gt;psycopg2&lt;/code&gt; or DB-specific adapter.&lt;/li&gt;&lt;li&gt;Create the model.&lt;/li&gt;&lt;li&gt;Run &lt;code&gt;python manage.py makemigrations&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Run &lt;code&gt;python manage.py migrate&lt;/code&gt; (if the above command is a success)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Here's the model from the demo:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we have multiple apps and we only want Django to migrate a model from a specific app, we can simply add the name of the app to the command. By default, Django will migrate all the models from the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; list so we need to specify which app to migrate explicitly.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py makemigrations app_name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This also applies to the &lt;code&gt;migrate&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;To understand the migration process more deeply, let us see another demonstration of changing the model and then applying migrations. We'll keep an eye on the &lt;code&gt;migrations&lt;/code&gt; folder inside of the app in the project. &lt;/p&gt;&lt;p&gt;&lt;img alt="migration folder demo" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642338399/blogmedia/migratefolder_e7fm7n.gif" /&gt;&lt;/p&gt;&lt;p&gt;We can see that initially when we applied the migrations in the previous demo, there was a single migration file called &lt;code&gt;0001_initial.py&lt;/code&gt; but after we altered/changed the title's &lt;code&gt;max_length&lt;/code&gt; from 255 to 127 and executed the &lt;code&gt;makemigrations&lt;/code&gt; command another file called &lt;code&gt;0002_alter_article_title.py&lt;/code&gt; was created that only contained the changed field. This is very similar to git diff in which we are about to commit to the actual database. &lt;/p&gt;&lt;p&gt;So, that was all about migrations. There is definitely a lot to be covered about migrations and databases, but I'll leave you here for now. There are a lot of things to understand and learn before we can talk more about the databases. We now have a base for other things to get our heads around. We now have a database linked to our project, still, we don't know how to use fetch or query them. That is a topic for another part.&lt;/p&gt;&lt;p&gt;We didn't use SQLite database which is by default provided by Django because in production it can just listen to one request/query at a time. That is not ideal for most web applications. Still, there are use cases of this database as it is suitable for embedded database systems for storage applications in desktop/android applications. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we were able to configure a database more specifically an external database (not the default SQLite DB) in a Django project. The concept of migrations was understood and demonstrated with live examples. Also, the process of creating and designing models was used from the previous part to create the structure in an actual database. In the next part, we shall dive into the Admin Section that Django provides to view and tinker with the local database. If you have any queries(not database queries) then please let me know, thank you for reading, and until then Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-math'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Math Package&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-editing-speed'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Enhancing Editing Speed&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-database-conf</guid><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Django Basics: Admin Section</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-admin</link><description>In the previous section, we configured the database in our Django project. We will move ahead and interact with the Admin Section in Django. Django has a built-</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In the previous section, we configured the database in our Django project. We will move ahead and interact with the Admin Section in Django. Django has a built-in Admin Section which we can use to manage our apps and models. We will create a admin account(superuser) and try to render our custom Model in the Admin Interface. We shall further discuss the customization in the Admin section as per our requirements and necessity. &lt;/p&gt;&lt;h2 id="what-is-the-admin-section"&gt;What is the Admin Section?&lt;/h2&gt;&lt;p&gt;Admin Section is a powerful built-in utility provided by Django. It gives the administrative rights over the web project, the interface is neat and provides out of the box functionality to interact with the models in our project without us manually creating any mapping the views and urls. It is restricted to only superusers or trusted users to use as it is for administrative purpose. &lt;/p&gt;&lt;p&gt;The Admin section is present by default for any django application. The interface provides the Django User and Group Model by default. Additionally we can have our own custom models to interact with. For every registered model you have the CRUD (create / read / update / delete ) functionality which makes it very easy and convenient to test the working of model before working around with APIs or moving ahead in the project.  &lt;/p&gt;&lt;h2 id="setting-up-an-admin-account-superuser"&gt;Setting up an admin account (superuser)&lt;/h2&gt;&lt;p&gt;In order to access the Admin section, we need to create a superuser. A superuser as the name suggests is a user who has the supreme authority for performing operations in the project in this case a web application. To create a super user we need to run a command from the command line that takes our name, email and password as input to create the super user. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will prompt you for a couple of things like :- &lt;code&gt;username&lt;/code&gt; the default is &lt;code&gt;admin&lt;/code&gt;.- &lt;code&gt;email&lt;/code&gt; it's not necessary to put one.- &lt;code&gt;password&lt;/code&gt; should be at least eight characters long&lt;/p&gt;&lt;p&gt;The password input will be silent which means you cannot see what you type for security reasons, and the password field will be confirmed once, so you'll have to enter the password once more. But that's all you have to do to create a super user in Django for your web project.&lt;/p&gt;&lt;p&gt;&lt;img alt="createsuperuser demo" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643198415/blogmedia/etubc7efwls47n3cj2bw.gif" /&gt;&lt;/p&gt;&lt;h2 id="navigating-the-admin-section"&gt;Navigating the admin section&lt;/h2&gt;&lt;p&gt;After creating a superuser, we can now navigate the admin section from the browser. The admin section is by default located in the &lt;code&gt;/admin&lt;/code&gt; url-route i.e. you need to navigate to &lt;code&gt;http://127.0.0.1:8000/admin&lt;/code&gt; here &lt;code&gt;8000&lt;/code&gt; can be any port as your preferred port number for the django application. &lt;/p&gt;&lt;p&gt;After vising the Admin route, you will be prompted to a Login Screen. You simply need to add in the username and password which you entered while creating the superuser a while ago and you should be in the Admin Section. The default admin section as of Django &lt;code&gt;3.2.9&lt;/code&gt; looks like following: &lt;/p&gt;&lt;p&gt;&lt;img alt="Django Admin Section" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643199349/blogmedia/h0k9jkqxozrtxvwsapkj.png" /&gt;&lt;/p&gt;&lt;h2 id="components-of-the-admin-section"&gt;Components of the Admin Section&lt;/h2&gt;&lt;p&gt;The Admin interface looks quite simple but is quite powerful and customizable. We have the Default Models in Django which are labelled in the &lt;code&gt;Authentication and Authorization&lt;/code&gt; section namely the &lt;code&gt;Users&lt;/code&gt; and &lt;code&gt;Groups&lt;/code&gt;. You can see we have &lt;code&gt;+ Add&lt;/code&gt; and the &lt;code&gt;Change&lt;/code&gt; links to actually create the data associated with those Models. In the Admin Section you can basically play around with your models, it was not designed to act as the frontend for your application that's what the Django &lt;a href="https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#module-django.contrib.admin"&gt;documentation&lt;/a&gt; says and is absolutely correct. &lt;/p&gt;&lt;p&gt;So, we don't have much things to explore when the UI is concerned as it is simple and straight forward to understand. We'll dive into how to register our models into the Admin section and from there on we can explore the UI to perform CRUD operations.&lt;/p&gt;&lt;h3 id="built-in-models"&gt;Built-in Models&lt;/h3&gt;&lt;p&gt;Django has two built-in and registered models in the Admin Section as said earlier.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Users&lt;/li&gt;&lt;li&gt;Groups&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Users is basically the Django's User Model which provides the basic Authorization functionalities which further can be added to the we application. The Super User that was created from the &lt;code&gt;createsuperuser&lt;/code&gt; command was associated with the Django User model. &lt;/p&gt;&lt;p&gt;We have basic fields in the User model like:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Username&lt;/li&gt;&lt;li&gt;Email-ID&lt;/li&gt;&lt;li&gt;Password&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If we go to the route &lt;code&gt;http://127.0.0.1:8000/admin/auth/user/add/&lt;/code&gt;, we can see a form like UI that allows us to add a User.&lt;/p&gt;&lt;p&gt;&lt;img alt="User Creation Form - Admin" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643208170/blogmedia/m3fdul2qcmgvgegm5r6y.png" /&gt;&lt;/p&gt;&lt;p&gt;But there is no option for the &lt;code&gt;Email-ID&lt;/code&gt; that's because for the User model has been modifies from the base &lt;a href="https://docs.djangoproject.com/en/4.0/ref/contrib/auth/#user-model"&gt;User Model&lt;/a&gt; and we can see the &lt;code&gt;superuser&lt;/code&gt; has all the attributes the &lt;code&gt;User&lt;/code&gt; class has like the email, first name, last name and so on. &lt;/p&gt;&lt;p&gt;&lt;img alt="Super User Model - Admin" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643208828/blogmedia/wrdfkiqaqmw4wxtpopgn.png" /&gt;&lt;/p&gt;&lt;p&gt;We can even extend this functionality or modify the existing attributes of the User Model in our custom Model. For example, we can add Age, Phone number, etc in to our Custom User Model. How? We'll look into that later but that is to give an idea about the User Model.&lt;/p&gt;&lt;p&gt;There is a lot more than just the details like Username, email and password. We need a way to manage which user is allowed to access what components. So, this is termed as &lt;code&gt;Permissions&lt;/code&gt; in the User model, for the super user we might have the access to the admin page but a regular User might not. This is a permission which is by default implemented by Django in the User model. Like wise we can extend this functionality to add more permissions depending on the Model we are working with. &lt;/p&gt;&lt;h3 id="groups"&gt;Groups&lt;/h3&gt;&lt;p&gt;This is the model which can hold a group of certain Model. The typical example hers is a group of User and its permissions. We can have a group for the developers of a project(this project) and a separate Group for rest of the Users. This creates a well-defined boundary for different types of User in a larger application.  &lt;/p&gt;&lt;p&gt;Currently, we don't have any groups created by default. Since it is a concept to be learnt for a quite large project with thousands of Users.&lt;/p&gt;&lt;h2 id="registering-models-in-admin-section"&gt;Registering Models in Admin Section&lt;/h2&gt;&lt;p&gt;Now, what are the default Admin section looks like, we can move on to register our own models in the Admin section. To do that, inside the app folder(a django app) you will see a &lt;code&gt;admin.py&lt;/code&gt; file. Make sure to be in the app in which you have created a model. We need to register a Model to the admin section. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name/admin.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The &lt;code&gt;admin.site.register&lt;/code&gt; basically adds a Model to the Admin Interface. The article Model is defined as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name/models.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will add the Model &lt;code&gt;Article&lt;/code&gt; in the Admin Section. We can now perform CRUD operations in the Admin section. &lt;/p&gt;&lt;h2 id="performing-actions-with-admin-section"&gt;Performing actions with Admin Section&lt;/h2&gt;&lt;p&gt;So, perform CRUD operations, we can navigate to the Model Article and simply click the &lt;code&gt;Add Article&lt;/code&gt; Button to add a object of the model Article. We will be presented a form to fill. Now here we, can see the fields which are actually to be inputted by the user. We don't see the fields like &lt;code&gt;created&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt; as they are automatically set as per the current time. &lt;/p&gt;&lt;p&gt;&lt;img alt="Add Article - Admin" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643215768/blogmedia/bq0gvbxhhxzwiwutgqpi.png" /&gt;After filling this form you will see &lt;code&gt;Article object (1)&lt;/code&gt; which looks like a non-sense thing to look at. This is where the &lt;code&gt;__str__&lt;/code&gt; &lt;a href="https://docs.djangoproject.com/en/4.0/ref/models/instances/"&gt;function&lt;/a&gt; comes handy and saves the day. &lt;/p&gt;&lt;p&gt;&lt;img alt="Article Object" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643215997/blogmedia/sy7ygnskxfl0psgaj4z4.png" /&gt;&lt;/p&gt;&lt;p&gt;Now, we can see we also have the ability to Delete and Update the Post. This is the best thing about the Django admin interface. It's quite intuitive for complex model to be tested before moving ahead and making necessary corrections if required.&lt;/p&gt;&lt;h3 id="modifying-the-model-without-migrations"&gt;Modifying the Model (without migrations)&lt;/h3&gt;&lt;p&gt;Now, at this stage if we forgot to add the &lt;code&gt;__str__&lt;/code&gt; function, we need to add it into our models. But what about the migrations? We do not need to migrate this changes as there is no change in how to model is structures. We are changing how to Admin Interface should present our model. So, we'll make changes to our model but only aesthetically. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#app_name/models.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now if we refresh the Admin page, we can see the title is the object name :)&lt;/p&gt;&lt;p&gt;&lt;img alt="Model str function" src="http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643216721/blogmedia/vwyoccgmhnl4aosqc6qf.png" /&gt;&lt;/p&gt;&lt;p&gt;This looks a trivial change but makes a big difference for large applications and dataset. &lt;/p&gt;&lt;h3 id="verbose-name"&gt;Verbose name&lt;/h3&gt;&lt;p&gt;We can add a verbose name for an attribute inside an Model. A verbose name is a human readable name for a field. So, let's say we have a attribute/field called &lt;code&gt;fname&lt;/code&gt;, the person who might have created the model might know it stands for &lt;code&gt;first name&lt;/code&gt; but someone else might not. So in this case, we can add the &lt;code&gt;verbose_name&lt;/code&gt; to be used as the name in the Admin Section. &lt;/p&gt;&lt;p&gt;We also have &lt;code&gt;verbose_name_plural&lt;/code&gt; which will be handy for a model name. We do not wnat Django to just add &lt;code&gt;s&lt;/code&gt; before any Model name, it might look good for &lt;code&gt;Articles&lt;/code&gt;, &lt;code&gt;Questions&lt;/code&gt;, &lt;code&gt;Posts&lt;/code&gt; but for &lt;code&gt;Quizs&lt;/code&gt;, &lt;code&gt;Categorys&lt;/code&gt;, &lt;code&gt;Heros&lt;/code&gt; look too funny than &lt;code&gt;Quizzes&lt;/code&gt;, &lt;code&gt;Categories&lt;/code&gt; and &lt;code&gt;Heroes&lt;/code&gt; respectively. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name/models.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;headline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Verbose Name Attribute" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643219495/blogmedia/v5zphhohi27tvwsa3gsp.png" /&gt;&lt;/p&gt;&lt;p&gt;Again, we do not need to migrate any changes to the database as it is not a logical change in the schema of the database.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name/models.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Articless&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Verbose Name Plural" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643219521/blogmedia/sf77v52ic9dheyvv0pvi.png" /&gt;&lt;/p&gt;&lt;p&gt;Though &lt;code&gt;Articless&lt;/code&gt; sounds weird, it is just made for realizing that Django by default adds &lt;code&gt;s&lt;/code&gt; to the Model name for representing as a Class in the Admin. &lt;/p&gt;&lt;h3 id="admin-register-class"&gt;Admin Register Class&lt;/h3&gt;&lt;p&gt;We can even list not only the title but many things in a particular format, we need to define a class which will be derived by the &lt;code&gt;admin.ModelAdmin&lt;/code&gt; class. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name/admin.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="nd"&gt;@admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;updated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Admin-List" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643217326/blogmedia/y32jmboypbmzyypt68l1.png" /&gt;&lt;/p&gt;&lt;p&gt;We are using the &lt;code&gt;admin.ModelAdmin&lt;/code&gt; class as the base class to overwrite the &lt;code&gt;list_display&lt;/code&gt; list which will display the mentioned items in the Admin Section as a list. We are also using the &lt;code&gt;admin.register&lt;/code&gt; as the class Decorator to actually register the model in the Admin section. &lt;/p&gt;&lt;p&gt;Now, we can see a lot of customization in the Admin section. This is just a glimpse of what customization is. This can be tailored as per your model and needs. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, in this section we were able to interact with the Admin section in Django. We were able to register our custom Model in the Admin interface and then customize the format of how it is displayed in the interface. Hopefully, from this part we are able to interact with the data and get our application to test how to plan ahead. In the next section we shall cover how to map up all of these together to create something meaningful and finally understand the Django development process. &lt;/p&gt;&lt;p&gt;Thank you for reading, if you have any questions or improvements to suggest, please let me know in the comments. I'll be grateful if you you provide a feedback. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/oop-cpp-p3'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Object-Oriented Programming in C++: Constructors&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/djagno-auth0-script'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django + Auth0 Quick Setup&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-admin</guid><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate></item><item><title>Django Basics: CRUD API</title><link>https://mr-destructive.github.io/techstructive-blog/django-basics-crud-api</link><description>After understanding the admin section and setting up a database, we can finally move on to the CRUD API in Django. We will create a API in pure Django with Mode</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;After understanding the admin section and setting up a database, we can finally move on to the CRUD API in Django. We will create a API in pure Django with Model Form, Class Based Views and templates. We will go in two parts in this section, first revising the workflow of the app creation and setup, the next part all about CRUD API. We'll dive into a lot of familiar topics and concepts from previous parts but there are is still a lot to learn beyond the basics. &lt;/p&gt;&lt;p&gt;The following is the demonstration of the CRUD API we will be making in this section:&lt;/p&gt;&lt;p&gt;&lt;img alt="CRUD API- demonstration" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643985336/blogmedia/hoxf3u9a872uvcbyehov.gif" /&gt;&lt;/p&gt;&lt;h2 id="quickly-setting-up-an-app"&gt;Quickly Setting up an app&lt;/h2&gt;&lt;p&gt;We have seen how to create an app in the &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/11/24/Django-Basics-P3.html"&gt;folder structure part&lt;/a&gt; of the series, after that we have created all the components namely the views, urls, templates, etc in distinct parts. In this article, we will create an app together in a single part. We'll discuss all the process in short because its important to get the workflow of Django to ease the actual coding process. Let's dive in the part one of this section of creating a CRUD API i.e. to set up an app.&lt;/p&gt;&lt;h3 id="creating-app"&gt;Creating App&lt;/h3&gt;&lt;p&gt;To quickly set up an application, we need to execute an command so that python under the hood creates a folder for an app in the current Django project. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py startapp api &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will set up an folder &lt;code&gt;api&lt;/code&gt; in the base directory of current django project. Now, we'll need to configure the Django settings for the project to pick up this app while running the server, making any migrations or any other project level process.&lt;/p&gt;&lt;h3 id="registering-the-app-name-in-settings"&gt;Registering the App-name in settings&lt;/h3&gt;&lt;p&gt;Simply append the name of the app in a string in the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; list inside the &lt;code&gt;settings.py&lt;/code&gt; file. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# project_name / settings.py&lt;/span&gt;&lt;span class="c1"&gt;# Application definition&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="setting-up-the-urls"&gt;Setting up the URLS&lt;/h3&gt;&lt;p&gt;We need to create a &lt;code&gt;urls.py&lt;/code&gt; file for the &lt;code&gt;api&lt;/code&gt; app and link it in the main project's URLs. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app-name / urls.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   We'll keep the url patterns empty but after setting and configuring the project and the application, we'll map the routes to the views in this app. &lt;/p&gt;&lt;p&gt;Next, we need to update the &lt;code&gt;urls.py&lt;/code&gt; file in the project folder to include the &lt;code&gt;api&lt;/code&gt; routes/urls. I have kept it '' or base route, it could be anything as per your application design. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# project_name / urls.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;api/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;app_name.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;After configuring the URLs we need to set up the templates and static files.&lt;/p&gt;&lt;h3 id="setting-up-templates-and-static-files"&gt;Setting up Templates and Static files&lt;/h3&gt;&lt;p&gt;To set up the templates, we need to configure the &lt;code&gt;settings.py&lt;/code&gt; file to look for the templates in a specific directory. Below is the snippet to change the default configuration.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# project_name / settings.py&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.template.backends.django.DjangoTemplates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),],&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;APP_DIRS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;context_processors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.template.context_processors.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.template.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="p"&gt;],&lt;/span&gt;        &lt;span class="p"&gt;},&lt;/span&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, you can now create your templates (HTML documents) inside the &lt;code&gt;templates&lt;/code&gt; folder after creating the folder in the base project directory. &lt;/p&gt;&lt;p&gt;TO configure static files, we need to also make modifications to the &lt;code&gt;settings.py&lt;/code&gt; file as follows:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# project_name / settings.py&lt;/span&gt;&lt;span class="c1"&gt;# import os&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   Here, we are configuring the static files ( CSS, Js, Assets) in the &lt;code&gt;static&lt;/code&gt; folder. This can be anything you like but the folder name should be then changed accordingly. Similar to the Templates folder, the static folder is also located in the root directory of the project.&lt;/p&gt;&lt;p&gt;This is all the necessary configuration for simple full stack application you can make, still we have to configure the backend and write the actual logic for the application. We'll move on to the second part of this section i.e. creating the CRUD API.&lt;/p&gt;&lt;h2 id="making-an-crud-api"&gt;Making an CRUD API&lt;/h2&gt;&lt;p&gt;There are certain things to be planned before we move ahead like the selection of database, the schema of the database and basically the structure of the backend. For now, we'll go with SQL database, a REST API with PostgreSQL hosted locally on the system. &lt;/p&gt;&lt;h3 id="configure-the-database"&gt;Configure the database&lt;/h3&gt;&lt;p&gt;To configure the database, we simply need to first create the database. This can be done by using a CLI or the Admin interface of the particular database we are working with in our case it's PostgreSQL. Postgres comes with pgAdmin to create and manage the databases and the server locally. The detailed explanation of the &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2022/01/16/Django-Basics-P8.html"&gt;database creation&lt;/a&gt; is explained in the previous parts of the series. &lt;/p&gt;&lt;p&gt;After creating the database locally, you need to tweak the &lt;code&gt;settings.py&lt;/code&gt; file database configuration object as per your credentials of the database instance.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# project_name / settings.py&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blogapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@1234567&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   If you have already created the databse, there is no problem in reusing the same one but for production level applications make sure to keep things separate. Also the model name has to be distinct in each app to create tables in the database.&lt;/p&gt;&lt;h3 id="creating-model"&gt;Creating Model&lt;/h3&gt;&lt;p&gt;We can now finally move on to the logic of the application, this is the part which acts as the backbone of backend development in django. You need to design the model carefully and programmatically. Make sure to include most of the logic as you can inside the models as it is a standard and a good practise to develop in professional projects. &lt;/p&gt;&lt;p&gt;For this app, we simply are going to create a blog post model. We are going to have some simple attributes and structure.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / models.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;headling&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Articles&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This is again a simple model for demonstration of a lot of things like the &lt;code&gt;str&lt;/code&gt; function, &lt;code&gt;Meta&lt;/code&gt; class, &lt;code&gt;verbose_names&lt;/code&gt; and so on. You can design models as per your requirements and proper planning. It really determines the structure of an application.&lt;/p&gt;&lt;p&gt;Now, after we have created the models, we need to migrate the schema into the database. Remember it acts as a checkpoint in the history of changes to the database. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py makemigrations&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will create a checkpoint in the &lt;code&gt;migrations&lt;/code&gt; folder in the app. &lt;/p&gt;&lt;p&gt;To make changes to the database, we use the migrate command.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here's a quick demonstration of everything covered so far.&lt;/p&gt;&lt;p&gt;&lt;img alt="app setup and config" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643648979/blogmedia/xnqabmxtenajntqepqo3.gif" /&gt;&lt;/p&gt;&lt;h3 id="creating-form"&gt;Creating Form&lt;/h3&gt;&lt;p&gt;Django has a functionality to convert the fields in a model to a form which can be used for input in the frontend side. This allows us to just configure the Form and map the form to a view for the specific operation and simply add a tiny snippet of HTML to make a basic API and thus handle the entire heavy lifting.&lt;/p&gt;&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/4.0/topics/forms/modelforms/#modelform"&gt;Model Forms&lt;/a&gt; are the type of forms in django that does the above mentioned functionality. We need to create a form class in a new file inside the app called &lt;code&gt;forms.py&lt;/code&gt; and add the following content:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / forms.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="s1"&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   In this snippet, we are creating a Form called &lt;code&gt;ArticleForm&lt;/code&gt; it can be anything but (Model_NameForm) is a standard way to name a Model Form. It is a child class of the ModelForm, i.e. it inherits the parent's attributes/properties and methods. So we have the access to it's Meta class which defines some of the attributes like model, fields, etc. &lt;/p&gt;&lt;p&gt;Here, we are only adding &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt;, because &lt;code&gt;created&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt; are automatically added. So what about &lt;code&gt;author&lt;/code&gt;? Well, we can add it automatically by processing the request that will be sent when the form is submitted (we'll discus while creating views). &lt;/p&gt;&lt;p&gt;In a model form, we also have other attributes like &lt;code&gt;exclude&lt;/code&gt; which is the opposite of &lt;code&gt;fields&lt;/code&gt;, say you have a lot of attributes in a model and you want to skip certain fields then you don't use fields and use exclude to specify only the attributes to  be excluded. Also &lt;code&gt;widgets&lt;/code&gt; which can be used to style and properly process the fields in the form to have more control on how the form should be validated and presented.&lt;/p&gt;&lt;h3 id="updating-models"&gt;Updating Models&lt;/h3&gt;&lt;p&gt;Now, when we have chosen to use Model Form, we need to update the model logic (not the structure so no migrations). &lt;/p&gt;&lt;p&gt;We'll have to add some methods and redefine certain default parameters in able to use the Class based views and Model forms to the fullest strength. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / models.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt;  &lt;span class="nn"&gt;django.core.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="n"&gt;list_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ArticleQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;heading&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;            &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Articles&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   Let's break down what was added:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Created two new classes (&lt;code&gt;ArticleManager&lt;/code&gt; and &lt;code&gt;ArticleQuerySet&lt;/code&gt;)  This was done to manage and serialize the model attributes. We need a standard like JSON to parse and return the data from the client to the server and vice versa. The &lt;code&gt;ArticleQuerySet&lt;/code&gt; actually converts the &lt;code&gt;QuerySet&lt;/code&gt; into list and dumps into a json object. &lt;strong&gt;A QuerySet in Django is collection of SQL queries.&lt;/strong&gt; &lt;/li&gt;&lt;li&gt;Function serialize  The serialize function actually converts the &lt;code&gt;QuerySet&lt;/code&gt; into a JSON object which in turn is used as a utility function for the model. &lt;strong&gt;It returns the JSON object hence a serialized object from a queryset.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Editing the object for the model  The object for the model is re initialized as a object of the &lt;code&gt;ArticleManager&lt;/code&gt; class which in turn manages the and process the query set and returns the serialized object.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That's all done from the models for the app and now we finally move to the views.&lt;/p&gt;&lt;h3 id="creating-views"&gt;Creating Views&lt;/h3&gt;&lt;p&gt;Now, we can start writing the views to actually add the CRUD functionality ourselves and slowly develop the frontend as well. &lt;/p&gt;&lt;p&gt;To start creating views, we need to import some built-in classes used for making APIs like the Django generic views. Some of the core views(classes based) for making a CRUD API include:1. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#createview"&gt;CreateView&lt;/a&gt;2. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#updateview"&gt;UpdateView&lt;/a&gt;3. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#deleteview"&gt;DeleteView&lt;/a&gt;4. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#detailview"&gt;DetailView&lt;/a&gt; 5. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#listview"&gt;ListView&lt;/a&gt;&lt;/p&gt;&lt;p&gt;These views help in making the API in Django easily. We simply need to add the template name to add a customize the layout, make forms, define the sets of fields to input from the client and which fields to process by the server side.&lt;/p&gt;&lt;p&gt;Let's create them one by one and understand the structure of class based views.&lt;/p&gt;&lt;h4 id="create-view"&gt;Create View&lt;/h4&gt;&lt;p&gt;This view as the name suggests is used for creating a entry in a model(database) or we can also say that it will act as the &lt;code&gt;Create&lt;/code&gt;(POST request) in the CRUD API.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / views.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.edit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;     &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="n"&gt;DeleteView&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/api/&amp;#39;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we have created a Class based view called &lt;code&gt;ArticleCreateView&lt;/code&gt; which inherits the &lt;code&gt;CreateView&lt;/code&gt; class from the &lt;code&gt;django.views.generic.edit&lt;/code&gt; module. Here as similar to the &lt;code&gt;ArticleForm&lt;/code&gt; class, we have certain attributes to pass like the model, form class and the success url. - The &lt;code&gt;model&lt;/code&gt; simply indicates to which table or model we are creating the view for.- The &lt;code&gt;form_class&lt;/code&gt; denotes the ModelForm class we are using for the Create view.- The &lt;code&gt;success_url&lt;/code&gt; is the url route to which to redirect after a successful POST request/form submission.&lt;/p&gt;&lt;p&gt;Remember we discussed about adding &lt;code&gt;author&lt;/code&gt; field automatically from the request from the form. This process is carried out in the &lt;code&gt;form_valid&lt;/code&gt; function. &lt;a href="https://docs.djangoproject.com/en/4.0/ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.form_valid"&gt;Form_valid&lt;/a&gt; is a helper built-in function to redirect to the success_url when the form data is being posted. Before actually doing that, we add the author field by setting it as the User by accessing the &lt;code&gt;self.request&lt;/code&gt; object. The &lt;code&gt;self.request&lt;/code&gt; object actually holds the meta-data about the request that is being sent to the API so we can access the User who is currently logged in. &lt;/p&gt;&lt;p&gt;Though we don't have a login system, we can assume the user is logged in with some user account. Now to handle certain exceptions we can add &lt;a href="https://docs.djangoproject.com/en/4.0/topics/auth/default/#django.contrib.auth.mixins.AccessMixin"&gt;Mixins&lt;/a&gt;. We can use &lt;a href="https://docs.djangoproject.com/en/4.0/topics/auth/default/#django.contrib.auth.mixins.LoginRequiredMixin"&gt;LoginRequiredMixin&lt;/a&gt; to only allow the form submission for logged in users and so on. &lt;/p&gt;&lt;h4 id="update-view"&gt;Update View&lt;/h4&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / views.py&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/api/&amp;#39;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticleUpdateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   This is quite similar to the &lt;code&gt;CreateView&lt;/code&gt; except we have to use &lt;code&gt;UpdateView&lt;/code&gt; as the base model of the &lt;code&gt;ArticleUpdateView&lt;/code&gt; the rest of the attributes remain the same and functioning of the form like pre-rendering the fields to edit are all managed by the &lt;code&gt;UpdateView&lt;/code&gt; out of the box.&lt;/p&gt;&lt;h4 id="delete-view"&gt;Delete View&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / views.py&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleDeleteView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeleteView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArticleForm&lt;/span&gt;    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/api/&amp;#39;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticleDeleteView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, here we do not have to change anything as for attributes and the &lt;code&gt;valid_form&lt;/code&gt; function. We'll see the details when we look at the templates.&lt;/p&gt;&lt;h4 id="list-view"&gt;List View&lt;/h4&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#app_name / views.py&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api/list.html&amp;#39;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   This view is for listing all the objects/articles for the current logged in author. If we want something like a homepage for all the articles, the thing is as simple as replacing&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;by&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   You can even apply filters for fetching the latest post by &lt;code&gt;Article.objects.filter().order_by("-created")&lt;/code&gt;. You get the idea. It boils down to simple python and library function.   Also, we have a new attribute &lt;code&gt;template_name&lt;/code&gt; which allows us to use the data in our custom template. In this case we will create the template in the &lt;code&gt;templtes/api/&lt;/code&gt; folder called &lt;code&gt;list.html&lt;/code&gt;. The function &lt;code&gt;get_context_data&lt;/code&gt; is used to fetch the objects from the database and return it as a special dictionary(JSON object) called &lt;code&gt;context&lt;/code&gt; which can be rendered in the templates by the key in this case, the &lt;code&gt;articles&lt;/code&gt; key will give us all the articles by the current user. &lt;/p&gt;&lt;h4 id="detail-view"&gt;Detail View&lt;/h4&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / views.py&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api/post.html&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   As opposite to the ListView, we have the DetailView that renders the details of the particular article. Here we don't have to write the &lt;code&gt;get_context_data&lt;/code&gt; function as the default object for accessing the model data is &lt;code&gt;object&lt;/code&gt;. So, we simply need to specify the &lt;code&gt;template_name&lt;/code&gt; and the &lt;code&gt;model&lt;/code&gt;. Here, the template is &lt;code&gt;api/post.html&lt;/code&gt; in the templates folder.&lt;/p&gt;&lt;h3 id="mapping-the-urls"&gt;Mapping the URLS&lt;/h3&gt;&lt;p&gt;After completing the views, we can map those into a urls to access them as endpoints in the api app. Let's build upon the &lt;code&gt;urls.py&lt;/code&gt; file that we created with no url paths.&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app_name / urls.py&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;         &lt;span class="n"&gt;ArticleView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleDetailView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="n"&gt;ArticleUpdateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleDeleteView&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;listpost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article/&amp;lt;pk&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleDetailView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;detailpost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleCreateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;createpost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;update/&amp;lt;pk&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleUpdateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;updatepost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;delete/&amp;lt;pk&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ArticleDeleteView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;deletepost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   So, we can see the views are imported from the .views and are mapped to a particular route. We use &lt;code&gt;.as_view&lt;/code&gt; function to take a request from a callable class based view and returns the processed response. The &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt; is the id for accessing a particular object. We use the id for detail view, update and delete views. &lt;/p&gt;&lt;h3 id="creating-templates-and-static-files"&gt;Creating Templates and Static files&lt;/h3&gt;&lt;p&gt;We now, have to join the final piece of the puzzle i.e. to create templates. It's quite simple but requires a bit of logic to connect things together. The backend is handled flawlessly by Model Form and Generic views, we simply need to put simple HTML and Django templating language to its correct use. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# templates / index.html&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Django Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% load static %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;css/style.css&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Articles&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;   {% block body %}   {% endblock %}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   A simple HTML doc with link to a stylesheet. We also have a block to further inherit this as the base template.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;css&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;#1d1dff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;center&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;text-decoration-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#00ffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#ff6600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;#ff6600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;square&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The below template is a detail view page, that renders the details of the article. We are using the &lt;code&gt;object&lt;/code&gt; key from the &lt;code&gt;context&lt;/code&gt; dictionary provided by default as mentioned &lt;a href=""&gt;here&lt;/a&gt;. We are also embedding the &lt;code&gt;Update&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; buttons to manage the Article. &lt;/p&gt;&lt;p&gt;This is the time to explain about the dynamic urls in Django. We have used the &lt;code&gt;{% url 'updatepost' object.id %}&lt;/code&gt; to create a dynamic url that will redirect to the &lt;code&gt;updatepost&lt;/code&gt; url and parse with it the id of the object. This is important as the url itself takes the &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt; value to update the post. So we just pass the id like a parameter to the URL. This is the way we create dynamic urls in Django templates which is quite similar to static file urls. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# templates / app_name / post.html{% extends &amp;#39;index.html&amp;#39; %}{% block body %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.title&amp;quot; }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ object.post&amp;quot; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window.location.href=&amp;#39;{% url &amp;#39;updatepost&amp;#39; object.id %}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    Update    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window.location.href=&amp;#39;{% url &amp;#39;deletepost&amp;#39; object.id %}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    Delete    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% endblock %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="CRUD API - Detail View" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911468/blogmedia/n6z33yu4nq9tjsr6nba2.png" /&gt;&lt;/p&gt;&lt;p&gt;We have used the dynamic URLs in Update and Delete View buttons. &lt;/p&gt;&lt;p&gt;The below template is for creating a home page like structure but for the current logged in user. We are displaying all the articles of the logged in the form of a list with a for loop as discussed in the  templating tutorial part. We have access to the key &lt;code&gt;articles&lt;/code&gt; from the dictionary &lt;code&gt;context&lt;/code&gt; and hence we iterate over the loop from that object and display the title with the url for the post detail view.&lt;/p&gt;&lt;p&gt;Here as well we are using the dynamic url by parsing the &lt;code&gt;article.id&lt;/code&gt; as the &lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt; primary key to the url. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# templates / app_name / list.html{% extends &amp;#39;index.html&amp;#39; %}{% block body %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {% for article in articles %}        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% url &amp;#39;detailpost&amp;#39; article.id %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ article.title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {% endfor %}    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{% endblock %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="CRUD API - Home Page/List View" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911630/blogmedia/lakpdkldqwopimhixxya.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# templates / app_name / article_confirm_delete.html{% extends &amp;#39;index.html&amp;#39; %}{% block body %}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        {% csrf_token %}        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Are you sure to delete Post:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; {{ object.title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; ? &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;{% endblock %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img alt="CRUD API - Delete View" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911775/blogmedia/qvilf8p3qpj9qfdkpkn4.png" /&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# templates/ app_name / article_form.html&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;enctype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    {% csrf_token %}    {{ form.as_p&amp;quot; }}    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the template that forms the basis for all the forms like Create and Update. We use the template variable &lt;code&gt;{{ form }}&lt;/code&gt; to render the form in the template. Additionally we use &lt;code&gt;.as_p&lt;/code&gt; to make the form fields as a paragraph tag in HTML. The &lt;code&gt;{% csrf_token %}&lt;/code&gt; is the Cross site forgery token allowing secure posting of a form. Don't bother about it much it is important for identifying the user posting the data from the site. The final piece of element is the submit button used to submit the form.  &lt;/p&gt;&lt;p&gt;&lt;img alt="CRUD API - CREATE View" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911374/blogmedia/xbwxtg3ry2x4oegtzxmi.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="CRUD API - UPDATE View" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911726/blogmedia/zeapgshsk9x9agsw4gsu.png" /&gt;&lt;/p&gt;&lt;p&gt;For any references, you can take a look at the &lt;a href="https://github.com/Mr-Destructive/django-blog"&gt;GitHub&lt;/a&gt; repository for the CRUD API in pure Django.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this section, we were able to create a CRUD API in pure Django. This should be the end of the core series of Django Basics, but there are more parts coming up still which are not basics but still worth learning as a beginner. We'll further explore DRF, Forms, CORS, etc. We'll see some other libraries specific for Django. Hopefully from this tutorial series, you were able to learn something and if you have any queries or issues please let me know. &lt;/p&gt;&lt;p&gt;Thank you for reading, please provide feedback on how you felt about the series. Though the series is not over, it's sufficient for a beginner to get pace in Django. Hope you had a great time. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-slices'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Slices&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/oop-cpp-p3'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Object-Oriented Programming in C++: Constructors&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-basics-crud-api</guid><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Podevcast: A single source for developer podcasts</title><link>https://mr-destructive.github.io/techstructive-blog/podevcast-project</link><description>Hello Developers I am Meet Gor and I present this project as a submission to the Netlify x Hashnode Hackathon. Podevcast is a webpage(static) for listening to p</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Hello Developers! Want to listen to programming podcasts from a single place? Podevcast is the place you should be searching for. &lt;/p&gt;&lt;p&gt;I am Meet Gor and I present this project as a submission to the Netlify x Hashnode Hackathon. Podevcast is a webpage(static) for listening to podcasts centered around developers and programming. Just pick your favorite one and start listening straight away. Let's dive into the making of Podevcast. Head on to &lt;a href="https://podevcast.netlify.app/"&gt;https://podevcast.netlify.app/&lt;/a&gt; to check out the live app.&lt;/p&gt;&lt;h2 id="what-is-podevcast"&gt;What is Podevcast&lt;/h2&gt;&lt;p&gt;Podevcast is a web application or a static site that renders the top programming/development podcasts. You can listen to the top podcasts around the developer community from a single source. &lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Listen to your favorite developer podcasts with Podevcast&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Podevcast is a static site generated using a script. There is a static site generator that is heavily done in Python and deployed to Netlify. You can simply listen to the podcasts on the web page or go to the canonical page of the podcast episode. From the canonical page, you can choose to hop to your chosen music player, but the default music player should be fine for casual listening. The core idea is to keep things in a single place for developer podcasts.&lt;/p&gt;&lt;p&gt;&lt;a href="https://podevcast.netlify.app/"&gt;Podevcast&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/Mr-Destructive/podevcast"&gt;Source Code&lt;/a&gt;&lt;/p&gt;&lt;h2 id="preview"&gt;Preview&lt;/h2&gt;&lt;p&gt;Podevcast has popular developer podcasts like &lt;code&gt;Command Line Heroes&lt;/code&gt;, &lt;code&gt;The Python Podcast&lt;/code&gt;, &lt;code&gt;The freeCodeCamp Podcast&lt;/code&gt;, and many others to choose from. You can go into categories for looking at a specific podcast. &lt;/p&gt;&lt;h3 id="application-demonstration"&gt;Application Demonstration&lt;/h3&gt;&lt;p&gt;Here's a small demonstration of the Podevcast application.&lt;/p&gt;&lt;p&gt;&lt;img alt="Podevcast Preview gif" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645200224921/GC8gmxUzX.gif" /&gt;&lt;/p&gt;&lt;p&gt;Podevcast has multiple pages like:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://podevcast.netlify.app/"&gt;Home page&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://podevcast.netlify.app/list"&gt;Podcast page&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://podevcast.netlify.app/the_real_python_podcast/ep/1/"&gt;Episode page&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://podevcast.netlify.app/command_line_heroes/"&gt;Podcast List page&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://podevcast.netlify.app/category/"&gt;Categories page&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The Home page has the latest episode of all the podcasts. It also has an audio player to play on the go.&lt;/p&gt;&lt;p&gt;&lt;img alt="Podevcast home page" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1645113477/blog-media/iafi8nthhj0vvvrcbhka.png" /&gt;&lt;/p&gt;&lt;p&gt;The Podcast List page has the list of all the Podcasts available in the project. It has the name of the podcast with the link to the podcast page that has the list of all the episodes of that podcast.&lt;/p&gt;&lt;p&gt;&lt;img alt="Podevcast Podcast list" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1645113598/blog-media/cnprgufs3lrouvgdl8jn.png" /&gt;&lt;/p&gt;&lt;p&gt;The categories page has a list of categories of the podcasts like Web-development, backend, frontend, data science, DevOps, and so on. More categories will be added soon.&lt;/p&gt;&lt;p&gt;&lt;img alt="Podevcast Categories" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1645113626/blog-media/uloq4xi1d4zfo8sfl7bm.png" /&gt;&lt;/p&gt;&lt;p&gt;The Episode page has the audio player, the summary of the episode, canonical episode, and podcast page. &lt;/p&gt;&lt;p&gt;&lt;img alt="Podevcast Episode page" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1645113654/blog-media/omqks44p8b3u7jclkhgz.png" /&gt;&lt;/p&gt;&lt;h2 id="why-podevcast"&gt;Why Podevcast?&lt;/h2&gt;&lt;p&gt;Listening to music is one thing and listening to podcasts is different. I wanted a place from where developers can listen to developer-specific podcasts from a single source not just give out the article &lt;strong&gt;"Top 10 podcast you should be listening to as a developer"&lt;/strong&gt;. Having played around with python and some libraries like feedparser and jinga previously I saw this Hackathon as an opportunity to convert the idea into a project. It fits the JAMStack area well from the Hackathon and project perspective.  &lt;/p&gt;&lt;h2 id="tech-stack"&gt;Tech Stack&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Python&lt;/li&gt;&lt;li&gt;&lt;a href="https://pypi.org/project/feedparser/"&gt;feedparser&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://pypi.org/project/Jinja2/"&gt;jinga2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GitHub Actions&lt;/li&gt;&lt;li&gt;HTML / CSS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The data is extracted from various RSS Feeds using the feedparser library in Python. &lt;/p&gt;&lt;p&gt;Using GitHub Actions, the feed is refreshed every 24 hours to fetch the latest episodes from the respective podcast feeds. Basically, the GitHub action triggers a Netlify deployment that in turn generates the static site by running the script.&lt;/p&gt;&lt;p&gt;The command for running the script on Netlify and generating the &lt;code&gt;Podevcast&lt;/code&gt; webpage is :&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -r rquirements.txt &amp;amp;&amp;amp; python script.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the directory for deployed web pages (published directory) is &lt;code&gt;site&lt;/code&gt; which contains all the &lt;code&gt;HTML&lt;/code&gt; files that can be rendered as the website itself. &lt;/p&gt;&lt;h3 id="source-code"&gt;Source Code&lt;/h3&gt;&lt;p&gt;The project is available on &lt;a href="https://github.com/Mr-Destructive/podevcast"&gt;GitHub&lt;/a&gt;. Feel free to open a PR to add a Podcast or a Category. The project only has a few python files, the main script is &lt;code&gt;script.py&lt;/code&gt; which actually creates the home and the podcast list pages along with the episode pages. The &lt;code&gt;src&lt;/code&gt; folder contains some extra bits of scripts like creating the categories and category podcast list pages. Also, it has certain config files like &lt;code&gt;runtime.txt&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt;, and so on. Finally, there is the &lt;code&gt;podlist.json&lt;/code&gt; for the list of podcasts and &lt;code&gt;categorylist.json&lt;/code&gt; for the categories of podcasts. &lt;/p&gt;&lt;h3 id="core-script-snippet"&gt;Core Script Snippet&lt;/h3&gt;&lt;p&gt;The python script looks a lot bigger than the below snippet but it is doing the same process multiple times for different pages. There is also some type checking and tiny details that are added as per the requirement of the templates. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;feedparser&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="n"&gt;template_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./layouts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="n"&gt;index_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;episode_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template_env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;episode.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://freecodecamp.libsyn.com/rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pod_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;    &lt;span class="n"&gt;ep_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="n"&gt;cover_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="n"&gt;og_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="n"&gt;episode_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;    &lt;span class="n"&gt;episode_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ep_title&lt;/span&gt;    &lt;span class="n"&gt;episode_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;audiolink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;    &lt;span class="n"&gt;episode_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cover&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cover_image&lt;/span&gt;    &lt;span class="n"&gt;episode_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;og_link&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;site/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pod_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/ep/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ep_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;ep_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="n"&gt;episode_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;            &lt;span class="n"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;episode_obj&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above is a simple snippet of the core functionality of the script. It basically takes the RSS Feed &lt;code&gt;URL&lt;/code&gt; of the podcast and using &lt;code&gt;feedparser&lt;/code&gt; the data is retrieved in the form of a dictionary in Python. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Iterate over the &lt;code&gt;feed['entries']&lt;/code&gt; which is a list of lengths same as the number of episodes of that podcast, we then assign a set of values like &lt;code&gt;episode title&lt;/code&gt;, &lt;code&gt;audio link&lt;/code&gt;, &lt;code&gt;cover image&lt;/code&gt;, &lt;code&gt;canonical link for the episode&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; and so on. &lt;/li&gt;&lt;li&gt;Create a dictionary and store the key value as the mentioned data to access from the template. &lt;/li&gt;&lt;li&gt;Open a file in the structured file format and then parse the &lt;code&gt;episode_obj&lt;/code&gt; which is a dictionary to the episode template. &lt;/li&gt;&lt;li&gt;Access the dictionary using jinga2 templating tags. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Podevcast&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ep-title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ episode.title }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ episode.cover }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ep-link&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ episode.link }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Episode &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;audio&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ episode.audiolink }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;audio/mpeg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We can use &lt;code&gt;{{  }}&lt;/code&gt; to access any value parsed to the template via the script. Also, we can make use of &lt;code&gt;{% %}&lt;/code&gt; to run loops, conditionals, blocks, and other tags in the template. &lt;/p&gt;&lt;p&gt;&lt;img alt="Feedparser Illustration" src="https://res.cloudinary.com/dgpxbrwoz/image/upload/v1645110268/blogmedia/uwdzcwn07oxhppiptem9.png" /&gt;&lt;/p&gt;&lt;p&gt;So, we can see the feed is basically a dictionary that has a key-value pair and further, it can be a nested dictionary or a list as a value of a key. As in the case of &lt;code&gt;feed['entries']&lt;/code&gt; is a list with the length of the number of episodes of a podcast. And in the script, we use various keys to access various components, obviously, this requires a bit of exploration of the dictionary initially but it becomes easy thereafter to automate using Python. &lt;/p&gt;&lt;h3 id="episode-list"&gt;Episode List&lt;/h3&gt;&lt;p&gt;Currently, the episodes are added using the JSON file. It is not that user-friendly but still not a big task to simply add a link in a file. This is a #TODO that will require some external tooling to integrate into the webpage to ask for a form to submit a new Podcast. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Command Line Heroes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://feeds.pacific-content.com/commandlineheroes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Python Podcast__init__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.pythonpodcast.com/feed/mp3/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Real Python Podcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://realpython.com/podcasts/rpp/feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;The freeCodeCamp Podcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://freecodecamp.libsyn.com/rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;CodeNewbie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://feeds.codenewbie.org/cnpodcast.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Linux For Everyone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://feeds.fireside.fm/linuxforeveryone/rss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;JavaScript Jabber&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://feeds.fireside.fm/javascriptjabber/rss&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The process requires a manual test to validate a given RSS Feed as not all feeds are generated the same way and thus there are a few exceptions that need to be sorted out manually. For example, the Python Podcast doesn't have a cover image parsed into the RSS Feed, so there needs to be a check for it in the script and also in the template to restrict parsing and displaying the cover image link. &lt;/p&gt;&lt;h3 id="episode-categories"&gt;Episode Categories&lt;/h3&gt;&lt;p&gt;This is also a JSON file that holds the keys as the category and the value as a list of episode names (strictly the name from &lt;code&gt;feed['feed']['title']&lt;/code&gt;). There needs to be a human decision to be taken to add the podcast into a specific category. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Talk Python To Me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The Python Podcast.__init__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The Real Python Podcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python Bytes&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Full Stack Radio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;JavaScript Jabber&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Command Line Heroes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;LINUX Unplugged&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The Linux Cast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Linux For Everyone&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Data Science&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DataFramed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Data Skeptic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The Banana Data Podcast&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;Dev Ops&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DevOps Cafe Podcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Arrested DevOps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pulling the Strings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Azure DevOps Podcast&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DevOps and Docker Talk&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Though the JSON file is managed manually the generation of the categories is automated. Please feel to add other categories of your choice. &lt;/p&gt;&lt;h2 id="whats-coming"&gt;What's Coming?&lt;/h2&gt;&lt;p&gt;Certain features like adding podcast using a form, adding more podcasts, and categories for sure. Though what looks a bit cloudy in my opinion is adding accessibility links to music players because the RSS feed doesn't contain direct links to them. Though I still to explore and find out if it can be obtained from the feed itself. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search box for searching podcasts&lt;/li&gt;&lt;li&gt;Accessible Links to other platforms (Spotify, Itunes, etc)&lt;/li&gt;&lt;li&gt;More depth in categories (Languages/Frameworks/Niche-specific podcasts)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I'll add these features after checking the feasibility of the ideas and the response from the community after releasing them.&lt;/p&gt;&lt;h2 id="final-words"&gt;Final Words&lt;/h2&gt;&lt;p&gt;This project wouldn't have existed without this Hackathon as it gives a deadline to finish and hope to win something. Specially thanks to Hashnode and Netlify for organizing such a great opportunity in the form of a hackathon. Also, the maintainers of Python libraries like feedparser and jinja. The project would have been impossible without them. &lt;/p&gt;&lt;p&gt;If you like the project please give it a star on &lt;a href="https://github.com/Mr-Destructive/podevcast"&gt;GitHub&lt;/a&gt;. Have any feedback? Please let me know in the comments or on &lt;a href="https://twitter.com/MeetGor21"&gt;Twitter&lt;/a&gt;.  Thank you for reading, Hope you have a good time using Podevcast. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/bash-guide-p2'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;BASH Scripting Guide - PART - 2&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/bash-game-numberjack'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Learning BASH by making a Number game&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/podevcast-project</guid><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate></item><item><title>Pipenv: Python's Official Package Management tool</title><link>https://mr-destructive.github.io/techstructive-blog/pipenv-intro</link><description>Exploring the Python's recommended package management tool</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Pipenv is Python's officially recommended Package management tool, as the name suggests it combines the power of &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt;. It is really powerful and gives control of package management for a python project. It also has support for adding dev packages, python versions, smartly recognizing main and derived package installation/uninstallation, and so on. It is the &lt;a href="https://packaging.python.org/en/latest/tutorials/managing-dependencies/#managing-dependencies"&gt;official package management tool for Python&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;It is quite similar to npm for Nodejs in Javascript, or bundle for Ruby, cargo for Rust, and so on. It really simple and easy to use as it manages the overhead for package management for us and hence it is also a high-level package management tool as opposed to pip, which is not as powerful as Pipenv. So, in this article, we'll explore &lt;a href="https://pypi.org/project/pipenv/"&gt;Pipenv&lt;/a&gt; package manager for Python and how you can use it in your next python project. Let's get started. &lt;/p&gt;&lt;h2 id="install-pipenv"&gt;Install Pipenv&lt;/h2&gt;&lt;p&gt;&lt;a href="https://pypi.org/project/pipenv/"&gt;Pipenv&lt;/a&gt; is just like any other package in python, you can install it with pip as normally you install any other package with the command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pipenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipenv Install" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647193069/blog-media/hnhoeigfhx2hsypexgm5.png" /&gt;&lt;/p&gt;&lt;p&gt;You can refer to the documentation of Pipenv from &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="set-up-a-python-environment"&gt;Set up a Python Environment&lt;/h2&gt;&lt;p&gt;This step is not mandatory but it avoids any mistakes that you can make in the future while installing the package, so to simply create a new python environment for your project, you simply have to write the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv shell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipenv initialize" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647192853/blog-media/dahwaqnblvvvqyyw62uq.png" /&gt;This will create the virtual environment for Python in the local folder. It is quite similar to installing &lt;code&gt;virtualenv&lt;/code&gt; and then activating the env/venv folder script. Though pipenv is quite powerful as it automatically detects the environment. &lt;/p&gt;&lt;p&gt;If you look at it carefully, there will be a file generated after the command has been executed successfully. The file called &lt;code&gt;Pipfile&lt;/code&gt; without any extension will have been created in your current folder where you executed the command from. The file contains the version of python used in this project along with the list of dependencies(currently empty). Also the source from where it will download and manage the dependencies. &lt;/p&gt;&lt;p&gt;The Pipfile after simply creating the virtualenv via the command &lt;code&gt;pipenv shell&lt;/code&gt; looks something like follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[[source]]url = &amp;quot;https://pypi.org/simple&amp;quot;verify_ssl = truename = &amp;quot;pypi&amp;quot;[packages][dev-packages][requires]python_version = &amp;quot;3.8&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to set up a specific version of python for the virtual environment, you can do this using pipenv. The version should be installed in your system though for the pipenv to pick it up, if you have the specific version of python set up with all path variables configured, you can use the below command to set up the version of python in pipenv.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv --python version-number&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example : &lt;code&gt;pipenv --python 3.9&lt;/code&gt; will set up the virtual environment with python version &lt;code&gt;3.9&lt;/code&gt;. &lt;/p&gt;&lt;h2 id="what-is-pipfile"&gt;What is Pipfile&lt;/h2&gt;&lt;p&gt;Pipfile is basically a TOML file that has all the details of the different dependencies/packages and the version of Python used in the project/directory. A TOML is a simple configuration file that is reader-friendly, it is a map of keys and values as configuration data structures. In Pipenv, we can have keys like &lt;code&gt;package-names&lt;/code&gt; and the value as the &lt;code&gt;version-number&lt;/code&gt;, certain groups of dependencies like &lt;code&gt;dev-packages&lt;/code&gt; and &lt;code&gt;packages&lt;/code&gt;, etc. Pipenv is the file that Pipenv implements its package management environment. The file is really important and powerful as it can install all dependencies even if provided with &lt;code&gt;requirements.txt&lt;/code&gt; file. Yes, it can automatically detect that if you provide the path to that file. &lt;/p&gt;&lt;p&gt;Pipenv also has additional features like adding dev dependencies/packages in the project as a separate dependency. So if you want to test a feature with a specific package you can add it as a dev package and it will be stored separately. The pipfile will segregate the dependencies so that Pipenv can install/uninstall from the virtual environment. In short, Pipfile lets you have great control over your project's packages management. &lt;/p&gt;&lt;h2 id="installing-python-packages"&gt;Installing Python Packages&lt;/h2&gt;&lt;p&gt;Once your Pipenv is initialized as a virtual environment for Python, we can install dependencies with either &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;pipenv&lt;/code&gt;. This is the mistake that might get you trapped, if you already have not run the command &lt;code&gt;pipenv shell&lt;/code&gt; and installed any dependencies with &lt;code&gt;pip&lt;/code&gt;, you will install that dependency globally and make some mess of the project. So, it is advised to use &lt;code&gt;pipenv shell&lt;/code&gt; in order to activate your virtual environment. If you do not wanna do that, you can use the command to install any dependency without activating the virtual environment.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install &amp;lt;package-name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipenv Install Flask" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647192980/blog-media/dfsokm6e1easwvxtgehh.png" /&gt;&lt;/p&gt;&lt;p&gt;This will detect any virtual environment in the project, if it's not created already it will create it and install that package in that environment.&lt;/p&gt;&lt;p&gt;Installing any package using &lt;code&gt;pipenv&lt;/code&gt; will update the Pipenv file and the package to its packages list.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[[source]]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://pypi.org/simple&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;verify_ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pypi&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[packages]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[dev-packages]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;[requires]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="n"&gt;python_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3.8&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;OR &lt;/p&gt;&lt;p&gt;If you wish to install with pip, as usual, you need to be in the virtual subshell. If you already are, then Pipenv will add that dependency to the virtual environment. Note though, if you install any package with &lt;code&gt;pip&lt;/code&gt; and not with &lt;code&gt;pipenv&lt;/code&gt;, the package won't be added to Pipfile but would be installed in the virtual environment. &lt;/p&gt;&lt;p&gt;&lt;img alt="Pipenv pip install" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647193149/blog-media/suaykqsyrgn1w0mou7f0.png" /&gt;&lt;/p&gt;&lt;p&gt;Here, if we type the command &lt;code&gt;pipenv graph&lt;/code&gt; it will show us a nice detailed list of all the installed dependencies. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv graph&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv graph&lt;span class="nv"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.3  - click &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.1.2, installed: &lt;span class="m"&gt;8&lt;/span&gt;.0.4&lt;span class="o"&gt;]&lt;/span&gt;    - colorama &lt;span class="o"&gt;[&lt;/span&gt;required: Any, installed: &lt;span class="m"&gt;0&lt;/span&gt;.4.4&lt;span class="o"&gt;]&lt;/span&gt;  - itsdangerous &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0, installed: &lt;span class="m"&gt;2&lt;/span&gt;.1.1&lt;span class="o"&gt;]&lt;/span&gt;  - Jinja2 &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.0, installed: &lt;span class="m"&gt;3&lt;/span&gt;.0.3&lt;span class="o"&gt;]&lt;/span&gt;    - MarkupSafe &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0, installed: &lt;span class="m"&gt;2&lt;/span&gt;.1.0&lt;span class="o"&gt;]&lt;/span&gt;  - Werkzeug &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0, installed: &lt;span class="m"&gt;2&lt;/span&gt;.0.3&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.27.1  - certifi &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2017&lt;/span&gt;.4.17, installed: &lt;span class="m"&gt;2021&lt;/span&gt;.10.8&lt;span class="o"&gt;]&lt;/span&gt;  - charset-normalizer &lt;span class="o"&gt;[&lt;/span&gt;required: ~&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.0, installed: &lt;span class="m"&gt;2&lt;/span&gt;.0.12&lt;span class="o"&gt;]&lt;/span&gt;  - idna &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.5,&amp;lt;&lt;span class="m"&gt;4&lt;/span&gt;, installed: &lt;span class="m"&gt;3&lt;/span&gt;.3&lt;span class="o"&gt;]&lt;/span&gt;  - urllib3 &lt;span class="o"&gt;[&lt;/span&gt;required: &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.21.1,&amp;lt;&lt;span class="m"&gt;1&lt;/span&gt;.27, installed: &lt;span class="m"&gt;1&lt;/span&gt;.26.8&lt;span class="o"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;As you might have guessed, the above command is equivalent to the &lt;code&gt;pip freeze&lt;/code&gt; command, but just compare the details both tools have. Pipenv really shines here.&lt;/p&gt;&lt;p&gt;If you compare the output of Pipfile and &lt;code&gt;pipenv graph&lt;/code&gt; you get a bit confused as to why is there are so fewer packages in the file. So, &lt;strong&gt;Pipfile doesn't store the sub-packages/dependencies of a certain base package&lt;/strong&gt;. Let's take, for example, Flask here, we have Flask as the main package, and &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;Jinja2&lt;/code&gt;, &lt;code&gt;Werkzeug&lt;/code&gt; are its sub dependencies, further &lt;code&gt;colorama&lt;/code&gt; and &lt;code&gt;MarkupSafe&lt;/code&gt; are in turn dependencies of &lt;code&gt;click&lt;/code&gt; and &lt;code&gt;Jinja2&lt;/code&gt;. So, Pipfile just includes the top-level packages, pipenv is smart enough to install the rest. It also doesn't include &lt;code&gt;requests&lt;/code&gt; but it is indeed included in the &lt;code&gt;graph&lt;/code&gt;. This is because Pipenv will only put the dependencies in the Pipfile if it has been installed via the &lt;code&gt;pipenv&lt;/code&gt; command.&lt;/p&gt;&lt;p&gt;&lt;img alt="Pipenv Graph vs pip freeze" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647193333/blog-media/gzo95pbquaioujtqvntu.png" /&gt;&lt;/p&gt;&lt;p&gt;You can use &lt;code&gt;pip freeze&lt;/code&gt; here as well as we are technically in a Python virtual environment. And you can clearly see the difference. Pipenv is a high-level tool compared to pip, it technically uses &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; and leverages both of them to become a smart package management tool. &lt;/p&gt;&lt;h2 id="what-is-the-pipfilelock"&gt;What is the Pipfile.lock&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;If you are coming from &lt;code&gt;Javascript&lt;/code&gt; world, it is similar to &lt;code&gt;package-lock.json&lt;/code&gt; file.&lt;/li&gt;&lt;li&gt;If you are coming from &lt;code&gt;Ruby&lt;/code&gt; world, it is similar to the &lt;code&gt;Gemfile.lock&lt;/code&gt; file.&lt;/li&gt;&lt;li&gt;If you are coming from &lt;code&gt;Rust&lt;/code&gt; world, it is similar to the &lt;code&gt;cargo.lock&lt;/code&gt; file.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Ok, you get the idea, it is a file that more robustly specifies the version of the packages without conflicting with the other version or the Python version itself. If you look at the Pipfile.lock also has hashes that store the sub-packages as well. The file format here is JSON as opposed to TOML for the Pipfile. &lt;/p&gt;&lt;h2 id="configuring-the-pipenv-environment"&gt;Configuring the Pipenv environment&lt;/h2&gt;&lt;p&gt;Now, a question you might have is where is the virtual environment? Is it there? Of course, it will be there, it is configured to a different location though. By default, it will be stored in the &lt;code&gt;~\.virtualenvs\&lt;/code&gt; folder. &lt;/p&gt;&lt;p&gt;You can get the location of the current virtualenv with the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv --venv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pipenv --venvC:\Users\acer\.virtualenvs\pipenv-blog-gHY6vF9t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   For Windows, it is in the Admin user(in my case it is named &lt;code&gt;acer&lt;/code&gt;) followed by the hidden folder &lt;code&gt;virtualenvs&lt;/code&gt;, this folder will contain all the virtualenvs for different projects using &lt;code&gt;pipenv&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;If you wished to change this location and keep the virtual environment folder in the same directory as your project, you can set up the environment variable for it as follows:&lt;/p&gt;&lt;p&gt;For Linux/macOS:Add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt; or other equivalent shell configuration file.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;export PIPENV_VENV_IN_PROJECT=&amp;quot;enabled&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For Windows:&lt;/p&gt;&lt;p&gt;Add it to the PATH Environment variable.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set PIPENV_VENV_IN_PROJECT=&amp;quot;enabled&amp;quot;   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;This will make sure the virtualenvs for the project in &lt;code&gt;pipenv&lt;/code&gt; are created inside the current folder itself and not in a single &lt;code&gt;~\.virtualenvs\&lt;/code&gt; folder. &lt;/p&gt;&lt;h2 id="creating-the-requirementstxt-file"&gt;Creating the requirements.txt file&lt;/h2&gt;&lt;p&gt;Let's say you also want to create a requirements.txt file for distributing your project to someone else, as not everyone will use Pipenv to manage their dependencies. It is really straightforward and quick to create a requirements.txt file from the Pipenv environment. &lt;/p&gt;&lt;p&gt;The below command will make the &lt;code&gt;requirements.txt&lt;/code&gt; file from the existing Pipenv project.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv lock -r &amp;gt;requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipenv to requirements.txt file" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647193388/blog-media/e6t68b7ckrsrvadvmeqa.png" /&gt; &lt;br /&gt;This will create the requirements.txt file, based on the Pipfile. Pipenv is smart again to provide all of the required dependencies to the requirements.txt in order that pip will be able to install all the required dependencies. &lt;/p&gt;&lt;h2 id="using-requirementstxt-in-pipenv"&gt;Using requirements.txt in Pipenv&lt;/h2&gt;&lt;p&gt;We can install all the dependencies from the requirements.txt file while we are migrating from bare-bones virtualenv and pip to Pipenv. Pipenv will install all the mentioned dependencies and it will also add its checks for the appropriate checks for dependencies. &lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install -r requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This will install the dependencies mentioned in the requirements.txt file into the Pipenv virtual environment. &lt;/p&gt;&lt;h2 id="managing-dev-packages"&gt;Managing Dev Packages&lt;/h2&gt;&lt;p&gt;Let's say we want to install a package but we are not sure to use it in production or the actual script, just a test for how it will work. Thus we have dev packages to install optional or testing packages. &lt;/p&gt;&lt;p&gt;To install a dev-dependency or package, you can install via the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv install &amp;lt;package-name&amp;gt; --dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipenv dev package install" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647194653/blog-media/x5dimgfd2ikm2ercbzhv.png" /&gt;&lt;/p&gt;&lt;p&gt;If we see the Pipfile, the &lt;code&gt;django&lt;/code&gt; package that we installed tagged with &lt;code&gt;--dev&lt;/code&gt; will be in the &lt;code&gt;dev-packages&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat Pipfile[[source]]url = &amp;quot;https://pypi.org/simple&amp;quot;verify_ssl = truename = &amp;quot;pypi&amp;quot;[packages]flask = &amp;quot;*&amp;quot;[dev-packages]django = &amp;quot;*&amp;quot;[requires]python_version = &amp;quot;3.8&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we wanted to uninstall all the dev-packages, we can simply enter the command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv uninstall --all-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipenv uninstall devpackages" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647261079/blog-media/bg9n7aj6rfxsvdwflnah.gif" /&gt;&lt;/p&gt;&lt;p&gt;This will simply uninstall all the dev dependencies/packages from the pipenv environment and also remove them from the packages list in Pipfile. If you wished to uninstall a specific package in pipenv, you can uninstall it by the simple command:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv uninstall &amp;lt;package-name&amp;gt;````## Installing/Uninstalling all packagesTo install only the default packages and not dev-packages. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;pipenv install &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;To install or configure a project, if you want to test the project with all the dev dependencies, you can install them with:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;pipenv install --dev&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;This will install all the packages both `packages` and `dev-packages`. If you want to uninstall all the packages in pipenv, you can use the command :&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;pipenv uninstall --all```&lt;/p&gt;&lt;p&gt;This will uninstall all the default and dev packages from pipenv. This is like starting a fresh virtual environment. &lt;/p&gt;&lt;h3 id="references"&gt;References:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://pipenv.pypa.io/en/latest/"&gt;Pipenv documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Real Python - Pipenv Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, this was a brief introduction to &lt;code&gt;pipenv&lt;/code&gt; which is Python's recommended package management tool. We saw that we have control over the dependencies and packages in a virtual environment which is taken care of automatically for us. We don't have to activate the environment to install or manage any package for a project.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/bash-dictionary-scrapper'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Scrapping the meaning of a word from dictionary.com using BASH script.&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-operators'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Operators&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/pipenv-intro</guid><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Pipx: A python package consumption tool for CLI packages</title><link>https://mr-destructive.github.io/techstructive-blog/pipx-intro</link><description>Exploring the pipx package in python to run CLI tools globally in an isolated environment</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Previously, I explored the &lt;a href="https://mr-destructive.github.io/techstructive-blog/pipenv-intro/"&gt;pipenv&lt;/a&gt; as a python package management tool and this week it is time for exploring a python CLI package isolation tool called &lt;code&gt;pipx&lt;/code&gt;. It is a really simple and powerful tool for running commands as an executable from an isolated environment. Those commands should be associated with a python package that has CLI. In pipx, we install the package once and we can use the package anywhere on our system isolated from other virtual environments. &lt;/p&gt;&lt;p&gt;In this article, We will explore the pipx package/tool in python. From installation to setting up your environment and removing some friction in your python workflow. This won't be an in-depth guide of pipx, though we would cover a few python packages that can be easily used in your environment.&lt;/p&gt;&lt;h2 id="what-is-pipx"&gt;What is Pipx&lt;/h2&gt;&lt;p&gt;Pipx is a python package that works similar to &lt;code&gt;pip&lt;/code&gt; but it is quite specific to the usage. It can run CLI commands of any python package from anywhere on your system. It uses its own virtual environment for managing the packages and the python version. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Pipx is a tool to install and execute CLI commands provided in the python packages&lt;/li&gt;&lt;li&gt;Pipx is not a python package management tool like pip or pipenv.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Pipx is similar to &lt;code&gt;npx&lt;/code&gt; for nodejs. Though the major difference is that pipx runs and installs all packages/tools globally unlike npx. &lt;/p&gt;&lt;h2 id="install-pipx"&gt;Install Pipx&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Pipx requires Python 3.6 or above.&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;You can install it normally like a python package with pip:&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pipx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To find out if pipx was successfully installed, you can simply type in the command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it gives a number and no errors, it has been successfully installed in your system globally.&lt;/p&gt;&lt;h2 id="pipx-commands"&gt;Pipx Commands&lt;/h2&gt;&lt;p&gt;The primary commands that pipx can use are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;pipx install&lt;/li&gt;&lt;li&gt;pipx list&lt;/li&gt;&lt;li&gt;pipx run&lt;/li&gt;&lt;li&gt;pipx inject&lt;/li&gt;&lt;li&gt;pipx uninstall&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For further command options for a specific use case, you can use the &lt;code&gt;pipx -h&lt;/code&gt; command to get the detailed list of commands and options available in pipx.&lt;/p&gt;&lt;p&gt;Also, the documentation of pipx is really incredibly beginner-friendly. You can follow up with the article from the &lt;a href="https://pypa.github.io/pipx/"&gt;documentation&lt;/a&gt; webpage or the &lt;a href="https://github.com/pypa/pipx/"&gt;GitHub&lt;/a&gt; repository. The documentation and the webpage are simple single-page websites that really make learning the tool easier and it also has a well-documented package.&lt;/p&gt;&lt;h3 id="pipx-install-command"&gt;Pipx Install Command&lt;/h3&gt;&lt;p&gt;Pipx can install packages in a virtual environment specific to the package provided. This means that you will have different virtual envs for each package you install and not a single virtual env for a project, it creates and makes the package venvs accessible globally. The next step after installing the package in a different venv is to make that package commands accessible via the PATH environment variable. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If say we install &lt;a href="https://pypi.org/project/pgcli/"&gt;pgcli&lt;/a&gt;, a package for interacting with postgres database using python in the Command line. We will simply enter the following commands:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install pgcli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="install package with pipx" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647783261/blog-media/du830o3fbqogvkaesxnq.png" /&gt;&lt;/p&gt;&lt;p&gt;We can use the package pgcli globally in our system. So, we have access to the databases in the local Postgres server. We can run the commands as normally as we want using the pgcli by just prefixing with &lt;code&gt;pipx run&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx run pgcli &amp;lt;local_database_name&amp;gt; -U postgres&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="PGCLI demonstration GIF" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782221/blog-media/dfpwlxkh5ybqj5pdos8d.gif" /&gt;&lt;/p&gt;&lt;p&gt;This is a really cool way to interact with CLI applications without installing separately or globally, using pipx the virtual environment for the specific package makes it a clean and persistent behavior for running the commands anywhere in the system.&lt;/p&gt;&lt;p&gt;If you want to know more about pgcli tool/package in Python, you can it's &lt;a href="https://www.pgcli.com/docs"&gt;documentation&lt;/a&gt; webpage or the &lt;a href="https://github.com/dbcli/pgcli"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;&lt;h4 id="pipx-default-path"&gt;Pipx Default PATH&lt;/h4&gt;&lt;p&gt;The default path at which pipx stores the virtual environments for each package is by default the &lt;code&gt;~/.local/pipx/venvs&lt;/code&gt;(here ~ refers to the root/default directory), the documentation says that it can be changed by editing the environment variable &lt;code&gt;PIPX_HOME&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;The default path at which pipx stores the binaries/command apps for each package is stored in the path &lt;code&gt;~/.local/bin&lt;/code&gt;, even this path can be modified by editing the environment variable &lt;code&gt;PIPX_BIN_DIR&lt;/code&gt;&lt;/p&gt;&lt;h3 id="pipx-list-command"&gt;Pipx List Command&lt;/h3&gt;&lt;p&gt;Pipx list command simply lists the executables or the commands you can run with pipx. This command will display the commands associated with the packages that are installed in the pipx environment. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pipx list output" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782349/blog-media/qu95nynklbuceqqd9qke.png" /&gt;&lt;/p&gt;&lt;p&gt;This command gives a detailed list of the commands associated with their respective packages. It also gives the meta-information like the Python version in which the package was installed. &lt;/p&gt;&lt;h3 id="pipx-run-command"&gt;Pipx Run Command&lt;/h3&gt;&lt;p&gt;The most useful command in pipx has to be &lt;code&gt;pipx run&lt;/code&gt;, this command can execute provide package along with the specified command associated with the package. &lt;/p&gt;&lt;p&gt;The structure of the command is as follows:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx run &amp;lt;package_name&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The pipx documentation refers to the &lt;code&gt;command&lt;/code&gt; as an &lt;code&gt;APP&lt;/code&gt;, as it is an executable created from the package specification.&lt;/p&gt;&lt;p&gt;If the APP/command name is not matching the &lt;code&gt;package_name&lt;/code&gt;(most of the time it won't), you need to add an argument to the run command.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx run --spec &amp;lt;package_name&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--spec&lt;/code&gt; option allows specifying a certain package to be used while running the command/APP. Using this option with the &lt;code&gt;pipx run&lt;/code&gt; command, we can run package-specific commands. For example, if we want to run an ipython from the terminal, without messing up the current environment i.e. without installing any package. You can do that by using pipx.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install dailydotdev-bookmark-clipipx run --spec dailydotdev-bookmark-cli bookamrks&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="dailydotdev-bookmark-cli demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782547/blog-media/vsfmwlzazqtosuwttexb.gif" /&gt;&lt;/p&gt;&lt;p&gt;This is my shameless plug of installing my &lt;a href="https://github.com/Mr-Destructive/bookmarks-cli"&gt;first python package&lt;/a&gt;. The command used for the CLI is totally not related to the package name and hence we have to use the &lt;code&gt;--spec&lt;/code&gt; option.&lt;/p&gt;&lt;h2 id="install-and-run-packages-from-pipx"&gt;Install and Run packages from Pipx&lt;/h2&gt;&lt;p&gt;Any python package which provide a Command Line Interface can be installed and run with pipx. Some of the packages like &lt;a href="https://docs.pytest.org/en/7.1.x/contents.html"&gt;pytest&lt;/a&gt;, &lt;a href="https://pipenv-fork.readthedocs.io/en/latest/install.html"&gt;pipenv&lt;/a&gt;, &lt;a href="https://github.com/Textualize/rich-cli"&gt;rich-cli&lt;/a&gt;, &lt;a href="https://github.com/psf/black"&gt;Black code formatter&lt;/a&gt;, &lt;a href="https://markata.dev/"&gt;markata&lt;/a&gt; and many others. You can install any of the packages which do have a cli to interact with on the go with pipx. &lt;/p&gt;&lt;h3 id="running-ipython-shell"&gt;Running Ipython shell&lt;/h3&gt;&lt;p&gt;We can use &lt;a href="https://pypi.org/project/ipython/"&gt;Ipython&lt;/a&gt; shell from pipx as an isolated environment. We simply install the package first, after installing the package it creates the virtual environment. Creating a separate virtual environment registers the app/command binaries into the PATH environment of the system so that they can be accessed globally. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install ipythonpipx run ipython&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="IPython pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782651/blog-media/ssgymybn0dwi8ocs6xpf.png" /&gt;&lt;/p&gt;&lt;p&gt;For further documentation on ipython using the CLI, you can refer to the &lt;a href="https://github.com/ipython/ipython"&gt;GitHub&lt;/a&gt; link or the &lt;a href="https://ipython.org/ipython-doc/3/interactive/reference.html#command-line-usage"&gt;documentation&lt;/a&gt; page.&lt;/p&gt;&lt;h3 id="reading-an-ipynb-file-from-pipx-with-jut"&gt;Reading an IPYNB file from pipx with JUT&lt;/h3&gt;&lt;p&gt;If you just want to read an ipynb file from the terminal, you can do that using &lt;a href="https://pypi.org/project/jut/"&gt;jut&lt;/a&gt; by specifying the command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install jutpipx run jut &amp;lt;notebook.ipynb&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="jut pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782686/blog-media/ddm5uiqarjjmedhqvcsk.png" /&gt;&lt;/p&gt;&lt;p&gt;You can find more information on JUT via their official &lt;a href="https://github.com/kracekumar/jut"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;&lt;h3 id="using-rich-cli-to-display-text-using-pipx"&gt;Using rich-cli to display text using pipx&lt;/h3&gt;&lt;p&gt;We can even use &lt;a href="https://pypi.org/project/rich-cli/"&gt;Rich-CLI&lt;/a&gt; to print rich content in the project. Rich-CLI as the name suggests is a CLI for the Rich package in python. It is really intuitive and simple to use. If we want to take snaps of the rich content of a markdown file, source file, dataset, etc. rich-cli is a tool that can quickly do that. Use pipx to install the package globally and simply run wherever required in an isolated environment.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install rich-clipipx run --spec rich-cli rich &amp;quot;[blue]Hello[/], [yellow]World[/]!&amp;quot; --print&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="rich-cli pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782738/blog-media/xvdyhxjpj2hsghl2x1ng.png" /&gt;&lt;/p&gt;&lt;p&gt;This will give you a colorful display of "Hello, World" without you messing up your current project. Pipx has an isolated environment so it doesn't tinker with your local virtual environment or project. Though you can use your current project to use those CLI to execute commands which might require the source file in the project.&lt;/p&gt;&lt;p&gt;We can even print the markdown file in a rich format, simply using pipx and rich-cli. There are a lot of things we can do with rich-cli.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx run rich-cli &amp;lt;markdown_file.md&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="rich-cli markdown demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647785474/blog-media/bwmvucrcgrtgwdv58ffj.png" /&gt;&lt;/p&gt;&lt;p&gt;For further reading on the rich-cli package, you visit their &lt;a href="https://github.com/Textualize/rich-cli"&gt;GitHub&lt;/a&gt; link and the &lt;a href="https://github.com/Textualize/rich-cli/blob/main/README.md"&gt;Documentation&lt;/a&gt; Readme.&lt;/p&gt;&lt;h3 id="using-pytest-to-perform-a-test-for-the-current-project"&gt;Using pytest to perform a test for the current project&lt;/h3&gt;&lt;p&gt;&lt;a href="https://pypi.org/project/pytest/"&gt;Pytest&lt;/a&gt; allows writing simple and scalable tests for Python apps, libraries, and packages. We can use it to write tests in the project without adding it as a dependency in the python environment. Simply install the package with pipx and run the tests in an isolated environment.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install pytestpipx run pytest temp.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Pytest pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782771/blog-media/qutb0bxzlnwctl9mbuon.png" /&gt;&lt;/p&gt;&lt;p&gt;Here, we can see the pytest was performed on the &lt;code&gt;temp.py&lt;/code&gt; file which can be any application file for your project. This gave us results without installing pytest in our application's virtual environment. This becomes really convenient to run certain package commands whose package should not be a dependency on your project in the virtual environment.&lt;/p&gt;&lt;p&gt;You can visit Pytest's &lt;a href="https://github.com/pytest-dev/pytest/"&gt;GitHub&lt;/a&gt;, &lt;a href="https://docs.pytest.org/en/stable/"&gt;Documentation&lt;/a&gt; and their &lt;a href="https://pytest.org/"&gt;Home Page&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="using-black-python-code-formatter"&gt;Using Black (Python code formatter)&lt;/h3&gt;&lt;p&gt;We can use pipx to even format the python source files using &lt;a href="https://pypi.org/project/black/"&gt;black&lt;/a&gt;. We don't have to install &lt;code&gt;black&lt;/code&gt; as a dependency in the project. Pipx will simply install black in its isolated environment and run the specified command.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install blackpipx run black temp.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Black pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782823/blog-media/dtnae85fvgae2y4aiqkg.png" /&gt;&lt;/p&gt;&lt;p&gt;Black is a code formatter in Python, it basically edits your source python files for any incorrect python semantics and syntax, it corrects/formats them without a compromise. You can visit the &lt;a href="https://github.com/psf/black"&gt;GitHub&lt;/a&gt;, &lt;a href="https://black.readthedocs.io/en/stable"&gt;Documentation&lt;/a&gt; or the Black package &lt;a href="https://black.vercel.app/"&gt;Playground webpage&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="using-httpie-curl-equivalent-in-python"&gt;Using httpie (curl equivalent in Python)&lt;/h3&gt;&lt;p&gt;We can use the &lt;a href="https://pypi.org/project/httpie/"&gt;httpie&lt;/a&gt; package in python which is a CLI tool for HTTP clients. It is very similar to the &lt;code&gt;curl&lt;/code&gt; command in Linux. We can even use that with pipx to test out API endpoints or any website that you might be working with without leaving the terminal. For further details on the httpie package, you can visit their &lt;a href="https://httpie.io/"&gt;Home page&lt;/a&gt;, &lt;a href="https://github.com/httpie"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://pypi.org/project/httpie/"&gt;PyPI webpage&lt;/a&gt;. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install httpiepipx run --spec httpie http -v dev.to&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="httpie pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647782857/blog-media/jbaudm3pbnnsjtzy5ok7.png" /&gt;&lt;/p&gt;&lt;p&gt;Here, we can see the package simply gives a simple output of the headers of the request. It is smart enough to understand the web link as &lt;code&gt;https://dev.to&lt;/code&gt; unlike CURL which needs to have an exact match.&lt;/p&gt;&lt;h3 id="running-markata-blog-with-pipx"&gt;Running Markata blog with pipx&lt;/h3&gt;&lt;p&gt;As said, every package that bundles itself with a CLI can be installed and run from anywhere. So, &lt;a href="https://pypi.org/project/markata/"&gt;markata&lt;/a&gt; which is a plugin-driven static site generator which is a python package also bundles with a CLI. Using the base app(markata) we can run its associated commands like &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, etc. I use this to build my blog.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipx install markatapipx run markata build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Markata pipx demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1647783021/blog-media/cygzwixyzwv4wwsccbfc.gif" /&gt;&lt;/p&gt;&lt;p&gt;You can visit the Markata's &lt;a href="https://markata.dev/"&gt;documentation&lt;/a&gt; web page or the &lt;a href="https://github.com/WaylonWalker/markata"&gt;GitHub&lt;/a&gt; repository for further insights on the Static site generator.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;If you want to explore more packages that you can use with pipx, then you can look at the docs guide &lt;a href="https://pypa.github.io/pipx/programs-to-try/"&gt;programs-to-try&lt;/a&gt; section.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this simple introduction, we were able to understand the basics of pipx which is a python package for isolating and running CLI-specific package commands. We saw how to setup pipx, install packages, run the commands from the package and interact with the virtual environment that it creates for each package we install. &lt;/p&gt;&lt;p&gt;Thank you for reading, if you have any comments, suggestions, feedback please let me know in the comments. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-un-comment-p1'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Comment/Uncomment Code: Vim for Programmers&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-for-bash'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Setting up Vim for BASH Scripting&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/pipx-intro</guid><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Feedparser: Python package for reading RSS feeds</title><link>https://mr-destructive.github.io/techstructive-blog/python-feedparser</link><description>Read and extract content from RSS feeds in python using feedparser</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;a href="https://pypi.org/project/feedparser/"&gt;Feedparser&lt;/a&gt; is a simple but powerful python package that can be used to extract information about a specific webpage or a publication with its RSS feed(not only RSS). By providing the RSS feed link, we can get structured information in the form of python lists and dictionaries. It can be basically used in a pythonic way to read RSS feeds, it is really simple to use and it even normalizes different types of feeds.&lt;/p&gt;&lt;p&gt;Today, we will be taking a look at the feedparser package in python and how to extract information from a given RSS feed.&lt;/p&gt;&lt;h2 id="what-is-feedparser"&gt;What is feedparser&lt;/h2&gt;&lt;p&gt;Feedparser is a python package for parsing feeds of almost any type such as RSS, Atom, RDF, etc. It is a package that allows us to parse or extract information using python semantics. For example, all the latest posts from a given blog can be accessed on a list in python, further different attributes like links, images, titles, descriptions, can be accessed within a dictionary as key-value pairs. &lt;/p&gt;&lt;h2 id="installing-feedparser"&gt;Installing feedparser&lt;/h2&gt;&lt;p&gt;As feedparser is a python package you can install it with pip very easily.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install feedparser&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will install feedparser in your respective python environment, it can be a virtual environment or a global environment. &lt;/p&gt;&lt;h2 id="using-feedparser"&gt;Using feedparser&lt;/h2&gt;&lt;p&gt;To test out feedparser, you can open up a python repl, in the environment where you installed the Feedparser package.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Firstly import the package.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;feedparser&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can use the module in our application to get all of the functions or methods from the package.&lt;/p&gt;&lt;h2 id="parse-an-rss-feed-url"&gt;Parse an RSS feed URL&lt;/h2&gt;&lt;p&gt;To parse an RSS feed link, we can simply use the &lt;code&gt;parse&lt;/code&gt; function from the feedparser package. The &lt;a href="https://feedparser.readthedocs.io/en/latest/introduction.html"&gt;parse&lt;/a&gt; function takes in a string that can be a URL or a file path. Generally, the URL seems to be more useful. So, we can look up any RSS feed on the internet like your blog's feed, publications feeds, and so on. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The parse function basically fetches the feed from the provided URL or the file. It extracts the feed in a systematic way storing each piece of information in a structured format. At the high level, it returns a dictionary with a few key-value pairs. Further, each key might have a list or nested dictionaries in it. The key identifiers are named in a uniform manner for any feed you parse in the function. Though there might be a few cases where there might be additional information to be parsed, it can even add more information ad shape the structure accordingly.&lt;/p&gt;&lt;p&gt;This will give you a dictionary in python, that can have more or less similar keys. The most common keys that can be used in extracting information are &lt;code&gt;entries&lt;/code&gt; and &lt;code&gt;feed&lt;/code&gt;. We can get all the keys associated with a feed that is parsed using the &lt;code&gt;keys&lt;/code&gt; function.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Feedparser Keys" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648370871/blog-media/ph6bsxobyifqmusumirx.png" /&gt;&lt;/p&gt;&lt;p&gt;The keys function basically gets all the keys in the dictionary in python.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; feedparser.parse(&amp;quot;https://dev.to/feed/&amp;quot;).keys()dict_keys([&amp;#39;bozo&amp;#39;, &amp;#39;entries&amp;#39;, &amp;#39;feed&amp;#39;, &amp;#39;headers&amp;#39;, &amp;#39;etag&amp;#39;, &amp;#39;href&amp;#39;, &amp;#39;status&amp;#39;, &amp;#39;encoding&amp;#39;, &amp;#39;version&amp;#39;, &amp;#39;namespaces&amp;#39;])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give out a list of all the keys in the feed which we have parsed from the RSS feed previously. From this list of keys, we can extract the required information from the feed.&lt;/p&gt;&lt;p&gt;Before we extract content from the feed, we can store the dictionary that we get from calling the parse function. We can assign it to a variable and store the dictionary for later use.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="extract-the-contents-from-the-feed"&gt;Extract the contents from the feed&lt;/h2&gt;&lt;p&gt;Now, we have the dictionary of the feed, we can easily access the values from the listed keys. We can get the list of all the posts/podcasts/entries or any other form of content the feed is serving for from the &lt;code&gt;entries&lt;/code&gt; key in the dictionary. &lt;/p&gt;&lt;p&gt;To get more information and the most possible keys in the returned dictionary, you can refer to the feedparser &lt;a href="https://feedparser.readthedocs.io/en/latest/reference.html"&gt;reference list&lt;/a&gt;&lt;/p&gt;&lt;h3 id="access-articles-from-feed"&gt;Access Articles from Feed&lt;/h3&gt;&lt;p&gt;To access the articles from the feed, we can access those as a list of the articles. Using the &lt;code&gt;entries&lt;/code&gt; key in the dictonary as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;entries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have already defined a variable set to the parse function, you can use that for more efficient extraction.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;entries&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="get-number-of-articlesentries-from-feed"&gt;Get Number of Articles/Entries from Feed&lt;/h3&gt;&lt;p&gt;To get the number of entries in the list, we can simply use the len function in python.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Feedparser Number of Entries" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648371042/blog-media/didijxcvsgvl4scrnhje.png" /&gt;&lt;/p&gt;&lt;p&gt;This gives us the number of entries in the provided feed. This is basically the list that stores all the content from the publication/website. So, we can iterate over the list and find all the different attributes we can extract.&lt;/p&gt;&lt;h3 id="get-details-of-the-entries-from-the-feed"&gt;Get details of the entries from the feed&lt;/h3&gt;&lt;p&gt;To get detail information about a particular article/entry in the feed, we can iterate over the &lt;code&gt;feed.entries&lt;/code&gt; list and access what we require. &lt;/p&gt;&lt;p&gt;So, we will iterate over the entries and simply print those entries one by one to inspect what and how we can extract them. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It turns out that every entry in the list is a dictionary again containing a few key-value pairs like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;summary&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, etc. To get a clear idea of those keys we can again use the keys function in python.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Feedparser Entries Keys" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648371221/blog-media/c8uog85goe9jzrzl1pq1.png" /&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;dict_keys&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;authors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published_parsed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guidislink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;summary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;summary_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we have all the keys associated with the entries we can now extract the specific details like the content, like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;summary_detail&lt;/code&gt;(actual content in this case).  &lt;/p&gt;&lt;p&gt;Though this might not be the same for all RSS feeds, it might be very similar and a matter of using the right keyword for the associated keys in the list of dictionaries.  &lt;/p&gt;&lt;p&gt;Let's say, we want to print out the titles of all the entries in the feed, we can do that by iterating over the entries list and fetching the title from the iterator as &lt;code&gt;entry.title&lt;/code&gt; if &lt;code&gt;entry&lt;/code&gt; is the iterator.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Feedparser List of Entries" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648372532/blog-media/lhofdzmr3ks0fuut7pxm.png" /&gt;&lt;/p&gt;&lt;p&gt;Similarly, we will get the links of the entries using the link key in the dictionary.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="get-information-about-the-websitepublication"&gt;Get information about the Website/Publication&lt;/h3&gt;&lt;p&gt;To get the metadata about the information you are extracting from i.e. the website or any publication, we can use the key &lt;code&gt;feed&lt;/code&gt;. This key stores another dictionary as its value which might have information like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; or &lt;code&gt;subtitle&lt;/code&gt;, &lt;code&gt;canonical_url&lt;/code&gt;, or any other data related to the website company.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Feedparser Feed" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648373487/blog-media/r7hiojfdrtrjqfhkjbdt.png" /&gt;&lt;/p&gt;&lt;p&gt;From this dictionary, we can now simply extract the specific information from the keys. But first, as in the previous examples, we need a clear idea of what are the keys in the dictionary where we can extract the specific value.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url_of_the_rss_feed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the keys like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;links&lt;/code&gt;, &lt;code&gt;subtitle&lt;/code&gt;, we can get the information on the website/company level and not related to the specific post in the entries list. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# get the title of the webpage/publication&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="c1"&gt;# get the links associated with the webpage&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="c1"&gt;# get the cover-image for the webpage&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can further get information specific to your feed. &lt;/p&gt;&lt;h2 id="checking-for-keys-existence-in-the-dictionary-of-feed"&gt;Checking for keys existence in the dictionary of feed&lt;/h2&gt;&lt;p&gt;We also need to check for the existence of a key in a dictionary in the provided feed, this can be a good problem if we are parsing multiple RSS feeds which might have a different structure. This problem occurred to me in the making of &lt;a href="https://podevcast.netlify.app"&gt;podevcast&lt;/a&gt; where I had to parse multiple RSS feeds from different RSS generators. Some of the feeds had the cover image but most of them didn't. So, we need to make sure we have a check over those missing keys.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;feedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://freecodecamp.libsyn.com/rss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://feeds.devpods.dev/devdiscuss_podcast.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feedlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;image_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="n"&gt;image_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;        &lt;span class="c1"&gt;#print(image_url)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;feedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://freecodecamp.libsyn.com/rss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://feeds.devpods.dev/devdiscuss_podcast.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feedlist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feedparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;                     &lt;span class="n"&gt;image_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;                     &lt;span class="n"&gt;image_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;dict_keys&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published_parsed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guidislink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;summary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;summary_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_explicit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subtitle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subtitle_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_episode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_episodetype&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;authors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="n"&gt;dict_keys&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published_parsed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guidislink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;summary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;summary_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subtitle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subtitle_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;authors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author_detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_explicit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itunes_duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see we do not have an image key in the second RSS feed which means each entry doesn't have a unique cover image, so we have to fetch the image from the &lt;code&gt;feed&lt;/code&gt; key then the &lt;code&gt;image&lt;/code&gt; key in the entries list.&lt;/p&gt;&lt;p&gt;&lt;img alt="Feedparser Cover Image Demo" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648373275/blog-media/fzdqie5dubigxzfhtv2x.png" /&gt;&lt;/p&gt;&lt;p&gt;As we can see here, the image_url will pick up the &lt;code&gt;image&lt;/code&gt; key in the dictionary if it is present else we will assign it to another URL which is the website/podcast cover image. This is how we handle exceptions in providing the keys when there are multiple feeds to be extracted though they are quite similar, they will have subtle changes like this that need to be handled and taken care of.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;From this little article, we were able to understand and use the feedparser Python package which can be used to extract information from different feeds. We saw how to extract contents for the entries, a number of entries in the feed, check for keys in the dictionary, and so on. Using Python's Feedparser package, some of the projects I have created include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://podevcast.netlify.app"&gt;podevcast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://pypi.org/project/dailydotdev-bookmark-cli/"&gt;dailydotdev-bookmark-cli&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Mr-Destructive/newsletter"&gt;Django Newsletter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For further reading, you can specifically target a feed type by getting the appropriate methods from the feedparser &lt;a href="https://feedparser.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Thank you for reading, if you have any suggestions, additions, feedback, please let me know in the comments or my social handles below. Hope you enjoyed reading. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/bash-guide-p1'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;BASH Scripting Guide - PART - 1&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/crossposter-shellscript'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Crossposting with a single script: Crossposter.sh&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/python-feedparser</guid><pubDate>Sat, 26 Mar 2022 00:00:00 +0000</pubDate></item><item><title>Golang: What and Why?</title><link>https://mr-destructive.github.io/techstructive-blog/golang-intro</link><description>Understanding what is special about Golang and why should you learn it</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is the first entry in my 100 days of Go lang challenge. I will share the things I will learn each day for 100 days related to Golang or its configuration in my environment. In this post, we will understand what is golang and why you should learn it. It's not an in-depth guide but a high-level overview for understanding the context of learning Go lang. &lt;/p&gt;&lt;h3 id="a-bit-of-context"&gt;A bit of Context&lt;/h3&gt;&lt;p&gt;In April 2021, I started learning Django and to date, I have more than 10 projects(not all deployed) created and publicly open on &lt;a href="https://github.com/Mr-Destructive?tab=repositories&amp;amp;q=django&amp;amp;type=&amp;amp;language=python&amp;amp;sort="&gt;GitHub&lt;/a&gt;. It has been a great experience so far, I am still in between an internship with a project to be created in Django. The learning process after I started blogging in June 2021 has been a different fantasy, I have been enjoying the process of writing the things I learn. So, this Spring/Summer I am creating a challenge of 100 days for learning Go lang and documenting the process. Hopefully, this will be a useful place to learn for a beginner and more than that a place for me to reflect back on the future.&lt;/p&gt;&lt;p&gt;Leaving the rant aside, let's start with the best question to answer, What is Golang?&lt;/p&gt;&lt;h2 id="what-is-golang"&gt;What is Golang&lt;/h2&gt;&lt;p&gt;&lt;a href="https://go.dev/"&gt;Golang&lt;/a&gt; (officially called Go) is a programming language developed by Google. It is statically typed like C\C++, Java, Kotlin, etc, and syntax is similar to dynamically languages like Python, Js, Ruby, Lua, etc. So, golang provides the best of both worlds, the swiftness to write code and also providing control and memory safety. Go is regarded as the language of the cloud i.e. it is heavily used in the cloud infrastructure, it involves creating microservices, APIs, containerization, orchestration, and a lot of other technologies. It can be a super useful programming language for DevOps folks and people into Cloud computing. &lt;/p&gt;&lt;p&gt;Though Go is designed for Cloud Infrastructure, that doesn't mean you can't use it elsewhere. There are a lot of fields in which golang nicely fits. We'll discuss why you would want to learn golang and state the domains where it can be used.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Go programmers are called Gophers&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="why-learn-golang"&gt;Why learn Golang?&lt;/h2&gt;&lt;p&gt;There are a lot of reasons for learning Go as your next programming language. Not only it is quite famous but it is significantly faster than other programming languages like python and javascript. It is a simple language to pick up, it is designed for modern world technologies. There is an added advantage to learning go lang as it is a new programming language(not as old as python). It was open-sourced in 2012, it got a great boost in the last five years as cloud companies are on the rise. &lt;/p&gt;&lt;h3 id="1-go-lang-is-simple"&gt;1. GO lang is simple&lt;/h3&gt;&lt;p&gt;GO lang is a simple programming language, it is really easy to learn. It is quite similar to python in terms of its syntax, though it also inherits characteristics from the Java/C++ paradigm. It has a single entry point program via the &lt;code&gt;main&lt;/code&gt; function similar to Java/C++ languages and is compiled into binary/executable code before running. It has the standard library that provides a lot of functionalities out of the box. It provides some quite handy tools and has support for creating web applications in the core language itself.&lt;/p&gt;&lt;h3 id="2-go-lang-is-fast-execution-speed"&gt;2. GO lang is fast (Execution Speed)&lt;/h3&gt;&lt;p&gt;Though it might not be the fastest language of all time, it beats python and javascript by a significant magnitude in the context of backend development. Go lang is compiled language and hence it has no overhead of converting into byte code or the interpreter. Go lang also checks for unused variables, functions, identifiers, and packages, this can boost the speed of execution by a good amount additionally optimizing the memory footprint of the program. &lt;/p&gt;&lt;p&gt;&lt;img alt="Speed Comparison of programming languages" src="https://camo.githubusercontent.com/37d2b63be8996cd03b67e80d3dee322c698e9753d0602c7da8f8ef399fbed57a/68747470733a2f2f7261772e6769746875622e636f6d2f6e696b6c61732d686565722f73706565642d636f6d70617269736f6e2f6d61737465722f2e6769746875622f706c6f745f76312e342e706e67" /&gt;&lt;/p&gt;&lt;p&gt;We can see, that Go lang is almost equivalent to C and C++ porgramming language, though this might not be the best comparison of speed as it depends on quite a lot of factors and the context of programs. Still Go lang has a significant edge over Java and C++ which is a great factor because of the writing complexity involved in those programming languages.&lt;/p&gt;&lt;h3 id="3-go-lang-is-fast-writing-speed"&gt;3. GO lang is fast (Writing Speed)&lt;/h3&gt;&lt;p&gt;GO language is fast yes I get that, It is faster in terms of writing speed. If you sit down to write the same code in Java/C++ or Go, having time constraints, you will move out with Go as a winner. It is much easier to write code in Go than compared to C/C++, Java, or even Javascript. Golang prefers clear code over fast code, though it might not be as fastest as Rust or C++, it is definitely much easier and quicker to write than the other counterparts. Go is designed for writing software that can scale with large codebases and teams. So it's not a surprise it is used to create cloud computing technologies like Docker, Kubernetes, and other tons of cloud-native tools. &lt;/p&gt;&lt;h3 id="4-go-lang-is-made-for-the-modern-world"&gt;4. GO lang is made for the modern world&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;Go lang is the modern C&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Go lang is a modern language, it is not as ancient as C/C++ or Java. It is designed for Cloud-native applications which are scalable and optimized for performance meeting the needs of the modern demand for bleeding-edge technologies. It is designed by the people who created the UNIX operation, Ken Thompson. Though there were other go authors like Robert Griesemer and Rob Pike. Go lang has been designed keeping the idea of C but also considering the context of the modern world. It makes tasks like concurrency a lot simpler but it avoids dangerous and manual control of memory by not allowing pointer arithmetic.  &lt;/p&gt;&lt;h2 id="where-you-can-use-golang"&gt;Where you can use Golang&lt;/h2&gt;&lt;p&gt;Go land finds its use case in a lot of domains including Cloud computing, Web applications, CLI and DevOps tools, and so on. As GO is a general-purpose programming language, you can use it anywhere in the relevant fields of technology. &lt;/p&gt;&lt;h3 id="cloud-native-application"&gt;Cloud-native application&lt;/h3&gt;&lt;p&gt;As Golang has capabilities to execute low-level system calls efficiently, cloud-native tools can be created in golang for improving efficiency and memory usage. As Go uses fewer resources like CPU and memory, it can optimally be used for applications that require almost no delay in the response. It also handles concurrency very well using goroutines which are way simpler to implement. All the factors contribute very well to constructing a modern cloud-native application.&lt;/p&gt;&lt;p&gt;Golang is used in Cloud-native technologies like&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/docker"&gt;Docker&lt;/a&gt; - containerisation technology&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;Kubernetes&lt;/a&gt; - Container Orchestration&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/google/go-cloud"&gt;Google Cloud&lt;/a&gt; - Cloud Hosting Plaform&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This makes Golang widely adopted and has firm grounds for the future as well.&lt;/p&gt;&lt;h3 id="web-applications"&gt;Web applications&lt;/h3&gt;&lt;p&gt;As Golang is highly efficient and fast it can be used to develop web applications. It can scale a web application very well as it is a statically typed ecosystem. It also has extensive support for integrating databases into web applications. Golang doesn't require any 3rd party integrations to create the web apps, it is developed using internal or external packages and modules. The performance of Golang is the core feature for creating web apps in it, it heavily outperforms Javascript(Node) and Python. As golang code is compiled before running, this makes a single executable depending on the operating system, this improves the performance to a great extent. So, golang should be an ideal choice for developing web applications.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://developers.soundcloud.com/blog/go-at-soundcloud"&gt;Soundcloud&lt;/a&gt; - Music System Webapp&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.slideshare.net/RobSkillington/go-at-uber"&gt;Uber&lt;/a&gt; - Cab Booking/Ride Sharing App&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/allegro/marathon-consul/#marathon-consul-"&gt;Allergo&lt;/a&gt; - E-commerce Webappp&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="devops-tools"&gt;DevOps tools&lt;/h3&gt;&lt;p&gt;A lot of DevOps tools like Prometheus, Grafana, Terraform, Hugo are written natively in Go. Having appropriate features like simplicity, scalability, efficiency, and concurrency, go lang fits the DevOps space really well. Golang is already used in cloud-native technologies as mentioned earlier adopting it in the DevOps space is a great choice as it creates an even and supportive ecosystem. The &lt;code&gt;Write once and Run anywhere&lt;/code&gt; paradigm of java is surprisingly built-in golang as well without conversion into byte code. This is a great feature any DevOps engineer would dream of, using a single code base for multiple platforms can save a lot of time and improve productivity.  &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/prometheus/prometheus"&gt;Prometheus&lt;/a&gt; - Monitoring system and time series database&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/grafana/grafana"&gt;Grafana&lt;/a&gt; - Platform for monitoring and observability&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/hashicorp/terraform"&gt;Terraform&lt;/a&gt; - Building, Changing, and Versioning Infrastructure &lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/kubernetes/minikube"&gt;Minikube&lt;/a&gt; - Run kubernetes locally&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/go-kit/kit"&gt;Kit&lt;/a&gt;- standard library for microservices&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="who-uses-golang"&gt;Who uses Golang?&lt;/h2&gt;&lt;p&gt;Golang is a widely used programmming language, it is used by some of the big companies around the world. Of course Google uses it, apart from Google, it is being used by companies like:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Netflix&lt;/li&gt;&lt;li&gt;PayPal&lt;/li&gt;&lt;li&gt;Microsoft&lt;/li&gt;&lt;li&gt;Dropbox&lt;/li&gt;&lt;li&gt;Meta (facebook)&lt;/li&gt;&lt;li&gt;Uber&lt;/li&gt;&lt;li&gt;Twitter&lt;/li&gt;&lt;li&gt;Twitch&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;There are so many tools created tools using golang like the &lt;a href="https://github.com/cli/cli"&gt;gh-cli&lt;/a&gt;, &lt;a href="https://github.com/cockroachdb/cockroach"&gt;cockrach-db&lt;/a&gt;, &lt;a href="https://github.com/dgrijalva/jwt-go"&gt;jwt&lt;/a&gt;, etc. You can see a whole list of applications/tools/frameworks written in Go from this &lt;a href="https://github.com/avelino/awesome-go"&gt;awesome list&lt;/a&gt;&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Go lang is a excellent choice for any one into web developement, cloud native, DevOps, CLI tools. Go lang being a recently developed language it has grown a lot faster than any other language in the programming world. Learning Python over the span of two years, I might want to dabble into Go but not completely leave Python. Python has a great community and is widely adopted in almost all fields in developement. Still trying out new things is what keeps you in the hunt of oppurtunitiees and meeting new people. &lt;/p&gt;&lt;p&gt;So starting from today, I will share my learning a new thing in Go lang every day for 100 days. At least that's the plan. The post might be in the form of a long post or a short TIL on the blog. Check out the GitHub repository for the 100 day challenge &lt;a href="https://github.com/mr-destructive/100-days-of-golang"&gt;here&lt;/a&gt;.If you have any queries, suggestions, or feedback please let me know in the comments or on the mentioned social handles. Thank you for reading.  Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-keymaps'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Keymapping Guide&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-deploy-railway'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Project with PostgreSQL Deployment on Railway App&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-intro</guid><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Installation and Hello-World</title><link>https://mr-destructive.github.io/techstructive-blog/hello-golang</link><description>Installing and Setting up the development environment for Go lang, also writing the hello-world in GO!</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Moving on to the second day, we will be installing and setting up Go lang on our systems. The installation and setup are quite simple and not much demonstration is required, so further in the article, I will also make a hello-world program in GO. We will explore the basic program in GO and how to compile, run and build a GO program in this section. &lt;/p&gt;&lt;h2 id="installing-go"&gt;Installing Go&lt;/h2&gt;&lt;p&gt;Installing Go is pretty straightforward. You have to install the binaries from the official website as per your operating system. &lt;/p&gt;&lt;p&gt;Head on to the &lt;a href="https://go.dev/"&gt;go.dev&lt;/a&gt; which is the official website for the Go language. Click on the &lt;a href="https://go.dev/doc/install"&gt;Download&lt;/a&gt; Tab and there should be all the required information. Install the installer as per your specific operating system. &lt;/p&gt;&lt;p&gt;If you wish not to lead to any errors, keep the configuration for the installer as default and complete the installation process. &lt;/p&gt;&lt;h2 id="setting-up-environment-variables"&gt;Setting up Environment variables&lt;/h2&gt;&lt;p&gt;To make sure Go lang is perfectly installed in your system, type in CMD/Terminal/Powershell the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you get a specific version of golang along with the platform and architecture of your system, you have successfully installed Go lang in your system. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go versiongo version go1.17.8 windows/amd64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you get an output as a command not found or anything else, this is an indication that your Go installation was not successful. You need to configure your Environment variables properly or re-install the installation script. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go versionbash: go: command not found&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="hello-gophers"&gt;Hello Gophers&lt;/h2&gt;&lt;p&gt;Once the Go lang has been successfully installed in your system, we can start writing our first program. Yes, a &lt;code&gt;Hello World&lt;/code&gt; program. It is not as simple as &lt;code&gt;print("hello world")&lt;/code&gt; but a lot better than 10-15 lines of Java or C/C++. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello,Gophers!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, this is so-called the &lt;code&gt;hello-world&lt;/code&gt; program in Go, we will see each of the terms in detail next. But before that, let's get an idea of the style of the code. It is definitely similar if you are coming from C/C++ or Java, the package the main function. It will even feel like Python or Javascript when we explore other aspects. It has really a unique style of programming but feels familiar to programmers coming from any programming language, this might not be true for all programming languages though. &lt;/p&gt;&lt;h3 id="packages"&gt;Packages&lt;/h3&gt;&lt;p&gt;A package in Go lang is a way to bundle up some useful functions or any other constructs. Using packages we can reuse components of a specific app in another. Packages in golang also help in optimizing the execution/compilation time by letting the compiler only compile the required packages. &lt;/p&gt;&lt;p&gt;Here, we have the main package, which provides the entry point for the entire project. This is mandatory for creating executable programs as we need to have a start point. The file name can be anything, but for executing the code, you need to have a main package where your main function resides. It provides an entry point as a package, when we will run the file, we provide the file which actually acts as a package and the file that has a tag of main is the entry point for the program.&lt;/p&gt;&lt;h3 id="main-function"&gt;Main Function&lt;/h3&gt;&lt;p&gt;We have the main function where the main package is defined. It acts as a start point for a package. The main package will look for a main function inside the package. The main function doesn't take any parameter and nor does it return any value. When the function's scope ends, the program exits. &lt;/p&gt;&lt;p&gt;The main function has significance only in the main package, if you define the main function in other packages excluding &lt;code&gt;main&lt;/code&gt;, it works as a normal function. &lt;/p&gt;&lt;h3 id="import-statements"&gt;Import Statements&lt;/h3&gt;&lt;p&gt;We have an &lt;code&gt;import&lt;/code&gt; keyword for importing packages from the standard library or other external packages from the internet. There are a lot of ways to import packages in golang like single, nested, multiple, aliased, dot import, and blank imports. We will see these different import styles in a dedicated section. Right now, we are directly importing a package, a single package. The pacakge is called the &lt;a href="https://pkg.go.dev/fmt"&gt;fmt&lt;/a&gt; pacakge. It handles the format, input, and output format in the console. It is a standard package to perform some basic operations in golang.  &lt;/p&gt;&lt;p&gt;We can import it as a single direct import like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OR &lt;/p&gt;&lt;p&gt;Make multiple imports like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can add multiple packages on each line, this way we do not have to write the keyword &lt;code&gt;import&lt;/code&gt; again and again. It depends on what you want to do in the program. &lt;/p&gt;&lt;h3 id="println-function"&gt;Println function&lt;/h3&gt;&lt;p&gt;We can access the functions from the imported packages, in our case we can use the functions from the &lt;code&gt;fmt&lt;/code&gt; package. We have access to one of the functions like &lt;code&gt;Println&lt;/code&gt;, which prints string on a new line. Syntactically, we access the function and call it by using the &lt;code&gt;dot&lt;/code&gt; operator like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hi there!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=""&gt;Println&lt;/a&gt; function takes in a parameter as a string and multiple optional parameters that can be strings or any variable. We will see how to declare variables and types in the next section. &lt;/p&gt;&lt;p&gt;Here, the &lt;code&gt;P&lt;/code&gt; in &lt;code&gt;Println&lt;/code&gt; has significance as it allows us to distinguish private methods(functions in structs aka classes) from public methods. If a function begins with an uppercase letter, it is a public function. In technical terms, if the first letter of a method is upper case, it can be exported to other packages. &lt;/p&gt;&lt;h2 id="running-scripts"&gt;Running Scripts&lt;/h2&gt;&lt;p&gt;Let's run the code and GO programming language to our resume. You can run a go source file assuming it has a main package with the main function using the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go run &amp;lt;filename.go&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO run command" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648833567/blog-media/o7i9spph2bfgemqonq8p.png" /&gt;&lt;/p&gt;&lt;p&gt;This will simply display the string which we have passed to the &lt;code&gt;Println&lt;/code&gt; function. If you didn't have a main package this command won't run and return you an error:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;package command-line-arguments is not the main package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By executing the run command, we can are creating a executable in a system's temp folder,&lt;/p&gt;&lt;p&gt;For Windows, it's usually at:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C:\Users\acer\AppData\Local&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;You can get the location of the temp directory using CMD/PowerShell:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;CMD:echo %TEMP%PowerShell:$env:Temp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Linux&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/tmp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;You can get the location of the temp folder using Terminal in Linux/macOS:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;echo $TMPDIR&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It doesn't create any executable in the current project or folder, it only runs the executable that it has built in the temp folder. The run command in simple terms &lt;strong&gt;compiles and executes the main package&lt;/strong&gt;. As the file provided to the run command needs to have the main package with the main function, it will thus compile that source code in the provided file. &lt;/p&gt;&lt;p&gt;To get the location of the executable file that was generated by the &lt;code&gt;run&lt;/code&gt; command, you can get the path using the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go run --work &amp;lt;filename&amp;gt;.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Run TMP file" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648833643/blog-media/maqfd73xmiivrckc2acn.png" /&gt;&lt;/p&gt;&lt;p&gt;This will print the path to the executable that it currently has compiled. &lt;/p&gt;&lt;p&gt;For further readings on the &lt;code&gt;run&lt;/code&gt; command in Go, you can refer to the &lt;a href="https://pkg.go.dev/cmd/go#hdr-Compile_and_run_Go_program"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="creating-executables"&gt;Creating Executables&lt;/h2&gt;&lt;p&gt;We can go a step further by creating binary/executables with our source file using the &lt;code&gt;build&lt;/code&gt; command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go build &amp;lt;filename&amp;gt;.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this you would get an error as building a package requires a few things. The most important is the mod file.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go: cannot find main module, but found .git/config in D:\meet\Code\go\100-days-of-golang    to create a module there, run:    cd .. &amp;amp;&amp;amp; go mod init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to create a mod file first before we build our script. A mod file in golang is the file that specifies the go version along with the packages and dependencies. It is like the &lt;code&gt;requirement.txt&lt;/code&gt; but a bit different. &lt;/p&gt;&lt;p&gt;We use the following command with the file that contains the main package among the other packages in the folder. We can even provide other packages to add to the mod file(see in detail in the future) &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go mod init &amp;lt;filename&amp;gt;.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Mod Init" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648833683/blog-media/pdvkdpnanl3e0yzoenqb.png" /&gt;&lt;/p&gt;&lt;p&gt;This will generate a &lt;code&gt;go.mod&lt;/code&gt; file, this is a file that contains the list of dependencies and packages in the project. If you look at the mod file, it looks as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.17&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Currently, this is pretty simple and has very little detail, but as your project increases in complexity, this file populates with the modules and packages imported and used in the project. &lt;/p&gt;&lt;p&gt;So, after creating the mod file, we can build the script which we tried earlier.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go build &amp;lt;filename&amp;gt;.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Build Command" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648833745/blog-media/i0hnwsxxl0gglhh3rdoe.png" /&gt;&lt;/p&gt;&lt;p&gt;So, this command generates an exe right in the current folder. This will generate the file named after the package which is mainly &lt;code&gt;filename.exe&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;If you have a &lt;code&gt;go.mod&lt;/code&gt; file in your project, just running the command will generate the exe file:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Build Command - Directory level" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648833832/blog-media/sdw9zrlff3odtnhallyq.png" /&gt;&lt;/p&gt;&lt;p&gt;NOTE: For the above command to work, you need to be in the directory which has the mod file for your project. It basically bundles the listed packages and creates the executable named after the package which is named &lt;code&gt;main&lt;/code&gt;. Thus it generates a different file name as &lt;code&gt;filename.go.exe&lt;/code&gt;&lt;/p&gt;&lt;p&gt;We can also provide an output file as the exe file name, this can be done with the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go build -o &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Build Output file" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648833932/blog-media/t5dfhx0va7reyjjygfnq.png" /&gt;&lt;/p&gt;&lt;p&gt;For further reading on the &lt;code&gt;go build&lt;/code&gt; command, head over to this &lt;a href="https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies"&gt;documentation&lt;/a&gt; page.&lt;/p&gt;&lt;p&gt;Link to all of the code and resources is mentioned in this &lt;a href="https://github.com/Mr-Destructive/100-days-of-golang"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this second post, we were able to set up the Go language in our system and write our first &lt;code&gt;hello-world&lt;/code&gt; program. This was a bit more than the setup and installation guide as it is quite boring to demonstrate the installation procedure being quite straightforward. Hopefully, you followed so far and you were able to pick up things in the go landscape. Thank you for reading and if you have any questions, suggestions, or feedback, let me know in the comments or the provided social handles. See you tomorrow, until then Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/crossposter-shellscript'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Crossposting with a single script: Crossposter.sh&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-nerdtree'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: NERDTree&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/hello-golang</guid><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Variables and Types</title><link>https://mr-destructive.github.io/techstructive-blog/golang-variables</link><description>Understanding and creating variables and their types in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In the third part of the series, we will be covering the fundamentals for learning any programming language i.e. variables and data types. We will be covering from data types to variable declaration. We won't be seeing each and every detail related to the data types as some of them require a knowledge of loops and other topics, so that can be left for the different part.&lt;/p&gt;&lt;h2 id="types-in-golang"&gt;Types in golang&lt;/h2&gt;&lt;p&gt;In Golang there are 3 major types : Numeric, Bool and String. Further we also have specific types for the three data types like int, float, rune, byte, etc. We will first see how to declare a simple variable and then explore the data types in Golang. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This the variable declaration in Golang, we have the keyword &lt;code&gt;var&lt;/code&gt; similar to Javascript but we optionally have to specify the type of the variable if we are not immediately assigning/defining it a value. &lt;/p&gt;&lt;p&gt;To assign variable values, we can write the datatype of the assigned value but it is optional as the go compiler will know the datatype according to the assigned value. Further you cannot change the type of that variable once it is initialized.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gopher&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gopher&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gopher&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also have &lt;code&gt;const&lt;/code&gt; for assigning constant values to a particular value set. You cannot change the value for a constant type, doing this will result in compile time error. An important property of &lt;code&gt;const&lt;/code&gt; can be noted here, if you simply declare a &lt;code&gt;const&lt;/code&gt; without initializing the value and try to access that constant, the go-compiler will throw an compilation error.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;David&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Calvin&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Smith&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, the values for string is an empty string&lt;code&gt;""&lt;/code&gt;, for integer and float it is &lt;code&gt;0&lt;/code&gt; and for bool it is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Each of these are valid declaration of variables in golang. Let's now dive into the data types and follow up with variable declaration in detail later.&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Numeric&lt;/th&gt;&lt;th&gt;String&lt;/th&gt;&lt;th&gt;Bool&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;bool&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;float&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;complex&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rune&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id="numeric"&gt;Numeric&lt;/h3&gt;&lt;p&gt;Let's first explore the &lt;code&gt;numeric&lt;/code&gt; data types in golang as you have guessed correctly, we have &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt; as distinct categories but further we also have fine grained storage types for both of the types. &lt;/p&gt;&lt;h4 id="integer"&gt;Integer&lt;/h4&gt;&lt;p&gt;In integers as well we have two categories &lt;code&gt;signed&lt;/code&gt; and &lt;code&gt;unsigned&lt;/code&gt;, we can basically store only positive integers in &lt;code&gt;unsigned&lt;/code&gt; integers giving us an extra bit to play with. &lt;/p&gt;&lt;p&gt;For Integers, we have specific data storage types depending on the bits it can store like &lt;code&gt;int8&lt;/code&gt; for storing 8 bit integers, &lt;code&gt;int16&lt;/code&gt; for storing 16 bit integer value, &lt;code&gt;int32&lt;/code&gt; and &lt;code&gt;int64&lt;/code&gt; for the given number of bits in the integer. Similarly we will have these storage based integer values for unsigned integers like &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;uint16&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt; and &lt;code&gt;uint64&lt;/code&gt;. We can basically store double amount of positive integers in unsigned integers as &lt;code&gt;uint&lt;/code&gt; than in signed integers &lt;code&gt;int&lt;/code&gt;, this is because the most significant bit is not used as a sign bit since all values in the variable are positive and hence no sign bit is required. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run int.go140&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Age = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run int.go# command-line-arguments.\int.go:6:9: constant 140 overflows int8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give us an error as &lt;code&gt;140&lt;/code&gt; is above the limit for &lt;code&gt;int8&lt;/code&gt;. So, unless you have specific requirements as storage limitation, you should be using &lt;code&gt;int&lt;/code&gt; as the default data type for storing integers.&lt;/p&gt;&lt;p&gt;So, we need to define variables as per the limits to which we are going to use them, if you just specify &lt;code&gt;int&lt;/code&gt; the type will be selected based on your operating system, if it is &lt;code&gt;32bit&lt;/code&gt;, it will take &lt;code&gt;int32&lt;/code&gt;, for &lt;code&gt;64bit&lt;/code&gt; OSes it will take as &lt;code&gt;int64&lt;/code&gt; integer. If you define a variable with let say &lt;code&gt;16&lt;/code&gt; bit storage and if it exceeds the limit for &lt;code&gt;16&lt;/code&gt; bit storage, it would give a &lt;code&gt;overflow limit&lt;/code&gt; error. &lt;/p&gt;&lt;p&gt;Below are the limits for all the integer types in Golang: &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uint8 -&amp;gt;  0  to  255uint16 -&amp;gt;  0  to  65535uint32 -&amp;gt;  0  to  4294967295uint64 -&amp;gt;  0  to  18446744073709551615int8 -&amp;gt;  -128  to  127int16 -&amp;gt;  -32768  to  32767int32 -&amp;gt;  -2147483648  to  2147483647int64 -&amp;gt;  -9223372036854775808  to  9223372036854775807&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to reality check for the boundary values of this data types, you can code a program in &lt;code&gt;go&lt;/code&gt; as below: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;To find the maximum value of uint, we can flip all the bits in &lt;code&gt;0&lt;/code&gt; to get all the set bits in the integer thus we use &lt;code&gt;^&lt;/code&gt; operator.&lt;/li&gt;&lt;li&gt;To find the maximum value for signed integers, we can right shit one bit so as to unset the sign bit.&lt;/li&gt;&lt;li&gt;The minimum value for uint is the default value &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;The minimum value for int can be calculated by subtracting one from the negative of the max limit.&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_uint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;uint16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nb"&gt;uint64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_uint8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;max_int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_uint16&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;max_int16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_uint32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;max_int32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_uint64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;max_int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uint8 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uint16 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uint32 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uint64 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_uint64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;int8 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;int16 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;int32 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;int64 -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min_int64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; to &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was the basic overview of Integers in Golang.&lt;/p&gt;&lt;p&gt;Though rune and byte are Integer aliases, we will explore them in the String section as they make a lot of sense over there.&lt;/p&gt;&lt;h4 id="float"&gt;Float&lt;/h4&gt;&lt;p&gt;Similar to integers, we also have floats in the numeric category. A float is a numeric data type that can allow numbers with decimal values. A simple float can be of either &lt;code&gt;float32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt;. The two types are defined as the precision of the decimal values. Obliviously, the &lt;code&gt;float64&lt;/code&gt; type is more precise than the counterpart and is also the default type assigned if not provided.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;30.5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You optionally provide the &lt;code&gt;float32&lt;/code&gt; type to have a bit less precision than usual using the &lt;code&gt;float32&lt;/code&gt; keyword as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;46.34&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.555&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The floating value precision of the float types in golang are as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;float32   --&amp;gt;   -3.4e+38 to 3.4e+38.float64   --&amp;gt;   -1.7e+308 to +1.7e+308.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As quite logical reasons, the precision is almost double in the &lt;code&gt;float64&lt;/code&gt; compared to &lt;code&gt;float32&lt;/code&gt;. If we try to add(any operation) a &lt;code&gt;float64&lt;/code&gt; number with a &lt;code&gt;flaot32&lt;/code&gt;, we get an error as performing operations on two differently stored types can't be operated. &lt;/p&gt;&lt;h4 id="complex-numbers"&gt;Complex Numbers&lt;/h4&gt;&lt;p&gt;We also have complex numbers in golang. This are the numbers which deal with a real and a imaginary numbers. We initialize the complex variable using the &lt;code&gt;complex&lt;/code&gt; function which takes two parameters the &lt;code&gt;real&lt;/code&gt; part and the &lt;code&gt;imagianry&lt;/code&gt; part. Both the parts or numbers are stored as float in the complex data type.&lt;/p&gt;&lt;p&gt;So, since golang has &lt;code&gt;float32&lt;/code&gt; and &lt;code&gt;float64&lt;/code&gt; data types, we will have &lt;code&gt;complex64&lt;/code&gt; and &lt;code&gt;complex128&lt;/code&gt; as complex types. Since we are storing two &lt;code&gt;flaot64&lt;/code&gt;, it has a &lt;code&gt;complex128&lt;/code&gt; type and &lt;code&gt;complex64&lt;/code&gt; for both parts as &lt;code&gt;float32&lt;/code&gt;. Here as well, you cannot store the two parts(real and imaginary) as different float types i.e. You need to have both real and imaginary as either &lt;code&gt;flaot32&lt;/code&gt; or &lt;code&gt;flaot64&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;30.738&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.545&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;comp1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;comp2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comp1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;comp2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(-26.192999999999998+26.192999999999998i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Golang automatically adds the &lt;code&gt;i&lt;/code&gt; or iota in the complex/imaginary part for better readability. &lt;/p&gt;&lt;h3 id="strings"&gt;Strings&lt;/h3&gt;&lt;p&gt;We can now move onto the &lt;code&gt;string&lt;/code&gt; data type in golang. It has several data types like &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;rune&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;. In golang, &lt;code&gt;byte&lt;/code&gt; and &lt;code&gt;rune&lt;/code&gt; store individual characters whereas &lt;code&gt;string&lt;/code&gt; can hold multiple characters. &lt;/p&gt;&lt;h4 id="byte"&gt;Byte&lt;/h4&gt;&lt;p&gt;A byte in golang is an unsigned 8 bit integer, which means it can hold numeric data from 0 to 255. So how is this displaying characters if it stores integer. Well, because each number it stores is mapped to the ASCII character set which is used to represent characters. &lt;/p&gt;&lt;p&gt;A byte can be stored in a single quote &lt;code&gt;''&lt;/code&gt;, if we use double quotes&lt;code&gt;""&lt;/code&gt;, the variable is considered as string if we aren't specifying the data type.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run byte.go116&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives the output as a number between 0 and 255 depending on the character which you have stored. To print the actual character you need to type caste into a string like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Character = %c \nInteger value = %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run byte.goCharacter = tInteger Value = 116&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can get the character equivalent of the byte representation number using the &lt;a href="https://cs.opensource.google/go/go/+/go1.18:src/fmt/print.go;l=212"&gt;Printf&lt;/a&gt; function and the &lt;code&gt;%c&lt;/code&gt; place holder for a character. The &lt;code&gt;\n&lt;/code&gt; is used to end the line just for displaying proper output.&lt;/p&gt;&lt;p&gt;We can even store numbers between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt; as it is internally an &lt;code&gt;uint8&lt;/code&gt;.&lt;/p&gt;&lt;h4 id="rune"&gt;Rune&lt;/h4&gt;&lt;p&gt;A rune is extended type of byte as it stores &lt;code&gt;int32&lt;/code&gt; numbers and hence it represents &lt;code&gt;Unicode&lt;/code&gt; characters. This is the default type if you do not specify &lt;code&gt;byte&lt;/code&gt; and use single quotes to assign a character. Using rune, we can assign it an unicode characters to display some rich characters and literals like emoji or expressions.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;smiley_emoji&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\u263A&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Smiley Emoji --&amp;gt; %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;smiley_emoji&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Rune Smiley Emoji" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1648962460/blog-media/obw9ihlxsvhytbe8ito3.png" /&gt;&lt;/p&gt;&lt;p&gt;So, rune is pretty amazing type to play with characters in golang. As it is a default type assigned against byte if not provided while assignment. &lt;/p&gt;&lt;h4 id="string"&gt;String&lt;/h4&gt;&lt;p&gt;Strings are basically a slice(list) of bytes. Each character in a string is a byte. By default the string will be empty if you don't initialize it with a value. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C++&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Javascript&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even access particular character in the string using it's index.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;12AB34CD&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run string.go67&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us a integer as we are accessing the byte from the string using its index. Thus, we can use &lt;code&gt;%c&lt;/code&gt; in the &lt;code&gt;Printf&lt;/code&gt; function to format and print the equivalent characters of the byte.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;12AB34CD&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2nd Character in string = %c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run string.go2nd Character in string = A&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also declare strings using backticks/backquotes or whatever you call it (```), assigning string with this allows us to write multi line string.   &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;statement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`This is the first line&lt;/span&gt;&lt;span class="s"&gt;The next line&lt;/span&gt;&lt;span class="s"&gt;The last line`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run str-backticks.goThis is the first lineThe next lineThe last line&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Further in the loop article we will see how to loop/iterate over a string.&lt;/p&gt;&lt;h3 id="boolean"&gt;Boolean&lt;/h3&gt;&lt;p&gt;This type is used to store either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; in golang. The default value of a boolean variable is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run bool.gofalse&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can assign the variable as either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.  &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The statement is %t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run bool.goThe statement is true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, using the &lt;code&gt;%t&lt;/code&gt; we can print the value of a boolean value in golang in the &lt;code&gt;Printf&lt;/code&gt; function.&lt;/p&gt;&lt;h2 id="creating-variables"&gt;Creating Variables&lt;/h2&gt;&lt;p&gt;Now, we have familiar with data types in golang, we can more expressively create, declare, initialize variables in golang.&lt;/p&gt;&lt;p&gt;There are 3-4 primary ways to define a variable most of which we have already seen.&lt;/p&gt;&lt;h3 id="declaring-a-variable"&gt;Declaring a Variable&lt;/h3&gt;&lt;p&gt;We can declare a variable without assigning it any value but for that we need to then provide the data type, this can be done using the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expereience&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;expereience&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even use &lt;code&gt;const&lt;/code&gt; for constant value in the given scope. &lt;/p&gt;&lt;p&gt;Here, we can even declare multiple variables by separating each variable/constant with comma &lt;code&gt;,&lt;/code&gt; which can be done as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="defining-and-initializing-at-the-same-time"&gt;Defining and Initializing at the same time&lt;/h3&gt;&lt;p&gt;We can initialize a variable/constant in golang by explicitly giving it a value. We can do that by using &lt;code&gt;var&lt;/code&gt; for variable value or &lt;code&gt;const&lt;/code&gt; for a constant value. We can optionally provide the data type at this moment as golang will automatically detect the type and assign the memory according to the value given.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, there is no compulsion to provide the &lt;code&gt;datatype&lt;/code&gt; as the compiler will be able to know it from the asisgned value. Though if you want to provide a non-default value you can specify the datatype. &lt;/p&gt;&lt;h3 id="declaring-multiple-variables"&gt;Declaring Multiple Variables&lt;/h3&gt;&lt;p&gt;We can assign multiple variables at once by separating them with comma&lt;code&gt;,&lt;/code&gt;. The variable name to the left and the values to the right needs to separated with comm on both sides.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; x = %d \n y = %c \n z = %s \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run multiplvar.go x = 100 y = # z = daysofcode&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can are declaring and assigning multiple variables, the &lt;code&gt;x&lt;/code&gt; variable is assigned an integer value, &lt;code&gt;y&lt;/code&gt; with a &lt;code&gt;rune&lt;/code&gt;(by default) and &lt;code&gt;z&lt;/code&gt; with a string. We are using &lt;code&gt;Printf&lt;/code&gt; function with place holders for int &lt;code&gt;%d&lt;/code&gt;, rune/byte &lt;code&gt;%c&lt;/code&gt; and string as &lt;code&gt;%s&lt;/code&gt;. The &lt;code&gt;\n&lt;/code&gt; is for a new line.&lt;/p&gt;&lt;p&gt;If we want to assign the variables with a particular data type, we can use the var keyword as a list of values.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;daysofcode&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; x = %T \n y = %T \n z = %T \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run multiplvar.go x = int8 y = uint8 z = string&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is not only limited to &lt;code&gt;var&lt;/code&gt; we can also use &lt;code&gt;const&lt;/code&gt; to declare multiple constants with type constraint. Also, note we are using the &lt;code&gt;%T&lt;/code&gt; placeholder for getting the type of the data stored in the variable.&lt;/p&gt;&lt;p&gt;Also, we can define(declare and initialize) multiple variable with same data type with command separated as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;G&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.141&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.718&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;6.67e-11&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;G&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c %c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run multp.go3.141 2.718 6.67e-11A Z&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="assigning-variable-using-walrus-operator-shorthand-declaration"&gt;Assigning Variable using Walrus Operator (Shorthand Declaration)&lt;/h3&gt;&lt;p&gt;We can skip usign &lt;code&gt;var&lt;/code&gt; or the &lt;code&gt;datatype&lt;/code&gt; by using the &lt;code&gt;:=&lt;/code&gt; walrus operator. This type of assignment using &lt;code&gt;walruns&lt;/code&gt; operator can only be allowed in the function body and not anywhere else, in the global scope this type of assignment is not allowed.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;school&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is such a simple shorthand for assigning variables though only in a function body.&lt;/p&gt;&lt;p&gt;Also, multiple variable declaration is possible with walrus operator.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%T %T %T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run walrus.gofoo &lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;string int bool&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Links to all code and links are visible on the &lt;a href="https://github.com/Mr-Destructive/100-days-of-golang"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we were able to understand variables and the various data types in Golang. Though we didn't got too much in detail still we can find ourselves a bit comfortable in understanding basic go scripts. In the next section, we will looking into conditional statements and loops. This would give a good grasp on iterating over a string and even learn arrays(just the basics) we will explore Arrays and slices(remember strings?) after that. &lt;/p&gt;&lt;p&gt;So, if you have any questions, suggestions, or feedback please let me know in the comments or on the social handles. See you next time, Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-pointers'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Pointers&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/curl-basics'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Basics of curl command&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-variables</guid><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Conditionals and Loops</title><link>https://mr-destructive.github.io/techstructive-blog/golang-conditionals-loops</link><description>Getting familiar with condition statements and loops in golang.</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Moving to the fourth part, we will be doing conditional statements and loops in golang. We will be seeing the basics of conditional statements like if-else and switch along with loops like for, while, and range-based loops. We won't be covering iterating over arrays in a loop as this requires an understanding of arrays. &lt;/p&gt;&lt;h2 id="conditional-statements"&gt;Conditional statements&lt;/h2&gt;&lt;p&gt;Conditional statements are quite a fundamental aspect of learning a programming language. In golang, we have if-else conditional statements as well as switch cases. We will be exploring both of them in this section. Firstly, we will dive into if-else statements which are quite easy to understand.&lt;/p&gt;&lt;h3 id="if-else"&gt;if else&lt;/h3&gt;&lt;p&gt;An &lt;code&gt;if&lt;/code&gt; statement is used for checking the validity of a condition. If the condition is true(condition is met), a particular sets of statements are executed else (condition is not satisfied) different statements gets executed. We can use a basic &lt;code&gt;if-else&lt;/code&gt; statement in go with the following syntax:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Kid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Teenager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run if_else.goTeenager&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use else if for evaluating more than one condition rather than using nested if and else. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condtion&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Freshman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sophomore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Junior&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Senior&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Probably a Graduate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run if_else.goSophomore&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;else if&lt;/code&gt; we can evaluate multiple conditions. This style is much better than using nested &lt;code&gt;if else&lt;/code&gt; statements as it becomes harder to read for complex cases.&lt;/p&gt;&lt;h3 id="switch"&gt;switch&lt;/h3&gt;&lt;p&gt;We also have switch statements in golang which allow us to write cases for a given state of a variable. We can simply add cases for a given variable, the case should be a valid value that the variable can take. If a case is matched it breaks out of the switch statement without executing any statements below the matched case.&lt;/p&gt;&lt;p&gt;The basic structure of the switch statements in golang is as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Kid&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Teenager&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Adult&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Senior&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The person is a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run switch.goThe person is a Senior with age 27.$ go run switch.goThe person is a Teenager with age 19.$ go run switch.goThe person is a Kid with age 11.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives a good understanding of switch-case statements. We can give a variable to the switch statement and pick its value in the respective case statements to evaluate the result accordingly. The &lt;code&gt;default&lt;/code&gt; statement is evaluated when there is no match among the given cases. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;go&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gopher&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rust&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rustacean&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pythonista&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;java&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Duke&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;developer&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A person who codes in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;is called a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;devs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run switch.goA person who codes in javascript is called a developer$ go run switch.goA person who codes in python is called a pythonista$ go run switch.goA person who codes in go is called a gopher&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code will by default pick &lt;code&gt;javascript&lt;/code&gt; and &lt;code&gt;developer&lt;/code&gt; as the values for &lt;code&gt;language&lt;/code&gt; and &lt;code&gt;devs&lt;/code&gt; respectively if there is no match for the provided language or the language is left empty. &lt;/p&gt;&lt;p&gt;We also have &lt;code&gt;fallthrough&lt;/code&gt; in the golang switch which allows evaluating more than one case if one of them is matched. This will allow the switch and check for all the cases sequentially and evaluate all the matched and satisfied cases. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The input character is = %c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Its %c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fallthrough&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It&amp;#39;s between a and k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fallthrough&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It&amp;#39;s between a and t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fallthrough&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It&amp;#39;s between u and z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Its not a lowercase alphabet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run switch.goThe input character is = fIt&amp;#39;s between a and kIt&amp;#39;s between a and tIt&amp;#39;s between a and u$ go run switch.goThe input character is = kIt&amp;#39;s between a and tIt&amp;#39;s between a and u$ go run switch.goThe input character is = aIts aIt&amp;#39;s between a and kIt&amp;#39;s between a and tIt&amp;#39;s between a and u&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here we can see that the fallthrough hits multiple cases. This is unlike the base case which exits the switch statement once a case has been satisfied. This can be helpful for situations where you really want to evaluate multiple conditions for a given variable.&lt;/p&gt;&lt;h2 id="loops"&gt;Loops&lt;/h2&gt;&lt;p&gt;We can now move on to loops in golang. We only have a &lt;code&gt;for&lt;/code&gt; loop so to speak but this can be used as any other looping statement like the &lt;code&gt;while&lt;/code&gt; loop or range-based loop. We will first see the most fundamental loop statement in golang which is a three-component loop. &lt;/p&gt;&lt;h3 id="for-loop"&gt;for loop&lt;/h3&gt;&lt;p&gt;We can have a simple for loop in golang by using the three statements namely &lt;code&gt;initialize&lt;/code&gt;, &lt;code&gt;condition&lt;/code&gt;, and &lt;code&gt;increment&lt;/code&gt;. The structure of the loop is quite similar to the other programming languages.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="range-based-loop"&gt;Range-based loop&lt;/h3&gt;&lt;p&gt;We can even iterate over a string, using the range keyword in golang. We need to have two variables for using a range-based for loop in golang one is the index or the 0 based position of the element and the copy of the element in the array or string. Using the range keyword, we can iterate over the string one by one. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GOLANG&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d -&amp;gt; %c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run for.go0 -&amp;gt; G1 -&amp;gt; O2 -&amp;gt; L3 -&amp;gt; A4 -&amp;gt; N5 -&amp;gt; G&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here we can see we have iterated over the string by each character. Using the range keyword in golang, The &lt;code&gt;i, s&lt;/code&gt; is the index and the copy of the element at that index as discussed earlier. Using the index we get the value which we don't have to index the array for accessing it, that is already copied in the second variable while using the range loop. &lt;/p&gt;&lt;h3 id="while-loop-gos-while-is-for"&gt;while loop (Go's while is for)&lt;/h3&gt;&lt;p&gt;There are no while loops as such in golang, but the for loop can also work similarly to the while loop. We can use a condition just after the for a keyword to make it act like a while loop. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run while.go345678&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see here that the condition is evaluated and the statements in the loop body are executed, if the condition evaluates to false, the flow is moved out of the loop and we exit the loop. &lt;/p&gt;&lt;h3 id="infinite-loop"&gt;Infinite loop&lt;/h3&gt;&lt;p&gt;We can run an infinite loop again using a keyword. We do not have any other keywords for loops in golang. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// statements&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// should have conditons to exit&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This might be used with a base condition to exit the loop otherwise there should be a memory overflow and the program will exit with errors.&lt;/p&gt;&lt;h3 id="break"&gt;Break&lt;/h3&gt;&lt;p&gt;If we want to exit out of a loop unconditionally, we can use the &lt;code&gt;break&lt;/code&gt; keyword. This will break the loop and help us to exit out of an infinite or a condition-bound-based loop too.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It&amp;#39;s time to break at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run infinite.go123456It&amp;#39;s time to break at 7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As, we can see inside an infinite loop, we were able to break out of it by using a conditional statement and &lt;code&gt;break&lt;/code&gt; keyword. This also applies to switch cases it basically is the opposite of &lt;code&gt;fallthrough&lt;/code&gt; in switch-case statements. But by default(without using fallthrough), the case statement breaks the switch after a match has been found or the default case has been encountered. &lt;/p&gt;&lt;h3 id="continue"&gt;Continue&lt;/h3&gt;&lt;p&gt;We also have the opposite of &lt;code&gt;break&lt;/code&gt; i.e. &lt;code&gt;continue&lt;/code&gt; which halts the execution of the loop and directs back to the post statement increment(in case of for loops) or evaluation(in case of while loop). We basically are starting to iterate over the loop again after we encounter the continue but by preserving the counter/iterator state values. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Missed the Continue? at counter =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run infinite.goMissed the Continue? at counter = 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For following up with the code for this and all parts of the series, head over to the &lt;a href="https://github.com/mr-destructive/100-days-of-golang"&gt;100 days of Golang&lt;/a&gt; GitHub repository. &lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this section, we were able to understand the basics of conditional statements and loops in golang. We covered the things which are more important for understanding the core of the language than some specific things. There are certain parts that need to be explored further like iterating over arrays and slices which we'll cover after we have understood arrays and slices. Hopefully, you have understood the basics of the conditional statements and loops in golang. Thank you for reading, if you have any questions, or feedback please let me know in the comments or social handles. Until next time, Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/djagno-auth0-script'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django + Auth0 Quick Setup&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-setup'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Setup and Installation&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-conditionals-loops</guid><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Input</title><link>https://mr-destructive.github.io/techstructive-blog/golang-input</link><description>Understanding to perform user input in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In this fourth section of Golang, we will be understanding the basics of user input. In golang, we can get user input with several functions most of which are similar to the &lt;code&gt;C&lt;/code&gt; programming language like &lt;code&gt;scanf&lt;/code&gt;. This type of input is quite powerful and gives more control on the input to be received.&lt;/p&gt;&lt;h2 id="scan-function"&gt;Scan Function&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/fmt#Scan"&gt;Scan&lt;/a&gt; function helps in getting a value with space as delimiter i.e. The input is stored before a space is encountered. This means the input is only limited to adding a space or a new line. We can use the function by passing the reference to the variable we are going to store the input value. So, we can have a basic input in Golang as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pname&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your favourite programming language: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;pname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;So, your favourite programming language is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;pname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run scan.goEnter your favorite programming language:pythonSo, your favorite programming language is python&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to declare the variable to take input as we need a reference of that variable to store the input. We will be talking about &lt;code&gt;&amp;amp;&lt;/code&gt; and pointers in a separate article. We use the &lt;code&gt;Scan&lt;/code&gt; function by passing the reference to the variable &lt;code&gt;pname&lt;/code&gt; like &lt;code&gt;&amp;amp;pname&lt;/code&gt; which means, fetch the memory address of the variable &lt;code&gt;name&lt;/code&gt;, we just pass the address as &lt;code&gt;int&lt;/code&gt; to the Scan function and it does the rest to store the input value in it. We then as usual access the variable and operations on it.&lt;/p&gt;&lt;p&gt;Here, if you add a space in the input, the value after the space won't be picked by the Scan function. It strictly stops accepting values input after it sees space. We can use this to input multiple variables at once. We know scan gets input before encountering space, so we can pass multiple variable references and add them as input.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your name age and gender: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s, you are a %c and %d years old&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run scan.goEnter your name age and gender:Meet 19 77Hello Meet, you are a M and 19 years old&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we are declaring multiple variables like &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, and &lt;code&gt;gender&lt;/code&gt; as &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, and &lt;code&gt;rune&lt;/code&gt; respectively. Then, we can input all of these in a single scan statement by comma-separated variables. Here, we need to input the &lt;code&gt;rune&lt;/code&gt; as an int value because under the hood it is an integer alias. So, we inputted &lt;code&gt;77&lt;/code&gt; which is equivalent to &lt;code&gt;M&lt;/code&gt; in ASCII characters and even Unicode character sets. Thus, we were able to input multiple variables with the Scan function.&lt;/p&gt;&lt;h2 id="scanf-functions"&gt;Scanf functions&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/fmt#Scanf"&gt;Scanf&lt;/a&gt; function is quite similar to the &lt;code&gt;scanf&lt;/code&gt; in C programming language as it allows to specify the type of the incoming input. This will solve the problem of us inputting &lt;code&gt;77&lt;/code&gt; instead of &lt;code&gt;M&lt;/code&gt; in the gender variable in the previous example. The Scanf function allows us to take input by specifying the placeholder types and the delimiters as well. The delimiter is basically the separator between two or more entities. We can either use space separation or &lt;code&gt;\n&lt;/code&gt; as an input delimiter i.e. the way we want to separate inputs from each other while taking input.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your name age and gender: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %d %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s, you are a %c and %d years old&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run scanf.goEnter your name age and gender:Meet 12 MHello Meet, you are a M and 12 years old&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How cool is that? It definitely gives much more control on what and how to take input. We are taking input as only space-separated values. Let's now try to get more control over how the input will be taken and stored.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your name age and gender: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s \n %d %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s, you are a %c and %d years old&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run scanf.goEnter your name age and gender:Meet12 MHello Meet, you are a M and 12 years old&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By adding &lt;code&gt;\n&lt;/code&gt; between the &lt;code&gt;%s&lt;/code&gt;(name) and &lt;code&gt;%d&lt;/code&gt;(age), we want the user to type the name on one line and age with gender on a different line. The age and gender as before separated by space.&lt;/p&gt;&lt;h2 id="scanln-function"&gt;Scanln function&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/fmt#Scanln"&gt;Scanln&lt;/a&gt; function is a modification of the Scan function as it only stops the input after a newline/enter is pressed.  So, using this we can input multiple variables which are space-separated in a single line.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a string: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scanln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run scanln.goEnter a string:$ go run scanln.goEnter a string:Can&amp;#39;t typeCan&amp;#39;t$ ype-bash: ype: command not found&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Scanln function even accepts an empty string as input. It just needs to get the new line character and it will exit, it also only accepts space-separated values. The rest of the input after space is thrown away and is basically exited from the program stream. More specifically, the input &lt;code&gt;Can't Type&lt;/code&gt; was treated only as &lt;code&gt;Can't&lt;/code&gt; anything after the space is not considered in the input value.&lt;/p&gt;&lt;p&gt;The key difference between Scan and Scanln is that Scanln will not accept input that is space-separated, Scan function considers the newline/enter as a space if there are multiple inputs. The below example will make things absolutely clear.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// scan.go&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter your name age and gender: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s, you are a %c and %d years old&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//scanln.go&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a string: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scanln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Inputted string : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run scan.goEnter your name age and gender:Meet1477Hello Meet, you are a M and 14 years old$ go run scanln.goEnter a string:Inputted string :&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that, The Scan function won't exit until it has inputted all its input values even with newline and spaces. Whereas the Scanln function just waits for the newline character (Enter Key) to be pressed and it exits, thereby even allowing an empty string as input.&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, these are the basic input techniques in Golang. We saw functions in the &lt;code&gt;fmt&lt;/code&gt; package like &lt;code&gt;Scan&lt;/code&gt;, &lt;code&gt;Scanf&lt;/code&gt;, and &lt;code&gt;Scanln&lt;/code&gt; which allow us to get input in a specific pattern. Hopefully, from this article part, we can build a firm base for further exploration like Strings, Arrays, and the ways to input them. Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/devquotes-platform'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-packages'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Packages&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-input</guid><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Arrays</title><link>https://mr-destructive.github.io/techstructive-blog/golang-arrays</link><description>Understanding the basics of Arrays in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In this fifth section of Golang, we will be understanding the basics of arrays. We will be covering some basic operations on arrays like declaration, initialization, modifications, and iterating over an array.&lt;/p&gt;&lt;h2 id="declaring-arrays"&gt;Declaring Arrays&lt;/h2&gt;&lt;p&gt;Arrays are type of data structure that allow us to store multiple items at continuous memory locations of the same type. In golang, we can create arrays similar to any variable but by adding a few bits and pieces like the &lt;code&gt;[]&lt;/code&gt; square braces, length of the array, values, etc. In golang, we cannot resize the length once it is initialized.&lt;/p&gt;&lt;p&gt;To create a basic array in golang, we can use the following code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.go[Python   ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we have initialized a string array of size 4 and not initialized any values of the elements in the declaration. We later set the value of the 0th index or the first element in the array to a string and still rest of the elements are by default set to empty strings &lt;code&gt;""&lt;/code&gt;. The point ot be noted here, is that the size of the array cannot be changed later nor you can leave the size empty while declaring an array in Golang.&lt;/p&gt;&lt;p&gt;We can even initialize elements at the time of declaring the array as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;lang_array&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Go&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C++&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lang_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.go[Python Go Javascript C++]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we use the walrus operator &lt;code&gt;:=&lt;/code&gt; to initialize an array with the values at the time of declaration.  &lt;/p&gt;&lt;h3 id="letting-compiler-makeout-the-array-length"&gt;Letting Compiler makeout the array length&lt;/h3&gt;&lt;p&gt;We can even let the compiler decide the length of the array, using the &lt;code&gt;...&lt;/code&gt; syntax inside the brackets. This is limited by using the array literal that is by initializing values in the &lt;code&gt;{}&lt;/code&gt; braces. So, all the elements need to be declared in the array.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Shirt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.go[Bag Shirt Watch Book]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="access-and-modify-elements"&gt;Access and Modify Elements&lt;/h2&gt;&lt;p&gt;To access an element in the array, we can use the index of that element which starts from 0 as usual in programming.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.go896093&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   We can now, access the element at a particular index in the array. Now, we will see how to modify or edit the elements which are already initialized.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.gofuzzybuzzz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   By accessing the index of the element we can set a appropriate value to the element in the array and thus we have modified the contents of the array.&lt;/p&gt;&lt;h2 id="find-length-of-array"&gt;Find Length of Array&lt;/h2&gt;&lt;p&gt;To find the length of the Array, we have the &lt;code&gt;len&lt;/code&gt; function. The &lt;a href="https://pkg.go.dev/builtin#len"&gt;len&lt;/a&gt; function takes in the array as the parameter and returns the size of the array(int).&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The length of the array is :&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.goThe length of the array is : 7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   In the previous few section, we talked about letting the compiler make out the length of the array while declaring and initializing the array, we can use the len function to calculate the length of the array for further computation&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Shirt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;There are %d items in your cart\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.goThere are 4 items in your cart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can now get the length of the arrays even with &lt;code&gt;[...]&lt;/code&gt; syntax using the len function.&lt;/p&gt;&lt;h2 id="iterate-over-an-array"&gt;Iterate over an Array&lt;/h2&gt;&lt;p&gt;We can move on to the most important aspect when it comes to arrays i.e. to iterate over each element. We can use various types of for loops like the three statement for loops, range based loop or while loop.&lt;/p&gt;&lt;h3 id="three-statement-for-loop"&gt;Three statement for loop&lt;/h3&gt;&lt;p&gt;We can use the three statement for loop, the initialization statement as to &lt;code&gt;0&lt;/code&gt;, condition to be the counter (i) should be less than the length of the array by using the &lt;code&gt;len&lt;/code&gt; function and increment each time by one.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.go#5gtmy6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus, we can iterate over the array with three statement for loop in golang.&lt;/p&gt;&lt;h3 id="using-range-based-loop"&gt;Using range-based loop&lt;/h3&gt;&lt;p&gt;We can use the &lt;code&gt;range&lt;/code&gt; keyword to iterate over the arrays in golang. The range keyword is used to iterate over the array by taking two variables i.e. the iterator and the copy of the element in the iterator. We don't have any use of the iterator so we say it as &lt;code&gt;_&lt;/code&gt;, otherwise it gives a warning/error of not using declared variables. So, we only require the copy of the element in this case, so sayit as &lt;code&gt;s&lt;/code&gt; or any other name you like.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Shirt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic.goBagShirtWatchBook&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Thus, using the range based for loops we were able to iterate over the array for each element without needing any check condition and incrementation of the counter/iterator.&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we were able to understand the baiscs of arrays in golang. We covered from declaration of arrays to iteration.Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/bash-crypto-scrapper'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Cryptocurrency Price Scrapping using BASH and Coingecko API&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/bash-guide-p2'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;BASH Scripting Guide - PART - 2&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-arrays</guid><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Slices</title><link>https://mr-destructive.github.io/techstructive-blog/golang-slices</link><description>Understanding the basics of slices in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In the sixth part of the series, we will be covering slices. Slices are almost like arrays but have a lot of advantages over them, including flexibility and control over them. We can adjust the size and capacity of the data which we will store at a place using slices. We will be covering basic declaration, initialization, capacity in slices, iteration, and accessing the elements of the slices.&lt;/p&gt;&lt;h2 id="slices-in-golang"&gt;Slices in Golang&lt;/h2&gt;&lt;p&gt;Slices are Arrays but can provide more control and are more flexible than arrays. In slices, we can increase the size of the array/list of elements whenever required. We can even have a capacity for slices i.e. the maximum length we wish to grow the initial slice. &lt;/p&gt;&lt;p&gt;Though slices are dynamic, it has a few disadvantages like compile safety, access time, comparability, etc. Everything has its pros and cons, you have to decide on the right data structure as per your problem statement and requirements. &lt;/p&gt;&lt;h2 id="declaring-slices"&gt;Declaring Slices&lt;/h2&gt;&lt;p&gt;There are a couple of different ways in which we can declare a slice that might be an uninitialized or initialized slice. Some of the standard ways include using the &lt;code&gt;make&lt;/code&gt; function and the normal array-like declaration though there are other methods as well including using the &lt;code&gt;new&lt;/code&gt; function. We'll explore some of the most easiest and handy ways to declare and initialize slices. &lt;/p&gt;&lt;h3 id="using-array-like-declaration"&gt;Using array-like declaration&lt;/h3&gt;&lt;p&gt;Slices can be declared quite similar to arrays but we don't enter the initial size(length). As discussed in the array part, we can use the var keyword and the square brackets. Though you don't have to enter the length inside the &lt;code&gt;[]&lt;/code&gt; brackets, the type of the slice needs to enter.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go[]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, initially, it is empty without an element as we have not initialized any elements. If you enter the length in the &lt;code&gt;[]&lt;/code&gt; brackets, it would be an array and not a slice.&lt;/p&gt;&lt;p&gt;We can also initialize the elements in the slice with the slice literal as we did with arrays using an array literal. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;frameworks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Django&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Laravel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Flask&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Rails&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frameworks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go[Django Laravel Flask Rails]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="using-make-function"&gt;Using make function&lt;/h3&gt;&lt;p&gt;We can even use the &lt;a href="https://pkg.go.dev/builtin#make"&gt;make&lt;/a&gt; function to create a slice in golang. The make function basically allows us to create a slice by providing the length as well as the capacity. Let's clear the concept of Capacity and Slice first.&lt;/p&gt;&lt;h4 id="capacity-in-slice"&gt;Capacity in Slice&lt;/h4&gt;&lt;p&gt;Capacity in slices is the initial value provided during the declaration of a slice. It basically holds the capacity of the slice to grow beyond the length. OK, let's take an example, If you declare a slice using make with length 3 and capacity 5, you initially can access 3 elements but memory has been allocated for 5 elements, if your slice exceeds this capacity it will double its original capacity. &lt;/p&gt;&lt;h4 id="obtain-length-and-capacity-of-slice"&gt;Obtain Length and Capacity of Slice&lt;/h4&gt;&lt;p&gt;We can get the capacity by using the &lt;a href="https://pkg.go.dev/builtin#cap"&gt;cap&lt;/a&gt; function just like the &lt;code&gt;len&lt;/code&gt; function. In slices, we can use the lens function to get the length and the cap function to get its underlying capacity to grow.&lt;/p&gt;&lt;p&gt;It's just a way for us to manage the memory reallocation for a slice. Slices under the hood are arrays with a more dynamic punch. So, now we can a bit confidently move to the make function for declaring slices.&lt;/p&gt;&lt;h3 id="back-to-make-function"&gt;Back to make function&lt;/h3&gt;&lt;p&gt;The Make function is used to declare and initialize a slice (not only slice but maps and channels as well). The function primarily takes in 3 parameters namely, the type of slice, the initial length of the slice, and optionally the capacity of the slice. If we don't provide the capacity, the capacity is set the same as the length.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Go&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Javascript&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Length = %d \nCapacity = %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Java&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Kotlin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PHP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Length = %d \nCapacity = %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go[Python Go Javascript]Length = 3Capacity = 5[Python Go Javascript Java Kotlin PHP]Length = 6Capacity = 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, there are a lot of things to take in here. We use the make function by parsing in three parameters as said the type in the form of &lt;code&gt;[]type&lt;/code&gt; as a distinction for creating slices because we also use the map to create maps and channels. The next two parameters are length and capacity. So, we have initialized a slice of type string, length 3 i.e. we are saying we will initially access only three elements from the array, finally, the third parameter is the capacity which will be the already initialized array under the hood for the slice. So, we have already created an array(under the hood) with 5 elements initialized but only 3 accessible from the slice interface.&lt;/p&gt;&lt;p&gt;Further, we initialize/modify the elements in the created slice. We set 3 elements to some strings and that way we have all elements filled with non-default values in the slice. Now if we say &lt;code&gt;langs[3] = "Something"&lt;/code&gt; it would give an error like &lt;code&gt;panic: runtime error: index out of range [3] with length 3&lt;/code&gt;. This is a panic in golang which can be triggered in one of the ways in the slice when you access an unreferenced element in it. We have initialized the element but not in the slice interface. So, we have a particular function called append which appends and thus grows the length beyond its current length and refers to the elements initialized from the capacity.&lt;/p&gt;&lt;p&gt;So initially the capacity was 5 and after adding the 6th element, it doubled down to &lt;code&gt;10&lt;/code&gt;. So, under the hood, all 5 elements in the array would have been re-allocated into a new memory location and the sixth element would have been added to the next location. This is how we efficiently re-allocate memory for elements in slices. We have a bit more control over the length and are more flexible than arrays.&lt;/p&gt;&lt;h3 id="using-new-function"&gt;Using new function&lt;/h3&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/builtin#new"&gt;new&lt;/a&gt; function in golang is used to allocate a slice/any other type. We can use the new function so as to mimic the make function by adding a bit of value like the initial capacity and length. You can refer to the &lt;a href="https://www.golangprograms.com/go-language/slices-in-golang-programming.html"&gt;article&lt;/a&gt; for providing the original idea. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Go&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Length = %d \nCapacity = %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Java&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Kotlin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PHP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Length = %d \nCapacity = %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;langs2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.goLength = 2Capacity = 3[Python Go Java Kotlin PHP]Length = 5Capacity = 6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, it would work almost similar to the make function. But by default, it would work as nil if you don't provide any length in the &lt;code&gt;[]&lt;/code&gt; brackets like &lt;code&gt;new([]string)&lt;/code&gt;. This will create a empty slice &lt;code&gt;[]&lt;/code&gt; with zero capacity and zero length.&lt;/p&gt;&lt;h2 id="adding-elements-in-slice"&gt;Adding elements in Slice&lt;/h2&gt;&lt;p&gt;We had a few spoilers for this already with the &lt;code&gt;append&lt;/code&gt; function. The &lt;a href="https://pkg.go.dev/builtin#append"&gt;append&lt;/a&gt; takes in the variable and then the list of values that we want to add. Here, if the capacity of the slice is exceeded, it re-allocates the slice to a new location, and the elements are moved to that location and then the provided elements are added. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;percentages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;78.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;85.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;94.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;79.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percentages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;percentages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percentages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;60.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;75.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percentages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go[78.8 85.7 94.4 79.8][78.8 85.7 94.4 79.8 60.5 75.6]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here we can see the append function adding the elements in a slice. You can pass as many elements(MaxInt i.e. int64 or int32 elements precisely) you require in the append function. Calling the append function, again and again, might degrade the efficiency though, so make sure to add a right number of elements in a single call.&lt;/p&gt;&lt;h2 id="accessing-and-modifying-elements-in-slice"&gt;Accessing and Modifying elements in Slice&lt;/h2&gt;&lt;p&gt;We can simply access the elements using the index in the &lt;code&gt;[]&lt;/code&gt; brackets. But there is more to that in slices. We can actually get slices of slices. Even in arrays or slices, we can get the particular elements between a specific two indices like 2 and 4, so we can write &lt;code&gt;array[2:4]&lt;/code&gt; to get elements at index &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt; the upper bound is non-inclusive. But if we want to have all the elements from a specific index to the last element, we can leave the number blank as &lt;code&gt;[2:]&lt;/code&gt; would give elements from index 2 to the last index in the array/slice.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;From index 2 to 4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;From index 0 to 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;From index 3 to 5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go[80 85 90 75 60 56 83]From index 2 to 4 [90 75 60]From index 0 to 2 [80 85 90]From index 3 to 5 [75 60 56 83]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we are able to perform index slicing in golang on arrays and slices.Further, as for the array, we can also modify elements in slices. Using the index of that element, we can access the element and perform operations on it and thus change the literal value of the element.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;fuzzybuzzz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, now we can also modify existing values of elements in slices. &lt;/p&gt;&lt;h2 id="deleting-elements-from-slice"&gt;Deleting elements from Slice&lt;/h2&gt;&lt;p&gt;We can also remove an element from the slice i.e. shrink the length of the slice. There is no function to remove an element from the slice, but we can work around with the append function in golang. So, in the slice before the element's index to be deleted is appended with all the elements after the index of the element to be deleted.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;10 20 30 40 50 600  1  2  3  4  5Delete the element at index -&amp;gt; 2Copy from 3 to 5 into the slice from 0 to 1// append(slice[:2], slice[2+1:]            ^            ^            |            |           10 20       40 50 60        append 40 50 60 -&amp;gt; 10 2010 20 40 50 60&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here in the above example, we append the indices after the element to be deleted into the slice of elements before the &lt;code&gt;to be deleted element&lt;/code&gt;.  &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter the index to be deleted: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// append in such a way that the element to be removed is excluded&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The element %d was deleted.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marklist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go[80 85 90 75 60]Enter the index to be deleted: 3The element 75 was deleted.[80 85 90 60]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="iterate-through-a-slice"&gt;Iterate through a slice&lt;/h2&gt;&lt;p&gt;As arrays are under the hood modifications of arrays, we have a quite similar approach to iterating over slices in golang.&lt;/p&gt;&lt;h3 id="using-three-statements-for-loop"&gt;Using three statements for loop&lt;/h3&gt;&lt;p&gt;We can use the three statements for loop i.e. the initialization, condition, and incrementation procedure. The counter is set from 0 or any other starting value as the index of the slice, next we have the end loop condition i.e. a condition to check until when to exit, and finally the amount to which we need to increment the counter.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;rune&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.gogolang&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="using-range-based-for-loop"&gt;Using Range-based for loop&lt;/h3&gt;&lt;p&gt;We can use range-based for loops to iterate over the slice elements. The range keyword is passed with the slice name or the slice of an array to iterate over. Using the two variables i.e. the iterator and the copy of the element, we can access the index and the element in the slice.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go80859075605683&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use a slice of slice i.e. scores[:4] to access a specific element in the range using index slicing.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.go859075&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="using-for-loop-with-range"&gt;Using for loop with range&lt;/h3&gt;&lt;p&gt;We can even use them for loop as a while loop to look and get a bit of both the above methods like the range method and the typical for loop access. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;modes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;insert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;visual&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;select&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Element at index %d = %s \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run slices.goElement at index 2 = insertElement at index 3 = visualElement at index 4 = select&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So by using the range keyword we were able to iterate over the slice but without assigning the iterator and the copy of the element, we manually set a counter &lt;code&gt;i&lt;/code&gt; and increment it as per our liking. Using index slicing we were able to get the elements between particular indices.&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we were able to understand the basics of slices in golang. We covered some basics stuff including the declaration, initialization, and iteration. We also covered the under the hood working of slices and how to relate with the arrays.Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/curl-basics'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Basics of curl command&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-basics-crud-api'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: CRUD API&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-slices</guid><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Maps</title><link>https://mr-destructive.github.io/techstructive-blog/golang-maps</link><description>Understanding the basics of Maps in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In the seventh part of the series, we will be covering Maps. We have covered some basic data structures like arrays and slices, and now we can move into maps or hash tables. Maps allow us to store key-value pairs of a particular type. In this part of the series, we will be covering the basics of Maps in Golang like declaration, iteration, and Creating, updating, and deleting keys from the map. &lt;/p&gt;&lt;h2 id="maps-in-golang"&gt;Maps in Golang&lt;/h2&gt;&lt;p&gt;Maps in golang are data structures that provide a way to store key-value pairs. It is also known as a hash table. Maps allow us to create unique keys which are associated with a value. It can be used to create a data structure that can have an item that is associated with a particular value, for example, the basic example of the map can be a frequency table of a list of numbers. We can store the frequency of each element occurring in the list. Let's say we have a list of numbers as &lt;code&gt;[3, 5, 9, 4, 9, 5, 5]&lt;/code&gt;, we can create a map of the frequency of these elements as &lt;code&gt;[3:1, 5:3, 4:1, 9:2]&lt;/code&gt;. Here, we have stored the information in the form of &lt;code&gt;key-value&lt;/code&gt; pairs as a frequency. So, &lt;code&gt;3&lt;/code&gt; has occurred one time, &lt;code&gt;5&lt;/code&gt; 3 times, and so on. &lt;/p&gt;&lt;p&gt;Maps are not stored in order of the numbers they are unordered so we need to manually sort them in the order we want. &lt;/p&gt;&lt;h2 id="declaring-maps"&gt;Declaring Maps&lt;/h2&gt;&lt;p&gt;We can declare maps by defining the type of mapping like the two types we are mapping. We can map any type with any other, like a character with an integer, an integer with an integer as we saw earlier, etc. We have several ways to decalre maps in golang, like using map literal, make function, new function, and a few others. We'll look into each of them in a brief.&lt;/p&gt;&lt;h3 id="simple-map-literal"&gt;Simple map literal&lt;/h3&gt;&lt;p&gt;As we saw in the array and slices, we used the slice literals to declare and initialize an array or a slice. Similarly, we can use the map literal to create a map in golang. Here, we use the &lt;code&gt;map&lt;/code&gt; keyword followed by the two types of data we are going to map with. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;char_freq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char_freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.gomap[M:1 e:2 t:1]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have used the map keyword to initialize a map with a &lt;code&gt;string&lt;/code&gt; with &lt;code&gt;int&lt;/code&gt;. The first data type is declared inside the square brackets&lt;code&gt;[]&lt;/code&gt; and the second data type outside the square brackets. We use the &lt;code&gt;{}&lt;/code&gt; to define the map values. We can even leave the &lt;code&gt;{}&lt;/code&gt; empty. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;char_freq := map[string]int{}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We initialize the values of the map by specifying the data for that data type in this example a string &lt;code&gt;""&lt;/code&gt; followed by a colon &lt;code&gt;:&lt;/code&gt; and finally the value of the second pair data. Each value is separated by a comma(&lt;code&gt;,&lt;/code&gt;). &lt;/p&gt;&lt;h3 id="using-make-function"&gt;Using make function&lt;/h3&gt;&lt;p&gt;We can even use the &lt;a href="https://pkg.go.dev/builtin#make"&gt;make&lt;/a&gt; function to create a map in golang. The make function is used for allocating memory. The make function allocates memory which might be enough for the initial values provided. It allocates more memory as the map grows in size. We use the make function by providing the &lt;code&gt;map&lt;/code&gt; keyword along with the data types of the key values pairs to be mapped. Optionally we can provide the capacity as we provided in the slice declaration. It basically doubles once it reaches the limit and is re-allocated. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.gomap[65:8 80:5 95:3]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have used the &lt;code&gt;make&lt;/code&gt; function for declaring the map, the initial size is around 7 if not mentioned. After it hits 7, the capacity is mostly doubled and increased as per the modifications. &lt;/p&gt;&lt;h3 id="using-the-new-function"&gt;Using the new function&lt;/h3&gt;&lt;p&gt;We can even use the &lt;a href="https://pkg.go.dev/builtin#new"&gt;new&lt;/a&gt; function(a bit hacky) to crated a map in golang. The new function basically is used to allocate memory but is not the same as the &lt;code&gt;make&lt;/code&gt; function, it returns the memory address to an allocated pointer. So, we can set the value of the returned function call of the new function with a pointer variable. A pointer in golang is simply a reference to a memory address, we'll dive into pointers in a different section. After the pointer is assigned a memory address, we can refer to the address of that pointer and thus access the original value which is the map itself.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.gomap[101:2 109:1 116:1]met&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we can see we created the map with the new function and stored the address into a pointer, later we initialized the empty map and stored the initial reference in the same pointer address. Then, we can finally store the map in another variable so that we can use it as a normal map. So, this is how we declare the map using the new function. &lt;/p&gt;&lt;h2 id="access-keys-and-values-in-maps"&gt;Access Keys and Values in Maps&lt;/h2&gt;&lt;p&gt;We can access the values by simply accessing them with the keys. Using the square bracket and the key literal into the braces, we get the value associated with that key. For example, the map &lt;code&gt;["M": 1, "E": 2, "T":1]&lt;/code&gt;, we can use the &lt;code&gt;map_name["E"]&lt;/code&gt; which will get the value as &lt;code&gt;3&lt;/code&gt;. &lt;/p&gt;&lt;h3 id="length-of-map"&gt;Length of Map&lt;/h3&gt;&lt;p&gt;The length of the map can be accessed using the len function, the len function returns the number of key-value pairs in the map. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;char_freq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;M&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char_freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char_freq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.gomap[M:1 e:2 t:1]3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="check-for-existing-keys-in-map"&gt;Check for existing Keys in Map&lt;/h2&gt;&lt;p&gt;We can check if a key exists in the map by using the comma-ok syntax. The key can be accessed using the first variable and if the key doesn't exist, the second variable is set to false. So, we can verify the existence of a key in the map using the two-variable approach.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;exist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The key %c exist and has value %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The key %c does not exist.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.goThe key t exist and has value 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we can see the exist value is true if the key exists and false if it doesn't. So, we can then verify if a particular key exists in a map or not. &lt;/p&gt;&lt;h2 id="adding-and-modifying-keysvalues-in-maps"&gt;Adding and Modifying Keys/Values in Maps&lt;/h2&gt;&lt;p&gt;We can add a key-value pair in a map by just using the key as we did in the initialization process. We simply pass the key in the square braces &lt;code&gt;[]&lt;/code&gt; and assign it a value appropriate to the data type used in the map. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shirt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shoes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jeans&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.gomap[mug:4 shirt:2 shoes:3]map[jeans:1 mug:3 shirt:2 shoes:3]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can access the keys in the map by just using the key as it is and altering the value it holds, the same thing applies to the addition of the key-value pairs, we can use the key and assign the value associated with it. &lt;/p&gt;&lt;h2 id="delete-keys-in-maps"&gt;Delete Keys in Maps&lt;/h2&gt;&lt;p&gt;We can delete the key-value pairs in the map, using the &lt;code&gt;delete&lt;/code&gt; function. We pass in the &lt;code&gt;key&lt;/code&gt; and the map to delete the key-value pair from the map. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shirt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shoes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jeans&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shoes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.gomap[mug:4 shirt:2 shoes:3]map[jeans:1 mug:3 shirt:2]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we can see the key-value pair was deleted from the map. &lt;/p&gt;&lt;h2 id="iterate-over-a-map"&gt;Iterate over a Map&lt;/h2&gt;&lt;p&gt;We can iterate over a map similar to the range keyword iteration for slices and arrays, but the exception here, is that we use the key, value instead of the index, copy of an element in the map as the range. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;is_prime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is_prime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d -&amp;gt; %t\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.go9 -&amp;gt; false13 -&amp;gt; true15 -&amp;gt; false16 -&amp;gt; false7 -&amp;gt; true&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we can observe that we can access the keys and values in the map using the range keyword for iterating over the map. Inside the for loop, we can refer to the assigned values present in the map. &lt;/p&gt;&lt;h3 id="use-only-key-or-value-while-iterating"&gt;Use only key or value while iterating&lt;/h3&gt;&lt;p&gt;If we don't use either of the variables like &lt;code&gt;key&lt;/code&gt; or  &lt;code&gt;value&lt;/code&gt;, the compiler might give us the unused variable error, so we have an alternative to use don't care variables namely the &lt;code&gt;_&lt;/code&gt; underscore character.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;is_prime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is_prime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Key : %d\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is_prime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Value: %t\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run map.goKey : 7Key : 9Key : 13Key : 15Key : 16Value: trueValue: falseValue: trueValue: falseValue: false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we use the &lt;code&gt;_&lt;/code&gt; to ignore the usage of the variable in the loop, if we are not sure of using any variable, we can ignore it completely with the underscore operator and thus prevent any compilation errors/warnings. So, here if we want to only access keys, we use &lt;code&gt;key, _&lt;/code&gt; in order to fetch only keys and silence the values in the map. If we want to access only the values, we can use &lt;code&gt;_, value&lt;/code&gt; so as to get all the values from the map. The variable name &lt;code&gt;key&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt; can be anything but make sure to use those only inside the loop.&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we were able to understand the basics of maps in golang. We covered some basics stuff including the declaration, initialization, and iteration. Maps are quite simple but important for creating interesting applications.&lt;/p&gt;&lt;p&gt;Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/techstructive-blog-init'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;What's in Techstructive Blog&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-structs'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Structs&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-maps</guid><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Functions</title><link>https://mr-destructive.github.io/techstructive-blog/golang-functions</link><description>Understanding the basics of functions in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In the eighth part of the series, we will be exploring functions in golang. We will be diving into some basics of functions in golang like declaration, definition and calling. We won't be exploring all the topics of functions as it is quite a large topic to cover in one shot. So, building from the base, we will be starting from the basic declaration to simple return statements. &lt;/p&gt;&lt;h2 id="functions-in-golang"&gt;Functions in Golang&lt;/h2&gt;&lt;p&gt;Functions in golang are a simple way to structure a block of code that can be re-usable. Functions also allow us to process a piece of logic and return the output. Functions allow us to write readable and scalable code as we have to write the code once and we can re-use the functionality of it by calling it. &lt;/p&gt;&lt;h2 id="declaring-functions"&gt;Declaring Functions&lt;/h2&gt;&lt;p&gt;We have already defined a function, if you have followed the series so far, or even written a &lt;code&gt;hello-world&lt;/code&gt; application. The &lt;code&gt;main&lt;/code&gt; function is the most fundamental function we can define in golang. The main is complicated if dive deeper but in the simplest of term it acts as a entry point for the entire program. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have written the above code a lot of times till now, but never really talked about it's significance. Here we will understand the terminologies related to the main function. A function is declared with the &lt;code&gt;func&lt;/code&gt; keyword along with the name of the function. There needs to be the &lt;code&gt;()&lt;/code&gt; parenthesis after the name of the function, optionally it can take parameters inside the parameters to be used inside the function. &lt;/p&gt;&lt;p&gt;We define the core functionality or the core logic of the function inside the braces &lt;code&gt;{}&lt;/code&gt;. We also have the &lt;code&gt;return&lt;/code&gt; keyword which can return values from the function to the block where we have called the function. Usually, we call a function from other function (most of the times it's the &lt;code&gt;main&lt;/code&gt; function). The &lt;code&gt;return&lt;/code&gt; keyword is not mandatory and it is usually added at the end of the function block, just before the closing braces &lt;code&gt;}&lt;/code&gt;. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hello_world_007&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can define a custom function outside the main function by giving it a appropriate name. For the time bwing we can leave it empty and further define the logic of the actual function. &lt;/p&gt;&lt;p&gt;The name of the function can be given as per the following standards:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Using letters&lt;code&gt;a-z A-Z&lt;/code&gt;, numbers&lt;code&gt;0-9&lt;/code&gt;, underscore &lt;code&gt;_&lt;/code&gt; as a name.&lt;/li&gt;&lt;li&gt;Should not contain any spaces in-between the name.&lt;/li&gt;&lt;li&gt;Should not begin with a number or underscore.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="defining-functions"&gt;Defining Functions&lt;/h2&gt;&lt;p&gt;Inside the &lt;code&gt;{}&lt;/code&gt; we define the actual functionality/logic of the function. The variables inside the function will remain local to the function and can't be accessed or altered from outside the function, though if we really want to access some global variables(from main or other functions) we can pass parameters, we will look into it in the next few sections. For time being, we will be focusing on the actual code block inside the function. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a basic function that just calls another function &lt;code&gt;Println&lt;/code&gt; from the fmt package, which basically prints text in the console. Though, we are using the function Println, it won't print the content to the string as we are not using/calling the function. Now, we can get a step ahead and start working with variables inside the function.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gopher&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now added the local variable &lt;code&gt;name&lt;/code&gt;inside the function, so this variable can only we referred inside the particular function. &lt;/p&gt;&lt;h2 id="calling-functions"&gt;Calling Functions&lt;/h2&gt;&lt;p&gt;We can call the function from the main function or any other function by just specifying the name along with the &lt;code&gt;()&lt;/code&gt; and optionally the parameters inside the parenthesis. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gopher&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run func.goHello Gopher&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we define the function &lt;code&gt;hello_world&lt;/code&gt; and call the function by using the statement &lt;code&gt;hello_world()&lt;/code&gt; inside the main function and now, we are able to actually run the function. &lt;/p&gt;&lt;h2 id="passing-parameters"&gt;Passing Parameters&lt;/h2&gt;&lt;p&gt;We can optionally parse variables from a function to other and process it for further computation and programming. So, we can pass parameters in a function by specifying the name to be used inside the function followed by the type of that variable. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greet_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Meet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;greet_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;greet_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run func.goHello, Meet !Hello, John !&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have used the parameter &lt;code&gt;name&lt;/code&gt; as a string in the function and used it inside the function body. The parameter name which is to be called from the main function can be anything and not necessarily be the same as declared in the function declaration. For instance, we have used the variable in the main function &lt;code&gt;n&lt;/code&gt; which is passed in the function call. We can even pass the value as it is to the function in golang.  &lt;/p&gt;&lt;h2 id="return-keyword"&gt;Return Keyword&lt;/h2&gt;&lt;p&gt;We can use the return keyword to actually return a value from the function and not just display the message. The returned value can be later used from other places in the program. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// return value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;for x = 3 , y = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run func.gofor x = 3 , y =  5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here we are able to fetch the returned value from the function and store it in another variable and further compute the required logic. We also need to specify the return type of the function after the parameters like &lt;code&gt;func (parameters) return-type { }&lt;/code&gt;. Here, we need to return the specified type of the return value from the function else it would give a compilation error. &lt;/p&gt;&lt;p&gt;So, we basically need to provide the return value and also the return statement to capture the value from the function call. &lt;/p&gt;&lt;h3 id="multiple-return-values"&gt;Multiple return values&lt;/h3&gt;&lt;p&gt;We can also provide multiple return values by providing a list of return values like &lt;code&gt;(type1 type2 type3 ....)&lt;/code&gt;. We can return the values by separating the values by a comma. So, while calling the function, we need to specify the variables again as comma-separated name and this will capture the value from the function call.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// multiple return values&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sqube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;for x = 5 , x^2 =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x^3 =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x is odd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x is true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sqube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is_odd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;is_odd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;is_odd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is_odd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run func.gofor x = 5 , x^2 = 25 x^3 = 125x is odd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we have returned multiple values from the function like two integers and one boolean. The parameter is a single integer, now we need to parse 3 variables in order to capture all the values from the function call. Thus, we are able to get all the values from the function.&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we are able to understand the basics of functions in golang. We covered from declaration, definition and simple return statements and function calling. Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/vim-for-cp'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim for Competitive Programming&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-pointers'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Pointers&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-functions</guid><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Structs</title><link>https://mr-destructive.github.io/techstructive-blog/golang-structs</link><description>Exploring the fundamentals of Structures in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Moving on to the 9th part of the series, we will be understanding structs in golang. Structs are an important aspect of programming in Golang, they provide a way to define custom types and add functionality to them. We will be understanding the basics of operating on structs like declaration, initialization and adding functional logic into those structs. &lt;/p&gt;&lt;h2 id="structs-in-golang"&gt;Structs in Golang&lt;/h2&gt;&lt;p&gt;Structs or Structures in Golang are the sequences or collections of built-in data types as a single type interface. Just like we have int, string, float, and complex, we can define our own data types in golang. They can consist of built-in data types as mentioned and also certain functions or methods which can be used to operate on them. Using structs we can create custom data types that can meet the specific requirements of our problem. We can define structs and later inside functions we can create instances of those structures. &lt;/p&gt;&lt;p&gt;Structures are like a template or blueprint representation of data. It doesn't hold the actual data in memory, it is just used to construct an object of that type. After defining a struct, we can create instances or objects of those structs. These instances actually hold data in memory in the run time, so we basically deal with objects in the actual program. We'll see certain concepts of creating instances, declaring and defining structs, accessing data from instances and so on in the following section of the article.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Struct / Class Template / Structure for creating custom data types - Properties  (variables and constants defined inside a structure)- Methods     (functions that are bound to a struct)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="declaring-struct"&gt;Declaring Struct&lt;/h2&gt;&lt;p&gt;We can declare structs by using the keyword &lt;code&gt;type&lt;/code&gt; followed by the name of the struct, after tha name, the &lt;code&gt;struct&lt;/code&gt; keyword itself, and finally sets of parenthesis &lt;code&gt;{}&lt;/code&gt;. Inside the parenthesis, we define the structure i.e. which type of data is to be stored and the name of those respective variables.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;is_published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have declared a struct or a custom data-type or a class(not really) in golang with the name &lt;code&gt;Article&lt;/code&gt; that has few associated properties/variables inside of it. We have &lt;code&gt;title&lt;/code&gt; as a string, &lt;code&gt;is_published&lt;/code&gt; as a boolean, and &lt;code&gt;words&lt;/code&gt; as an integer value. This constructs a simple type of golang which has a defined structure. We can further use this Article struct as a data type in the main function or any appropriate scope for actually assigning the structure memory at runtime. &lt;/p&gt;&lt;h3 id="struct-naming-convention"&gt;Struct Naming Convention&lt;/h3&gt;&lt;p&gt;There are a few things that we need to understand and make a note of, especially the naming convention.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The struct name should be capitalized if you want to make it publicly accessible.&lt;/li&gt;&lt;li&gt;The variable/properties names i.e. &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;is_published&lt;/code&gt;, and &lt;code&gt;words&lt;/code&gt; should be also capitalized if you want to make them accessible from the struct instance.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This might not be important right now but it is worth knowing for later use cases. Let's say we want to use a struct from other files or modules, for that the name of the struct in the file/script where the struct is defined should have the &lt;code&gt;Capitalized&lt;/code&gt; convention. If you have a simple and single file script/program, you can keep it &lt;code&gt;lowercased&lt;/code&gt; or &lt;code&gt;camelCased&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Leaving that aside, for now, we will try to focus on the essence of the structs in golang. &lt;/p&gt;&lt;h2 id="creating-instancesobjects-of-structs"&gt;Creating Instances/Objects of Structs&lt;/h2&gt;&lt;p&gt;Now, after defining the struct we need to create instances or objects of them. This can be done in several ways like using Struct literal, Manual assignment, and using the new function. We'll look into each of them in this section.&lt;/p&gt;&lt;h3 id="using-struct-literal"&gt;Using struct literal&lt;/h3&gt;&lt;p&gt;The most simplest and straightforward way to initialize a struct is to use the struct literal just like we did with Maps, Slices, and Arrays. We basically parse the values of the respective fields in the struct.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;is_published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;golang&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Golang Intro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;golang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run struct.go{Golang Intro true 2000}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have created the object or instance of the struct &lt;code&gt;Article&lt;/code&gt; using the shorthand notation or the walrus &lt;code&gt;:=&lt;/code&gt; operator. Inside the &lt;code&gt;{}&lt;/code&gt; braces, we can assign values but those values need to be in the same order as defined in the struct definition, else it gives a compilation error of &lt;code&gt;type mismatch&lt;/code&gt;. So, here we have assigned the value &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;is_published&lt;/code&gt;, and &lt;code&gt;word&lt;/code&gt; as &lt;code&gt;Golang Intro&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;2000&lt;/code&gt; respective in that order. &lt;/p&gt;&lt;h3 id="using-key-value-pairs"&gt;Using Key-value pairs&lt;/h3&gt;&lt;p&gt;We can also use the &lt;code&gt;key-value&lt;/code&gt; notation for assigning values in the instance. With the previous method, we need to specify and thus initialize all the properties at once, but using this method we have a bit more flexibility. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;vim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Vim: Keymapping&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;is_published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run struct.go{Vim: Keymapping false 0}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we have provided the key i.e. the variable name inside the struct, and then provided the value to it separated by a colon &lt;code&gt;:&lt;/code&gt;. Using this way of initializing instances of struct we have better control and flexibility in providing a default value for that object. In the example above, we didn't initialize the property &lt;code&gt;words&lt;/code&gt; but it already initialized to &lt;code&gt;0&lt;/code&gt; since the object is created hence the memory allocation is completed, and thereby it needs to have a default value.&lt;/p&gt;&lt;h3 id="using-the-new-function"&gt;Using the new function&lt;/h3&gt;&lt;p&gt;We can use the &lt;a href="https://pkg.go.dev/builtin#new"&gt;new&lt;/a&gt; function to create a new instance of a struct. Though we can't provide an initial value, using the new function all the properties are initialized with their respective default values. Further, if we want to modify the values, we can access each property (variables in struct) using the &lt;code&gt;dot operator&lt;/code&gt; and assign the desired values. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run struct.go{ false 0}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have used the new function to allocate memory for an instance of struct with the provided name. This function basically allocates all the properties of a default value and returns a pointer to that memory address. If we store the result of the new function in a variable object, we would get a pointer but we need the object itself, so we use &lt;code&gt;*&lt;/code&gt; before the new function so as to de-reference the memory address from the pointer. &lt;/p&gt;&lt;p&gt;So, we have stored the default values in the newly created object of Article structure in &lt;code&gt;django&lt;/code&gt;, this gives the default values like an empty string &lt;code&gt;""&lt;/code&gt;, default boolean value &lt;code&gt;false&lt;/code&gt; and default integer value &lt;code&gt;0&lt;/code&gt;. If we don't dereference the pointer and use it like &lt;code&gt;djagno := new(Article)&lt;/code&gt;, thereby we get a pointer in that variable as &lt;code&gt;&amp;amp;{ false 0}&lt;/code&gt;. Hence we use &lt;code&gt;*&lt;/code&gt; before the new keyword. &lt;/p&gt;&lt;h4 id="accessingassigning-values-to-properties"&gt;Accessing/Assigning values to properties&lt;/h4&gt;&lt;p&gt;We can now change the values of the properties in the object of the struct using the dot operator. We basically use the instance object name followed by a &lt;code&gt;.&lt;/code&gt; and the property name to set its value.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Django View and URLs&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3500&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_published&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run struct.go{ false 0}{Django View and URLs true 3500}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, here we have used the object name which is &lt;code&gt;django&lt;/code&gt;, and access any property by name with the &lt;code&gt;dot operator&lt;/code&gt;, thereby we set the value as per the requirement. Note, we have not used the &lt;code&gt;:=&lt;/code&gt; operator as the properties have already been initialized, we simply need to modify the default value.&lt;/p&gt;&lt;h2 id="creating-functions-associated-to-structs"&gt;Creating Functions associated to Structs&lt;/h2&gt;&lt;p&gt;We can now move into creating functions in the struct, by adding functions/methods in structs we can incorporate a lot of functionality into the structure of our data type. For instance, we can set the value of a string as &lt;code&gt;"Empty"&lt;/code&gt; or &lt;code&gt;"NA"&lt;/code&gt; beforehand rather than empty string &lt;code&gt;""&lt;/code&gt;. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sent&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;word_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;check_spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Spam!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Safe!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mail one: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check_spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_two&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xyz@xyz.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Golang Structs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mail two: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check_spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run methods.goMail one: Spam!Mail two: Safe!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We define a function associated with a struct by providing the &lt;code&gt;struct-name&lt;/code&gt; and a parameter name which can be just used inside of the function. Here, we have used &lt;code&gt;(m Mail)&lt;/code&gt; so as to reference the object of the struct provided to it. This basically binds the function to the struct and hence it becomes a method of that struct. &lt;/p&gt;&lt;p&gt;Further, we can access the properties from the struct by their name using the dot separator. We are just checking whether the subject property in the instance is empty or not and simply printing text to the console. We are accessing the function and calling it with the syntax as &lt;code&gt;instance_name.function_name()&lt;/code&gt;, here the function name is &lt;code&gt;check_spam&lt;/code&gt; and the object name is &lt;code&gt;mail_one&lt;/code&gt; for the first instance. Thereby we have called the function which is bounded to the instance of the struct. As we have accessed the function after the instance name the binding of the function i.e. the statements &lt;code&gt;(m Mail)&lt;/code&gt; has taken the current instance and parsed it as the instance of the struct. Hence we are able to access the current instance's properties within the function/method.&lt;/p&gt;&lt;h4 id="adding-a-return-statement"&gt;Adding a return statement&lt;/h4&gt;&lt;p&gt;By simply providing the return type and return statement with value, we can create functions of specific return types. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sent&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;word_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;check_spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;print_spam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Spam!!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Safe!!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mail one: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;is_mail_1_spam&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mail_one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check_spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print_spam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;is_mail_1_spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_two&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xyz@xyz.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Golang Structs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Mail two: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;is_mail_2_spam&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mail_two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check_spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mail_two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print_spam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;is_mail_2_spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run methods.goMail one: Spam!!Mail two: Safe!!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have modified the &lt;code&gt;check_spam&lt;/code&gt; function which returns a boolean value. If the subject is empty it returns true else it returns false. Also, we have added a function &lt;code&gt;print_spam&lt;/code&gt; function which takes in a parameter as a boolean value and prints text according to the value. This is how we work with functions in structs. We have parsed the return value of the &lt;code&gt;check_spam&lt;/code&gt; function as a parameter to the &lt;code&gt;print_spam&lt;/code&gt; function. &lt;/p&gt;&lt;h3 id="constructor-in-structs"&gt;Constructor in Structs&lt;/h3&gt;&lt;p&gt;Constructors are special methods that are invoked when the instance of a struct is created i.e. the properties are assigned an initial value or default value. In this way, we can perform basic operations which we need to perform after the instantiation of the struct.&lt;/p&gt;&lt;p&gt;Golang does not have built-in constructors, but it is quite easy to create one. We simply need to create a function with an appropriate name(don't clash it with the struct name!!), by providing all the parameters that are in the struct so as to initialize them, and finally the return value as a reference to the struct instance. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;file_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;New_Repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;file_count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;file_count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;New_Repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run constructor.go{Test 1}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have created a function that is technically acting like a constructor as it sets a default value to the properties in the structure. We have struct &lt;code&gt;Repository&lt;/code&gt; containing &lt;code&gt;name&lt;/code&gt; as a string and &lt;code&gt;file_count&lt;/code&gt; as an integer. We created a Constructor function named &lt;code&gt;New_Repository&lt;/code&gt; that basically takes in the properties in the struct, remember they haven't been initialized yet as we are writing the constructor for the very purpose. We have to parse the parameters with the initial value and let it modify once we have created the instance. &lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from this part of the series, we are able to understand the basics of structs in golang. We covered declaration, definition, and adding methods in a struct. This gives a glimpse of Object-Oriented Programming in Golang. Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-maps'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Maps&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-for-cp'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim for Competitive Programming&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-structs</guid><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Pointers</title><link>https://mr-destructive.github.io/techstructive-blog/golang-pointers</link><description>Diving into the pointers and memory address(under the hood) things in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In the tenth part of the series, we will be looking into an interesting concept in programming i.e. Pointer. It's a simple thing but a really powerful concept. Using pointers we can do several things very easily rather than writing a lot of code for a simple thing. We will be looking into basic concepts like declaration, referencing, de-referencing, and some examples on passing by reference, along with a pointer to struct instances. &lt;/p&gt;&lt;h2 id="pointers"&gt;Pointers&lt;/h2&gt;&lt;p&gt;Pointers are simple, it's just their use case that makes it a big concept. Pointers are really powerful, they can do a lot of things that might seem impossible for a given problem. A pointer is a variable but unlike another variable which stores values in the form of integers, string, boolean, etc. pointers store the memory address. Memory address can be any valid location in memory that generally holds a variable. &lt;/p&gt;&lt;p&gt;So, using pointers we can play with the memory address of variables and modify the contents of the variable directly using the memory address rather than accessing the variable. In golang, we have ways to store pointers and perform operations for the same.&lt;/p&gt;&lt;h2 id="declaring-pointers"&gt;Declaring Pointers&lt;/h2&gt;&lt;p&gt;To declare pointers in golang, we can use the &lt;code&gt;*&lt;/code&gt; before the type of data type we want to refer to. This means a pointer needs to specify which data type it is referencing as a measure of caution to mismatch types in the variable. Initially, the pointer variable is mapped to &lt;code&gt;&amp;lt;nil&amp;gt;&lt;/code&gt; that is it points to nothing but a null pointer. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ptr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run pointer.go&amp;lt;nil&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, the pointer that references an integer is initialized to nil. We have used &lt;code&gt;*&lt;/code&gt; before the data type, this can be anything like &lt;code&gt;*string&lt;/code&gt;, &lt;code&gt;*bool&lt;/code&gt;, &lt;code&gt;*float64&lt;/code&gt;, etc. &lt;/p&gt;&lt;h2 id="the-and-in-pointers"&gt;The * and &amp;amp; in Pointers&lt;/h2&gt;&lt;p&gt;After declaring a pointer, we can now move into assigning a pointer a memory address. Using the &lt;code&gt;&amp;amp;&lt;/code&gt; or the ampersand operator we can get the memory address of a variable. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a_pointer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a_pointer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run pointer.go0xc0000a6080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we can see that the pointer variable is storing the memory address of an integer variable. Don't worry about the value of the pointer variable, it is just a memory location on your machine. So, we use the &lt;code&gt;&amp;amp;&lt;/code&gt; to access the memory address of any variable.&lt;/p&gt;&lt;p&gt;We have seen that the &lt;code&gt;*&lt;/code&gt; is used to declare a pointer variable, but it is also used for dereferencing a pointer. So, if we used &lt;code&gt;&amp;amp;&lt;/code&gt; to get the memory address of a variable, similarly we can use the &lt;code&gt;*&lt;/code&gt; to get back the value from the memory address. Both are opposite in terms of accessing the value. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a_pointer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a_pointer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;a_pointer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run pointer.go0xc0000a808034&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, we have accessed the value stored in the pointer variable(&lt;code&gt;a_pointer&lt;/code&gt;) by using the &lt;code&gt;*&lt;/code&gt;. Here, the variable which we have created &lt;code&gt;m&lt;/code&gt; will be of type whatever is stored in the memory address of the provided pointer variable. In this case, it is &lt;code&gt;int&lt;/code&gt;, it can anything.&lt;/p&gt;&lt;p&gt;So, this is how &lt;code&gt;*&lt;/code&gt; and the &lt;code&gt;&amp;amp;&lt;/code&gt; work in Golang. The &lt;code&gt;*&lt;/code&gt; is used for declaring pointer variables as well as de-referencing pointer variables, and the &lt;code&gt;&amp;amp;&lt;/code&gt; operator is used for accessing the memory address of the variable. &lt;/p&gt;&lt;p&gt;That's basically the concept of pointers in golang. It's that simple. Using the simple concept of referencing and de-referencing, we can perform some operations like passing by reference to functions which will allow us to actually pass the value rather than the copy of the variable's value. &lt;/p&gt;&lt;h2 id="passing-by-reference-to-function"&gt;Passing by Reference to Function&lt;/h2&gt;&lt;p&gt;Now we have the fundamentals of pointers cleared, we can move into actually using them to do some really useful operations. Generally, when we use parameters such as integers, strings, bool, etc. we are passing the copy of the variables into the function rather than the actual value of the variable. This is where pointers come in. By using pointers to pass the memory address of the variables we need to pass in we actually pass the location of the variables.&lt;/p&gt;&lt;p&gt;Let's take a look at a simple example of a function that swaps the value of two variables.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Before swapping : x = %d and y = %d.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;After swapping  : x = %d and y = %d.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run pointer.goBefore swapping : x = 3 and y = 6.After swapping  : x = 6 and y = 3.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see here, that we have used pointers to pass the value of parameters to a function. Without using pointers, the value of the variable is passed as a copy but by using pointers, we are actually passing the memory address. In the main function, we first store the memory address of two variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; into two different pointer variables. We now can construct a function that accepts two memory addresses and perform further operations. &lt;/p&gt;&lt;p&gt;Inside the function, we have de-referenced the pointer variables as with &lt;code&gt;*&lt;/code&gt;. Don't confuse &lt;code&gt;x *int&lt;/code&gt; with &lt;code&gt;*x&lt;/code&gt;. We use &lt;code&gt;x *int&lt;/code&gt; to make the function realize that we are passing a pointer variable of an integer value, and &lt;code&gt;*x&lt;/code&gt; is used to de-reference the memory address which is stored in &lt;code&gt;x&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;So, simply we - store the value in the memory location stored at &lt;code&gt;x&lt;/code&gt; in the temp variable- store the value at the memory address stored in &lt;code&gt;y&lt;/code&gt; into the memory address &lt;code&gt;x&lt;/code&gt;. - store the value of the temp variable into the memory address stored in &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We have successfully swapped two values without returning any values from the function.&lt;/p&gt;&lt;h2 id="pointer-to-a-struct-instanceobject"&gt;Pointer to a Struct Instance/Object&lt;/h2&gt;&lt;p&gt;We can now even modify the values of Struct objects/instances by referencing the instance to a pointer. By assigning the pointer variable to a struct instance, we have access to its associated properties and function. Thereby we can modify the contents directly from the pointer variable.&lt;/p&gt;&lt;p&gt;Let's take a look at a basic example of modifying properties using a pointer to a struct instance.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;genre&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;new_book&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fiction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Harry Potter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Type of new_book -&amp;gt; %T\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;new_book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;book_ptr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;new_book&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;book_ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Games of Thrones&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run pointer.go{120 fiction Harry Potter}Type of new_book -&amp;gt; main.Book{120 fiction Games of Thrones}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we have created a pointer variable of the type which is a struct &lt;code&gt;Book&lt;/code&gt;, this gives us access to the memory addresses associated with various properties defined in the struct. Using the pointer variable, we can access properties and thereby change the value directly as we have the memory address stored in &lt;code&gt;book_ptr&lt;/code&gt;. So, if we say &lt;code&gt;book_ptr.title = "Games of Thrones"&lt;/code&gt;, we are storing the string directly into the memory address of the &lt;code&gt;new_book&lt;/code&gt; object as &lt;code&gt;book_ptr&lt;/code&gt; refers to the memory addresses to the struct object &lt;code&gt;new_book&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Here, we have literally changed the value of a property in a struct object using pointers. This is really powerful and time-saving. If pointers were not a thing, you would have to write a separate function for doing the same. &lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, that's it we have covered enough basics of pointers so that we are able to understand the working of simple scripts or programs. Even simple data structures like slices or strings can be understood by using pointers in golang. From this part of the series, we were able to understand the declaration, referencing, and de-referencing of pointers along with passing by reference to functions and creating pointers to struct instances. &lt;/p&gt;&lt;p&gt;Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-functions'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Functions&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/golang-variables'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Variables and Types&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-pointers</guid><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Packages</title><link>https://mr-destructive.github.io/techstructive-blog/golang-packages</link><description>Exploring and understanding packages in Golang along with it's usage</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In this 11th part of the series, we will be covering packages in golang. Package is a cool way to organize code in large projects. We can create a separate file which can include certain helper functions or variables from other files or scripts. There are couple of types of packages like packages from the standard library, open sourced community packages and custom packages that you can build of your own. In this particular section, we will be covering the fundamentals of packages and exploring the standard library in golang. &lt;/p&gt;&lt;h2 id="what-is-a-package"&gt;What is a Package ?&lt;/h2&gt;&lt;p&gt;Package in simplest of terms is a collection of go scripts that can serve a purpose. Just like &lt;code&gt;fmt&lt;/code&gt; has several functions like &lt;code&gt;Println&lt;/code&gt;, &lt;code&gt;Printf&lt;/code&gt;, &lt;code&gt;Scan&lt;/code&gt;, &lt;code&gt;Scanf&lt;/code&gt;, etc. most packages have functions that we can use in our own programs to solve a simple problem. We have already created many packages but none of them have been super useful so far, we just used the statement &lt;code&gt;package main&lt;/code&gt; and didn't use the package anywhere. Every package has a entry point called &lt;code&gt;main&lt;/code&gt; along with a entry function &lt;code&gt;main&lt;/code&gt; which is triggered when we run the package. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- package_name    - script_1.go    - script_2.go    - sub_package_name        - utility_1.go    - go.mod&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above is a simple folder structure for a package in golang, we have the package itself as the name of the folder. Inside of the package folder, we would have the scripts or sub-packages if any. Also there is a &lt;code&gt;go.mod&lt;/code&gt; file in all go source package folders which contain the meta information about the package and it's dependencies. &lt;/p&gt;&lt;p&gt;Let's take a look at the &lt;a href="https://github.com/golang/go/tree/master/src/fmt"&gt;fmt&lt;/a&gt; package source code, it has a &lt;a href="https://github.com/golang/go/blob/master/src/fmt/print.go"&gt;print.go&lt;/a&gt; file which has all the functions associated with printing, similarly separate files for different core functionality.&lt;/p&gt;&lt;p&gt;We will soon into the details of packages in this series. Right now, we only care about the fundamentals of a package in golang.&lt;/p&gt;&lt;h2 id="importing-packages"&gt;Importing Packages&lt;/h2&gt;&lt;p&gt;We have been already importing a package since writing our hello world in go, the &lt;code&gt;fmt&lt;/code&gt; package which holds some functions for formatting, printing, logging and various string input/output manipulation. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we have used the simple &lt;code&gt;import "package"&lt;/code&gt; statement, but there are a couple of more ways to import packages if we have multiple packages to import.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the &lt;code&gt;()&lt;/code&gt; and by specifying the name of the package we can import multiple packages at once. Also there is a harder way out there, if you really like to toil hard.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is generally avoided as it just looks too pythonic, we are in golang. &lt;/p&gt;&lt;h3 id="aliasing-imported-packages"&gt;Aliasing Imported packages&lt;/h3&gt;&lt;p&gt;We can alias an package a name whatever we want for the usage in the rest of the script file. This allows a bit better semantics of longer package names into readable code. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run import.go3454565657742387432&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have imported the package &lt;code&gt;math/rand&lt;/code&gt;, here &lt;a href="https://pkg.go.dev/math/rand@go1.18.1#Int"&gt;rand&lt;/a&gt; is a sub package of the main package math. Hence we have aliased the rand package as &lt;code&gt;r&lt;/code&gt; and thus, we can use r to access all the functions and other types from the package. &lt;/p&gt;&lt;h3 id="blank-package-import"&gt;Blank Package Import&lt;/h3&gt;&lt;p&gt;We can even import the package but not use it without getting a compilation error. So, the blank identifier is used in golang to ignore the initialized or returned values from any context and avoid the compilation warning or errors.  &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run blank_import.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we have imported &lt;code&gt;fmt&lt;/code&gt; package with a &lt;code&gt;_&lt;/code&gt; blank identifier but we didn't use it anywhere, still we don't get any error messages and it compiled the code successfully.&lt;/p&gt;&lt;h2 id="standard-library-packages"&gt;Standard Library Packages&lt;/h2&gt;&lt;p&gt;The Golang Standard Library has some good number of packages which can be used for some general tasks like formatting input/output, file handling, web requests, system commands, etc. You can check out the entire list along with the documentation on the &lt;a href="https://pkg.go.dev/std"&gt;official website&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;We can import these standard library packages just by parsing their name in the string quotes like we did with &lt;code&gt;fmt&lt;/code&gt; as &lt;code&gt;"fmt"&lt;/code&gt;. We have previously used the &lt;code&gt;rand&lt;/code&gt; package from the math standard library package as a sub-package by using the statement &lt;code&gt;"math/rand"&lt;/code&gt;, if we want we can import the entire &lt;code&gt;math&lt;/code&gt; package as &lt;code&gt;"math"&lt;/code&gt; but that's unwanted and we import only the package which we really need.&lt;/p&gt;&lt;p&gt;There are other packages as well like &lt;code&gt;bufio&lt;/code&gt; which is used for reading and performing operations with text, &lt;code&gt;os&lt;/code&gt; for working with files systems and operating system level stuff, and other packages which are specific to use cases like rendering templates, time, sorting, math operations, encoding, etc. We will dive into some of them throughout this series. &lt;/p&gt;&lt;h2 id="installing-packages"&gt;Installing Packages&lt;/h2&gt;&lt;p&gt;We can now get into installing other packages which are not in the standard library. You can get the documentation along with all references for a particular package on the official Golang &lt;a href="https://pkg.go.dev/"&gt;package repository&lt;/a&gt;. We use the CLI command to grab the packages into our &lt;code&gt;GOPATH&lt;/code&gt;. OK, GOPATH, we have not covered this!&lt;/p&gt;&lt;h3 id="gopath"&gt;GOPATH&lt;/h3&gt;&lt;p&gt;GOPATH is the path or the location in your system's disk where all the packages and modules are stored. You can get the default location of your GOPATH environment variable from the simple shell command.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ echo $GOPATHC:\Users\acer\go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It has a few folders namely, &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;pkg&lt;/code&gt;, and &lt;code&gt;src&lt;/code&gt;. These folder server different purpose like: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;bin&lt;/code&gt; for storing the binaries generated from &lt;code&gt;go install&lt;/code&gt; command&lt;/li&gt;&lt;li&gt;&lt;code&gt;pkg&lt;/code&gt; for storing pre-compiled source files and objects for quicker generation of executables and compilation.&lt;/li&gt;&lt;li&gt;&lt;code&gt;src&lt;/code&gt; for storing all the go source files of packages and modules.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="go-get-command"&gt;Go Get command&lt;/h3&gt;&lt;p&gt;Now, let's see how to install a package from the go community on GitHub.  &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go get github.com/gorilla/mux&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have installed a package which is a powerful HTTP router and a URL dispatcher and it can also be used to make web applications. It's called &lt;code&gt;mux&lt;/code&gt;, we won't be using it right away just to get a feel for installing and playing with packages at the moment. &lt;/p&gt;&lt;p&gt;After executing the command &lt;code&gt;go get&lt;/code&gt; you should see a folder to be added in the &lt;code&gt;$GOPATH\pkg\mod&lt;/code&gt; as &lt;code&gt;github.com\gorilla&lt;/code&gt; and inside of it we should have a mux folder with the latest version. So, the &lt;code&gt;go get&lt;/code&gt; command is used to download and install a package along with its all dependencies.&lt;/p&gt;&lt;h3 id="set-up-a-project-for-using-a-package"&gt;Set up a project for using a package&lt;/h3&gt;&lt;p&gt;Now, we have got the package so we can import it from anywhere in our go environment. &lt;/p&gt;&lt;h4 id="create-a-new-folder-any-name"&gt;Create a new folder (any name)&lt;/h4&gt;&lt;p&gt;You can test a go package from a isolated environment from the GOPATH by creating using the mod command. The &lt;code&gt;mod init&lt;/code&gt; command is a official way to create modules in golang and it creates kind of a environment to work on a templated project and structure the project/module/package properly. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go mod init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="install-the-packages"&gt;Install the packages&lt;/h4&gt;&lt;p&gt;We have already installed the package but that was a global install in the GOPATH, so we need to install it in this module. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go get github.com/gorilla/mux&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="use-the-package"&gt;Use the package&lt;/h4&gt;&lt;p&gt;Now, we can move into actually using the package in our source go file. We won't do any thing complicated just a simple web server. It's too easy don't worry!&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/gorilla/mux&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Mux!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We firstly setup a router(a pair of HTTP route with some logic) from the &lt;a href="https://pkg.go.dev/github.com/gorilla/mux#NewRouter"&gt;NewRouter&lt;/a&gt; function provided by &lt;code&gt;mux&lt;/code&gt;. We'll attach a function to this newly created router by pairing a URL with a function. So, in simple terms when the mentioned URL is visited or a GET request is sent(don't get into too much details) we want a function to be invoked or called which does something. Finally we will set up a web server that listens at a port with the created router.&lt;/p&gt;&lt;p&gt;The final piece is the function which we will call when the URL is visited i.e. the &lt;code&gt;Server&lt;/code&gt; function it can be any name. The function needs to have two arguments as it is invoked by a router, the writer and the request. The Writer is a Response writer i.e. to write the message to the server. We will simply use the &lt;a href="https://pkg.go.dev/net/http#Header.Write"&gt;Write&lt;/a&gt; function to simply print a array of bytes. &lt;/p&gt;&lt;p&gt;The type of the writer is specifically &lt;code&gt;http.ResponseWriter&lt;/code&gt; as we want to write a simple HTTP response header. Also the request is a &lt;a href="https://pkg.go.dev/net/http#Request"&gt;http.Request&lt;/a&gt; type as we simply accept a HTTP request.&lt;/p&gt;&lt;p&gt;So, on running the following script, we will be able to see a simple HTTP response on the localhost at port &lt;code&gt;8000&lt;/code&gt; or on your provided port.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go run main.go&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="GO Gorilla MUX web server" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1650645111/blog-media/gzje6ukyystp2x27u83o.png" /&gt;&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, we were able to dive a bit deeper in golang packages and modules. We covered from installation to importing packages in Golang, we also touched on basics of initializing a module in Golang. Hopefully, we were able to get the basics covered when it comes to packages in Golang.&lt;/p&gt;&lt;p&gt;Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-input'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: Input&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-window-splits'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Window Splits&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-packages</guid><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Math Package</title><link>https://mr-destructive.github.io/techstructive-blog/golang-math</link><description>Exploring various functions in the Math package in the Golang standard Library</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Moving on in the 100 days of golang series, we can take a look into the math package in golang's standard library. In programming, math is quite critical aspect, we need to perform certain mathematical operations quite regularly so golang's standard library has a package for serving some quite commonly used math functions and procedures. We'll take a look at some of the basic and common functions which are available in the math package.&lt;/p&gt;&lt;h2 id="mathematical-constants"&gt;Mathematical Constants&lt;/h2&gt;&lt;p&gt;We have some constants like &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;Phi&lt;/code&gt; already defined as constants in the math package of the standard library in golang. They have a precision till 15 digits stored in float64 values. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pi = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;E = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Phi = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Phi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sqrt of 2 = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sqrt2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Naturla Log 2 = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ln2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Naturla Log 10 = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ln10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/constants.goPi =  3.141592653589793E =  2.718281828459045Phi =  1.618033988749895Sqrt of 2 =  1.4142135623730951Naturla Log 2 =  0.6931471805599453Naturla Log 10 =  2.302585092994046&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use these constants in trigonometric calculations and also in scientific computing. Further, you can get a list of all constants defined in the math package of the go standard library from the &lt;a href="https://pkg.go.dev/math#pkg-constants"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="basic-math-functions"&gt;Basic Math functions&lt;/h2&gt;&lt;p&gt;We have some quite basic and fundamental functions in the math package that can be used commonly in many programs. Let's take a look at a few of them.&lt;/p&gt;&lt;h3 id="-abs-parameters-float64-returns-float64"&gt;- Abs :parameters (float64) , returns float64&lt;/h3&gt;&lt;p&gt;As the name suggest, the &lt;a href="https://pkg.go.dev/math#Abs"&gt;Abs&lt;/a&gt; it returns the absolute result of a numbers. It takes a parameter as a float64 value and returns the absolute value of the provided number as a &lt;code&gt;float64&lt;/code&gt; number.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;absolute_diff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;absolute_diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/main.go-5555&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As, we can see the &lt;code&gt;Abs&lt;/code&gt; function takes in a float64 value and returns a absolute value of the given number that too a &lt;code&gt;float64&lt;/code&gt; value. We need to cast the numbers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; into &lt;code&gt;float64&lt;/code&gt; as we have not provided the initial values and so the compiler has assigned the type to them as &lt;code&gt;int&lt;/code&gt;. &lt;/p&gt;&lt;h4 id="type-casting"&gt;Type Casting&lt;/h4&gt;&lt;p&gt;We can caste a type into other by using the variable around the type name as &lt;code&gt;type_name(variable)&lt;/code&gt;. In the above example we have converted the &lt;code&gt;int&lt;/code&gt; value &lt;code&gt;45&lt;/code&gt; into a &lt;code&gt;float64&lt;/code&gt; as &lt;code&gt;float64(45)&lt;/code&gt; which again yields &lt;code&gt;45&lt;/code&gt; but as a float64 type. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Type of foo = %T \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;String Cast: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Float Cast: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Though not every type cannot be casted into due to quite oblivious reasons, for instance &lt;code&gt;77&lt;/code&gt; or any other integer value (except for 0 or 1) cannot be converted into boolean value.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Hello Gopher! Just a small note, the math package almost deals with float64 types rather than int to avoid backwards compatibility to perform operations on floating point values which can be casted into integers rather than defining separate functions for decimal values and integers.&lt;/strong&gt;&lt;/p&gt;&lt;h3 id="-minmax-parametersfloat64-returns-float64"&gt;- Min/Max: parameters(float64) , returns float64&lt;/h3&gt;&lt;p&gt;We can get the &lt;a href="https://pkg.go.dev/math#Min"&gt;minimum&lt;/a&gt; and &lt;a href="https://pkg.go.dev/math#Max"&gt;maximum&lt;/a&gt; value of the two numbers provided to the function.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;minimum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;maximum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Min of %v and %v is %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Max of %v and %v is %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/main.goMin of 120 and 54 is 54Max of 120 and 54 is 120&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="-pow-parametersfloat64-float64-returns-float64"&gt;- Pow  : parameters(float64, float64) , returns float64&lt;/h3&gt;&lt;h3 id="-pow10-parametersint-returns-float64"&gt;- Pow10: parameters(int)              , returns float64&lt;/h3&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/math#Pow"&gt;Pow&lt;/a&gt; function is used to get the exponential result of the base number. So, if we provide the values x and y, we would get the result as the number x raised to y. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;z10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pow10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X ^ Y = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10 ^ X = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/main.goX ^ Y =  8110 ^ X =  1000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also have the &lt;a href="https://pkg.go.dev/math#Pow10"&gt;Pow10&lt;/a&gt; function which works just like the pow function except the x value is 10 and we don't have to provide it, there is just one parameter as a integer which returns a float64 value.&lt;/p&gt;&lt;h3 id="-sqrt-parametersfloat64-returns-float64"&gt;- Sqrt: parameters(float64) , returns float64&lt;/h3&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/math#Sqrt"&gt;Sqrt&lt;/a&gt; function as the name suggest, it is used to get the square root value of a floating point value which returns a float64 value.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;sqrt_of_k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;cbrt_of_k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Cbrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Square root of %v = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sqrt_of_k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cube root of %v = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cbrt_of_k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/main.goSquare root of 125 = 11.180339887498949Cube root of 125 = 5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="-trunc-parametersfloat64-returns-float64"&gt;- Trunc: parameters(float64) , returns float64&lt;/h3&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/math#Trunc"&gt;Truncate&lt;/a&gt; function provides the way to round off a decimal value(float64) to an integer but it returns a value in &lt;code&gt;float64&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;445.235&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;trunc_p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Truncated value of %v = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;trunc_p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;123.678&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;trunc_p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Truncated value of %v = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;trunc_p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/main.goTruncated value of 445.235 = 445Truncated value of 123.678 = 123&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="-ceil-parametersfloat64-returns-float64"&gt;- Ceil : parameters(float64) , returns float64&lt;/h3&gt;&lt;p&gt;We also can use the &lt;a href="https://pkg.go.dev/math#Ceil"&gt;Ceil&lt;/a&gt; function to roud up the value to the next integer value but the value is returned as &lt;code&gt;float64&lt;/code&gt;. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;33.25&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;ceil_c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ceiled value of %v = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ceil_c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;134.78&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;ceil_c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ceiled value of %v = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ceil_c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/main.goCeiled value of 33.25 = 34Ceiled value of 134.78 = 135&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="-trigonometric-functions"&gt;- Trigonometric Functions&lt;/h3&gt;&lt;p&gt;Trigonometric functions are quite helpful that can help in intense mathematical computations in backend projects or precision dependent projects. We have functions &lt;a href="https://pkg.go.dev/math#Sin"&gt;Sin&lt;/a&gt;, &lt;a href="https://pkg.go.dev/math#Cos"&gt;Cos&lt;/a&gt;, &lt;a href="https://pkg.go.dev/math#Sincos"&gt;SinCos&lt;/a&gt;, &lt;a href="https://pkg.go.dev/math#Tan"&gt;Tan&lt;/a&gt;, hyperbolic functions in Trigonometric functions like &lt;a href="https://pkg.go.dev/math#Sinh"&gt;Sinh&lt;/a&gt;, &lt;a href="https://pkg.go.dev/math#Cosh"&gt;Cosh&lt;/a&gt;, &lt;a href="https://pkg.go.dev/math#Tanh"&gt;Tanh&lt;/a&gt;, and Inverse Trigonometric functions like &lt;a href="https://pkg.go.dev/math#Asin"&gt;Asin&lt;/a&gt;, &lt;a href="https://pkg.go.dev/math#Asinh"&gt;Asinh&lt;/a&gt;, etc. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Sin: parameters(float64) , returns float64&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// basic trigonometric functions&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sinx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;cosx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tanx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sin(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sinx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cos(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cosx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tan(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tanx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// hyperbolic trigonometric functions&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sinh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sinh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;cosh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Cosh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tanh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tanh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sinh(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sinh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cosh(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cosh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tanh(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tanh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Inverse Trigonometric functions&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;arc_sin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Asin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// -pi/2 radians or 90 degrees&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;arc_cos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Acos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// pi randians or 180 degrees&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;arc_tan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Atan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sin^-1(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arc_sin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cos^-1(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arc_cos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tan^-1(%v) = %v \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arc_tan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/trignometric.goSin(1.5707963267948966) = 1Cos(1.5707963267948966) = 6.123233995736757e-17Tan(1.5707963267948966) = 1.6331239353195392e+16Sinh(1.5707963267948966) = 2.3012989023072947Cosh(1.5707963267948966) = 2.5091784786580567Tanh(1.5707963267948966) = 0.9171523356672744Sin^-1(-1) = -1.5707963267948966Cos^-1(-1) = 3.141592653589793Tan^-1(-1) = -0.7853981633974483&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we can see that the functions are working fine and giving a decently precise value. This might be enough for simple and smaller projects, though for higher precision and accuracy areas, other computations and programming is required to compute the values.&lt;/p&gt;&lt;h3 id="-exponential-and-logarithmic-functions"&gt;- Exponential and Logarithmic Functions&lt;/h3&gt;&lt;p&gt;We also have the exponential and logarithmic functions defined in the math package to leverage computations realted to formulae that deal with logarithmic or exponential calculations. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Exp  : parameters(flaot64) , returns float64&lt;/li&gt;&lt;li&gt;Exp2 : parameters(flaot64) , returns float64&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// exponential function&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;e^x = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exp2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2^n = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Logarithmic function&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;natural log x = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Log2 of 100 = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/expo_log.goe^x =  7.389056098930652^n =  11.31370849898476natural log x =  0.6931471805599453Log2 of 100 =  7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we have exponential functions such as &lt;code&gt;e^x&lt;/code&gt; and &lt;code&gt;2^n&lt;/code&gt; which might be useful in some common programming calculations. Also the logarithmic functions like &lt;code&gt;log x&lt;/code&gt; which is natural log of x(base e), and &lt;code&gt;log2 n&lt;/code&gt; which is logn to the base 2.&lt;/p&gt;&lt;h2 id="the-random-package"&gt;The Random package&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;random&lt;/code&gt; sub-package in golang provides some great tools for working with random numbers and generating them. It provides exhaustive list of functions and types that help in generating pseudo random numbers. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Int : parameters() , returns int&lt;/li&gt;&lt;li&gt;Intn : parameters( int ) , returns int&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// random integer generation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// random number generation till range&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/rand.go557700679194777941077918&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, we have used the &lt;a href="https://pkg.go.dev/math/rand@go1.18.1#Int"&gt;Int&lt;/a&gt; function in the random sub-package of the math package which generates a pseudo random integer of the range dependent on the system architecture generally &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;int64&lt;/code&gt;. We get a huge number which is pseudo random i.e. not truly random. If you try to execute the program a couple of time, you would notice the number remains the same and we are calling it random? Well we need to dive into random numbers and seeding for a different part of the series for sure. &lt;/p&gt;&lt;p&gt;The &lt;a href="https://pkg.go.dev/math/rand@go1.18.1#Intn"&gt;Intn&lt;/a&gt; function also generates a pseudo random number but this time, we define the range of the upper boundary to generate them. It is not inclusive of the number provided i.e. we have provide the value &lt;code&gt;10&lt;/code&gt; so the number &lt;code&gt;10&lt;/code&gt; is not included in the range. It's called half open interval. It starts from 0 so the range becomes mathematically &lt;code&gt;[0, n)&lt;/code&gt; if n is the number provided to the Intn function. &lt;/p&gt;&lt;h2 id="the-bits-package"&gt;The Bits package&lt;/h2&gt;&lt;p&gt;We also have a bit sub-package in the math package of the go standard library. This sub package is used for working around with bit manipulation and operations at the binary level. This is quite helpful in competitive programming , also in understanding the basics of data structures and fundamentals in computer science.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Add       : parameters(uint, uint, uint) , returns uint, uint &lt;/li&gt;&lt;li&gt;Len       : parameters(uint) , returns int&lt;/li&gt;&lt;li&gt;OnesCount : parameters(uint) , returns int&lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math/bits&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sum = %d \nCarry = %d \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// (45) in decimal = (1 0 1 1 0 1) in binary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ones_in_45&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnesCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Minimum bits required to represent 45 = %d \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Set Bits in 45 = %d \n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ones_in_45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/bit.goSum = 10Carry = 0Minimum bits required to represent 45 = 6Set Bits in 45 = 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, in the above example, we have used the bits sub pacakge in the math package, the &lt;a href="https://pkg.go.dev/math/bits@go1.18.1#Add"&gt;Add&lt;/a&gt; function allows us to provide the two numbers and a carry bit on which it returns two values the sum and the carry. The sum is defined as the summation of &lt;code&gt;x + y + carry&lt;/code&gt; the two numbers and the carry bit. The carry bit needs to be either 0 or 1. &lt;/p&gt;&lt;p&gt;Also the value provided the function i.e. &lt;code&gt;x and y&lt;/code&gt; need to be unsigned &lt;code&gt;uint&lt;/code&gt; iorder to work with bits. &lt;/p&gt;&lt;p&gt;We also have the &lt;a href="https://pkg.go.dev/math/bits@go1.18.1#Len"&gt;Len&lt;/a&gt; function which returns the maximum number of bits required to represent the provided unsigned integer. We have used 45 which is equivalent to &lt;code&gt;10110&lt;/code&gt; and hence the function returns &lt;code&gt;6&lt;/code&gt; as teh number of bits. The &lt;a href="https://pkg.go.dev/math/bits@go1.18.1#OnesCount"&gt;OnesCount&lt;/a&gt; Function is also similar but it returns the number of set bits(the &lt;code&gt;1&lt;/code&gt; bit) in the number provided to it. &lt;/p&gt;&lt;p&gt;We'll see this sub package in a separate section of its own. Bits is really a great pacakge to work with bits and low level manipulation of numbers in Golang.&lt;/p&gt;&lt;h2 id="the-complex-package"&gt;The Complex package&lt;/h2&gt;&lt;p&gt;The complex subpackage is really specific to the operation to the complex numbers and its operations. Using complex numbers with basic operations and trigonometric functions are provided in the package. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;math/cmplx&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mod_x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mod_y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;conj_x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Conj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;phase_x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;phase&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmplx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Polar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Modulus of x = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Modulus of y = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod_y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Conjugate of x = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;conj_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Phase of x = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;phase_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Polar Form : %v, %v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run basic-functions/complex.gox =  (5+8i)Modulus of x =  9.433981132056603Modulus of y =  5Conjugate of x =  (5-8i)Phase of x =  1.0121970114513341Polar Form : 9.433981132056603, 1.0121970114513341&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have used the complex function to create complex numbers. The &lt;code&gt;cmplx&lt;/code&gt; subpackage in the math package provides many functions to play with trignometric and simple operations with complex numbers. The &lt;a href="https://pkg.go.dev/math/cmplx@go1.18.1#Abs"&gt;Abs&lt;/a&gt; function is used to get the modulus of the provided complex number. The modulus is calculated with &lt;code&gt;sqrt(x^2 + y^2)&lt;/code&gt;, this gives the magnitude of the complex number. Here, we get the modulus as &lt;code&gt;9.43&lt;/code&gt; as &lt;code&gt;sqrt(25 + 64)&lt;/code&gt; for the complex number &lt;code&gt;5+8i&lt;/code&gt;. Also, for &lt;code&gt;3+4i&lt;/code&gt; the modulus becomes &lt;code&gt;sqrt(9+16)&lt;/code&gt; which turns out to be &lt;code&gt;5&lt;/code&gt;. The &lt;a href="https://pkg.go.dev/math/cmplx@go1.18.1#Conj"&gt;Conjugate&lt;/a&gt; function is used to get the conjugate of the provided complex number. &lt;/p&gt;&lt;p&gt;Also the phase or the Argument of the complex number can be obtained with the &lt;a href="https://pkg.go.dev/math/cmplx@go1.18.1#Phase"&gt;Phase&lt;/a&gt; function. The phase is caluculated by the formula &lt;code&gt;tan^-1 (y/x)&lt;/code&gt; but the angle is returned in randians. So for &lt;code&gt;x = 5+8i&lt;/code&gt; the argument/Phase becomes &lt;code&gt;tan^-1( 8/5)&lt;/code&gt; which is &lt;code&gt;57.995 degrees&lt;/code&gt; or &lt;code&gt;1.012 radians&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;We have the &lt;a href="https://pkg.go.dev/math/cmplx@go1.18.1#Polar"&gt;Polar&lt;/a&gt; function which gives the polar form of the complex number i.e. &lt;code&gt;(modulus r, phase theta)&lt;/code&gt; So this function returns two values the modulus and the argument/phase of the complex number. We have already calcualted both the values but this functions gets both of them in a single function. Quite neat, we can even ignore one value after the return of the function by using the ignore operator &lt;code&gt;_, phase := cmplx.Polar(5+7i)&lt;/code&gt; to only care and get the phase/argument of the complex number or &lt;code&gt;modulus, _ := cmplx.Polar(5+7i)&lt;/code&gt; to get the modulus from the complex number.&lt;/p&gt;&lt;p&gt;So that's some basic operations on complex numbers, this might have very few use cases but it's still quite useful when needed. &lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So from this section we were able to get a bit deeper introduction to the &lt;code&gt;math&lt;/code&gt; package in golang's standard library. We covered some few important functions and constants in the main math package along with the glimpse of other subpackages like &lt;code&gt;rand&lt;/code&gt;, &lt;code&gt;cmplx&lt;/code&gt; and &lt;code&gt;bits&lt;/code&gt;. We didn't get too much in detail with those sub packages as they can be explored on a separate section of their own. Hopefully, you have got a godd overview of the math package in golang which again is really important aspect in programming.&lt;/p&gt;&lt;p&gt;Thank you for reading. If you have any questions or feedback, please let me know in the comments or on social handles. Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/oop-cpp-p2'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Object-Oriented Programming in C++: Access Modifiers&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/django-database-conf'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Django Basics: Database Configurations&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-math</guid><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate></item><item><title>Golang: Operators</title><link>https://mr-destructive.github.io/techstructive-blog/golang-operators</link><description>Understanding the basics of operators like arithmetic, logical, bitwise, assignment operators in Golang</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;In this 13th part of the series, we will be exploring the fundamentals of operators in Golang. We will be exploring the basics of operators and the various types like Arithmetic, Bitwise, Comparison, Assignment operators in Golang.&lt;/p&gt;&lt;p&gt;Operators are quite fundamentals in any programming language. Operators are basically expressions or a set of character(s) to perform certain fundamental tasks. They allow us to perform certain trivial operations with a simple expression or character. There are quite a few operators in Golang to perform various operations.&lt;/p&gt;&lt;h2 id="types-of-operators"&gt;Types of Operators&lt;/h2&gt;&lt;p&gt;Golang has a few types of operators, each type providing particular aspect of forming expressions and evaluate conditions.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bitwise Operators&lt;/li&gt;&lt;li&gt;Logical Operators&lt;/li&gt;&lt;li&gt;Arithmetic Operators&lt;/li&gt;&lt;li&gt;Assignment Operators&lt;/li&gt;&lt;li&gt;Comparison Operators&lt;/li&gt;&lt;/ol&gt;&lt;h3 id="bitwise-operators"&gt;Bitwise Operators&lt;/h3&gt;&lt;p&gt;Bitwise Operators are used in performing operations on binary numbers. We can perform operation on a bit level and hence they are known as bitwise operators. Some fundamental bitwise operators include, &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt;, and &lt;code&gt;EXOR&lt;/code&gt;. Using this operators, the bits in the operands can be manipulated and certain logical operations can be performed. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 3 -&amp;gt; 011&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 5 -&amp;gt; 101&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X AND Y = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X OR Y = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X EXOR Y = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X Right Shift 1  = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;X Right Shift 2  = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Y Left Shift 1 = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run bitwise/main.goX AND Y =  1X OR Y =  7X EXOR Y =  6X Right Shift 1  =  1X Right Shift 2  =  0Y Left Shift 1 =  10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the &lt;code&gt;&amp;amp;&lt;/code&gt; (AND operator) for performing AND operations on two operands. Here we are logically ANDing &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; i.e. &lt;code&gt;011&lt;/code&gt; with &lt;code&gt;101&lt;/code&gt; so it becomes &lt;code&gt;001&lt;/code&gt; in binary or 1 in decimal.&lt;/p&gt;&lt;p&gt;Also, the &lt;code&gt;|&lt;/code&gt; (OR operator) for performing logical OR operation on two operands. Here we are logically ORing &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; i.e. &lt;code&gt;011&lt;/code&gt; with &lt;code&gt;101&lt;/code&gt; so it becomes &lt;code&gt;111&lt;/code&gt; in binary or 7 in decimal.&lt;/p&gt;&lt;p&gt;Also the &lt;code&gt;^&lt;/code&gt; (EXOR operator) for performing logical EXOR operation on two operands. Here we are logically EXORing &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; i.e. &lt;code&gt;011&lt;/code&gt; with &lt;code&gt;101&lt;/code&gt; so it becomes &lt;code&gt;110&lt;/code&gt; in binary or 6 in decimal.&lt;/p&gt;&lt;p&gt;We have a couple of more bitwise operators that allow us to shift bits in the binary representation of the number. We have two types of these shift operators, right sift and left shift operators. The main function of these operator is to shift a bit in either right or left direction. &lt;/p&gt;&lt;p&gt;In the above example, we have shifted &lt;code&gt;3&lt;/code&gt; i.e. &lt;code&gt;011&lt;/code&gt; to right by one bit so it becomes &lt;code&gt;001&lt;/code&gt;. If we would have given &lt;code&gt;x &amp;gt;&amp;gt; 2&lt;/code&gt; it would have become &lt;code&gt;0&lt;/code&gt; since the last bit was shifted to right and hence all bits were 0.&lt;/p&gt;&lt;p&gt;Similarly, the left shift operator sifts the bits in the binary representation of the number to the left. So, in the example above, &lt;code&gt;5&lt;/code&gt; i.e. &lt;code&gt;101&lt;/code&gt; is shifted left by one bit so it becomes &lt;code&gt;1010&lt;/code&gt; in binary i.e. 10 in decimal. &lt;/p&gt;&lt;p&gt;This was a basic overview of bitwise operators in Golang. We can use these basic operators to perform low level operations on numbers.&lt;/p&gt;&lt;h3 id="comparison-operators"&gt;Comparison Operators&lt;/h3&gt;&lt;p&gt;This type of operators are quite important and widely used as they form the fundamentals of comparison of variables and forming boolean expressions. The comparison operator is used to compare two values or expressions. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is A equal to B ? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is A not equal to B ? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is A greater than B ? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is A less than B ? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is A greater than or equal to B ? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is A less than or equal to B ? &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run comparison/main.goIs A equal to B ?  falseIs A not equal to B ?  trueIs A greater than B ?  trueIs A less than B ?  falseIs A greater than or equal to B ?  trueIs A less than or equal to B ?  false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use simple comparison operators like &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; for comparing if two values are equal or not. The expression &lt;code&gt;a == b&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; if the values of both variables or operands are equal. However, the expression &lt;code&gt;a != b&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; if the values of both variables or operands are not equal.&lt;/p&gt;&lt;p&gt;Similarly, we have the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators which allow us to evaluate expression by comparing if the values are less than or grater than the other operand. So, the expression &lt;code&gt;a &amp;gt; b&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; if the value of &lt;code&gt;a&lt;/code&gt; is greater than the value of &lt;code&gt;b&lt;/code&gt;. Also the expression &lt;code&gt;a &amp;lt; b&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; if the value of &lt;code&gt;a&lt;/code&gt; is less than the value of &lt;code&gt;b&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;Finally, the operators &lt;code&gt;&amp;lt;=&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; allow us to evaluate expression by comparing if the values are less than or equal to and greater than or equal to the other operand. So, the expression &lt;code&gt;a &amp;gt;= b&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; if the value of &lt;code&gt;a&lt;/code&gt; is greater than or if it is equal to the value of &lt;code&gt;b&lt;/code&gt;, else it would evaluate to &lt;code&gt;false&lt;/code&gt;. Similarly, the expression &lt;code&gt;a &amp;lt;= b&lt;/code&gt; will evaluate to &lt;code&gt;true&lt;/code&gt; if the value of &lt;code&gt;a&lt;/code&gt; is less than or if it is equal to the value of &lt;code&gt;b&lt;/code&gt;, else it would evaluate to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;These was a basic overview of comparison operators in golang.&lt;/p&gt;&lt;h3 id="logical-operators"&gt;Logical Operators&lt;/h3&gt;&lt;p&gt;Next, we move on to the logical operators in Golang which allow to perform logical operations like &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, and &lt;code&gt;NOT&lt;/code&gt; with conditional statements or storing boolean expressions. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run logical/main.gotruefalsetruefalsetrue&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we have used logical operators like &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; for Logical AND, &lt;code&gt;||&lt;/code&gt; for logical OR, and &lt;code&gt;!&lt;/code&gt; for complementing the evaluated result. The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operation only evaluates to &lt;code&gt;true&lt;/code&gt; if both the expressions are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; OR operator evaluates to &lt;code&gt;true&lt;/code&gt; if either or both the expressions are &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;!&lt;/code&gt; operator is used to complement the evaluated expression from the preceding parenthesis.&lt;/p&gt;&lt;h3 id="arithmetic-operators"&gt;Arithmetic Operators&lt;/h3&gt;&lt;p&gt;Arithmetic operators are used for performing Arithmetic operations. We have few basic arithmetic operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;%&lt;/code&gt; for adding, subtracting, multiplication, division, and modulus operation in golang. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A + B = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A - B = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A * B = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A / B = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A % B = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run arithmetic/main.goA + B =  80A - B =  -20A * B =  1500A / B =  0A % B =  30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These are the basic mathematical operators in any programming language. We can use &lt;code&gt;+&lt;/code&gt; to add two values, &lt;code&gt;-&lt;/code&gt; to subtract two values, &lt;code&gt;*&lt;/code&gt; to multiply to values, &lt;code&gt;/&lt;/code&gt; for division of two values and finally &lt;code&gt;%&lt;/code&gt; to get the remainder of a division of two values i.e. if we divide 30 by 50, the remainder is 30 and the quotient is 0. &lt;/p&gt;&lt;p&gt;We also have a few other operators like &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; that help in incrementing and decrementing values by a unit value. Let's say we have a variable &lt;code&gt;k&lt;/code&gt; which is set to &lt;code&gt;4&lt;/code&gt; and we want to increment it by one, so we can definitely use &lt;code&gt;k = k + 1&lt;/code&gt; but it looks kind of too long, we have a short notation for the same &lt;code&gt;k++&lt;/code&gt; to do the same.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;j = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;k = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;j = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run arithmetic/main.gok =  3j =  20k =  4j =  19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we can see that the variable &lt;code&gt;k&lt;/code&gt; is incremented by one and variable &lt;code&gt;j&lt;/code&gt; is decremented by &lt;code&gt;1&lt;/code&gt; using the &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; operator.&lt;/p&gt;&lt;h3 id="assignment-operators"&gt;Assignment Operators&lt;/h3&gt;&lt;p&gt;These types of operators are quite handy and can condense down large operations into simple expressions. These types of operators allow us to perform operation on the same operand. Let's say we have the variable &lt;code&gt;k&lt;/code&gt; set to &lt;code&gt;20&lt;/code&gt; initially, we want to add &lt;code&gt;30&lt;/code&gt; to the variable &lt;code&gt;k&lt;/code&gt;, we can do that by using &lt;code&gt;k = k + 30&lt;/code&gt; but a more sophisticated way would be to use &lt;code&gt;k += 30&lt;/code&gt; which adds &lt;code&gt;30&lt;/code&gt; or any value provided the same variable assigned and operated on.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ go run assignment/main.goa =  100b =  20a =  130b =  15a =  1950b =  15a =  130b =  15a =  10b =  15&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From the above example, we are able to perform operations by using shorthand notations like &lt;code&gt;+=&lt;/code&gt; to add the value to the same operand. These also saves a bit of time and memory not much but considerable enough. This allow us to directly access and modify the contents of the provided operand in the register rather than assigning different registers and performing the operations.&lt;/p&gt;&lt;p&gt;That's it from this part. Reference for all the code examples and commands can be found in the &lt;a href="https://github.com/mr-destructive/100-days-of-golang/"&gt;100 days of Golang&lt;/a&gt; GitHub repository.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, from the following part of the series, we were able to learn the basics of operators in golang. Using some simple and easy to understand examples, we were able to explore different types of operators like arithmetic, logical, assignment and bitwise operators in golang. These are quite fundamental in programming in general, this lays a good foundation for working with larger and complex projects that deal with any kind of logic in it, without a doubt almost all of the applications do have a bit of logic attached to it. So, we need to know the basics of operators in golang.&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/pipenv-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Pipenv: Python's Official Package Management tool&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-registers'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Registers&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/golang-operators</guid><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate></item><item><title>Django + PostgreSQL Deployment on Heroku</title><link>https://mr-destructive.github.io/techstructive-blog/django-deploy-heroku</link><description>Django projects are quite easy to build and simple to understand, you might have created a Django application and wanted to show it to the world? You can deploy</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Django projects are quite easy to build and simple to understand, you might have created a Django application and wanted to show it to the world? You can deploy a basic Django application with a database(PostgreSQL) with Heroku. It provides a decent free tier with some great features and add-ons. A free tier Heroku account has a limitation of 5 apps, limited data in the database, limited connections to the server per month, and so on.  &lt;/p&gt;&lt;p&gt;Though the free tier is not a great option for bigger applications, it suits really well for smaller scale and ide projects, so we will be looking into the details of how to deploy a Django application to &lt;a href="https://heroku.com/"&gt;Heroku&lt;/a&gt; which is a Platform as Service (PaS). &lt;/p&gt;&lt;p&gt;This series will be an extension of the series &lt;a href="https://techstructiveblog.hashnode.dev/series/django-basics"&gt;Django basics&lt;/a&gt; which covered the basics of the Django framework, we covered from basic Django fundamentals to building a CRUD API. In this series, we will be exploring some platforms for giving a better understanding of how things work and understanding a few components that were left as default while understanding the basics of Django. Let's get started with &lt;a href="https://techstructiveblog.hashnode.dev/series/django-deployment"&gt;Django Deployment&lt;/a&gt;!&lt;/p&gt;&lt;h2 id="creating-a-django-application"&gt;Creating a Django Application&lt;/h2&gt;&lt;p&gt;For deploying an app, we definitely need an app, we need to create a basic Django application to deploy on the web. We'll be creating a simple blog application with a couple of views and a simple model structure. As for the database, we'll be using Postgres as Heroku has an add-on for it and it is pretty easy to configure. &lt;/p&gt;&lt;h3 id="set-up-a-virtual-environment"&gt;Set up a virtual environment&lt;/h3&gt;&lt;p&gt;We need to set up a virtual environment in order to keep the Django project neat and tidy by managing the project-specific dependencies and packages. We can use the &lt;a href="https://pypi.org/project/virtualenv/"&gt;virtualenv&lt;/a&gt; package to isolate a python project from the rest of the system.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# install the virtualenv packagepip install virtualenv# create a virtual env for the projectvirtualenv .venv# activate the virtualenvWindows:.venv\Scripts\activateLinux/macOS:source .venv/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will set up the project nicely for a Django project, you now install the core Django package and get started with creating a Django application.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# install django&lt;/span&gt;pip install django&lt;span class="c1"&gt;# start a django project&lt;/span&gt;django-admin startproject blog .&lt;span class="nb"&gt;cd&lt;/span&gt; blog&lt;span class="c1"&gt;# create a application in django project&lt;/span&gt;python manage.py createapp api&lt;span class="c1"&gt;# Create some models, views, URLs, templates&lt;/span&gt;&lt;span class="c1"&gt;# run the server&lt;/span&gt;python manag.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We assume you already have a Django project configured with some basic URLs, views and templates or static files as per your project and requirements, for this tutorial I will be using the simple blog application from my previous Django tutorials as a reference. You can follow along with my &lt;a href="https://techstructiveblog.hashnode.dev/series/django-basics"&gt;Django Basics&lt;/a&gt; series and refer to the Blog Application project on &lt;a href="https://github.com/Mr-Destructive/django-blog"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="configuring-the-django-application"&gt;Configuring the Django Application&lt;/h2&gt;&lt;p&gt;Make sure to create and activate the virtual environment for this django project. This should be done to manage the dependencies and packages used in the project. If you are not aware of the virtual environment and django setup, you can follow up with this &lt;a href="https://mr-destructive.github.io/techstructive-blog/django-setup-script/"&gt;post&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="creating-a-runtimetxt-file"&gt;Creating a runtime.txt file&lt;/h3&gt;&lt;p&gt;Now, Firstly we need to specify which type and version of language we are using. Since Django is a Python-based web framework, we need to select the python version in a text file.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;runtime.txt&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python-3.9.5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Here, the version can be anything as per your project and the packages installed.  &lt;/p&gt;&lt;h3 id="creating-requirementstxt-file"&gt;Creating requirements.txt file&lt;/h3&gt;&lt;p&gt;We'll first create a &lt;code&gt;requirements.txt&lt;/code&gt; file for storing all the dependencies and packages installed in the application. This will help in installing dependencies while deploying the application. We can either use a &lt;code&gt;requirements.txt&lt;/code&gt; file using &lt;code&gt;virtualenv&lt;/code&gt; or a &lt;code&gt;Pipfile&lt;/code&gt; using Pipenv. Both serve the same purpose but a bit differently. &lt;/p&gt;&lt;p&gt;Assuming you are in an isolated virtual environment for this Django project, you can create a requirements.txt file using the below command:&lt;/p&gt;&lt;p&gt;Make sure the virtualenv is activated before running the command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a simple text file that contains the package names along with the versions used in the current virtual environment. A simple Django requirements file would look something like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;asgiref==3.4.1Django==3.2.11pytz==2021.3sqlparse==0.4.2typing_extensions==4.0.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614060461/kPTZ9R8Xp.png" /&gt;&lt;/p&gt;&lt;p&gt;This is vanilla Django without any additional dependencies but if you have integrated other functionalities like Django Rest Framework, PostgreSQL, Crispy Forms, Schedulers, etc. there might be additional dependencies that become quite crucial for the smooth working of the project.  &lt;/p&gt;&lt;p&gt;If you are using pipenv, you don't need to make any efforts to manually activate and manage virtual environment, the dependencies are installed and taken care of by the pipenv installer. You just need to make sure to install any package with &lt;code&gt;pipenv install&lt;/code&gt; and not &lt;code&gt;pip install&lt;/code&gt; for better and improved package tracking.&lt;/p&gt;&lt;p&gt;So, that's all we need to take care of packages and keep a list of these integrated packages for the project. You need to update the requirements.txt file every time you install any new package or modify the dependencies for a project. Simply use the command &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in the activated virtual environment.  &lt;/p&gt;&lt;h3 id="creating-a-procfile"&gt;Creating a Procfile&lt;/h3&gt;&lt;p&gt;Next up, we have the &lt;code&gt;Procfile&lt;/code&gt;, a procfile is a special file that holds information about the processes to be run to start or activate the project. In our case, for django we need a web process that can manage the server.&lt;/p&gt;&lt;p&gt;A Procfile is a simple file without any extension, make sure to write &lt;code&gt;Procfile&lt;/code&gt; as it is as the name of the file in the root folder of the project. Inside the file add the following contents:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Procfile&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gunicorn&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;project_name&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;.wsgi&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;As we can see we have defined the &lt;code&gt;web&lt;/code&gt; process using &lt;code&gt;gunicorn&lt;/code&gt;, &lt;a href="https://pypi.org/project/gunicorn/"&gt;Gunicorn&lt;/a&gt; is a python package that helps in creating WSGI HTTP Server for the UNIX operating systems. So, we need to install the package and update the package dependency list. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install gunicornpip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That would be good to go for creating and serving up the project while deploying the project on Heroku.&lt;/p&gt;&lt;h2 id="creating-a-heroku-app"&gt;Creating a Heroku App&lt;/h2&gt;&lt;p&gt;A Heroku App is basically like your Django Project, you can create apps for deploying your django projects on Heroku. You are limited to 5 apps on the Free tier but that can be expanded on the paid plans.  &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652456732519/cyOQZ3UZK.png" /&gt;&lt;/p&gt;&lt;p&gt;The name of your heroku app should be unique globally, you need to try a few combinations before a good one fits your project. This name has no significance on your django project code, though it would be the name from which you would access the web application as a name &lt;code&gt;&amp;lt;app-name&amp;gt;.herokuapp.com&lt;/code&gt;.   &lt;/p&gt;&lt;p&gt;So, choose it wisely if you are not attaching a custom domain. You can attach a custom domain, you can navigate to the &lt;code&gt;domain&lt;/code&gt; section in the settings tab. &lt;/p&gt;&lt;h2 id="setting-up-the-database"&gt;Setting up the database&lt;/h2&gt;&lt;p&gt;To set up and configure a database in django on Heroku, we need to manually acquire and attach a PostgreSQL add-on to the heroku app.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Firstly locate to the Resources Tab in your Heroku app.&lt;/li&gt;&lt;li&gt;Search &lt;code&gt;postgres&lt;/code&gt; in the Add-ons Search bar&lt;/li&gt;&lt;li&gt;Click on the &lt;code&gt;Heroku Postgres&lt;/code&gt; Add-on&lt;/li&gt;&lt;li&gt;Submit the Order Form and you have the add-on enabled in the app.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652456842273/ijeWsVdOf.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652456877447/dLG30ac_m.png" /&gt;&lt;/p&gt;&lt;p&gt;Alternately, you can use the Heroku CLI,&lt;/p&gt;&lt;h3 id="heroku-cli-setup"&gt;Heroku CLI Setup&lt;/h3&gt;&lt;p&gt;You can use the Heroku CLI which is a command-line interface for managing and creating Heroku applications.  You need to first install the CLI by heading towards the &lt;a href="https://devcenter.heroku.com/articles/heroku-command-line"&gt;heroku documentation&lt;/a&gt;. Once the CLI is installed, you need to login into your Heroku account by entering the following command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;heroku login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652605604920/HnTr2KbTi.png" /&gt;&lt;/p&gt;&lt;p&gt;This will allow us to work with heroku commands and manage our heroku application from the command line itself. The below command will create a add-on for &lt;code&gt;heroku-postgres&lt;/code&gt; for the application provided as the parameter options &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;heroku addons:create heroku-postgresql:hobby-dev --app &amp;lt;app_name&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652507166978/i1IJ5EGjJ.png" /&gt;&lt;/p&gt;&lt;p&gt;This should hopefully add a fresh instance of a postgres database for your heroku app. You can now configure the database for your project, we simply need the Database URL from the heroku app dashboard. We'll see how to configure the environment variables in Django for Heroku to keep your secrets like the &lt;code&gt;SECRET_KEY&lt;/code&gt;, &lt;code&gt;DATABSE_URL&lt;/code&gt;, etc. &lt;/p&gt;&lt;p&gt;If you want MySQL as a database, you can check out the &lt;a href="https://devcenter.heroku.com/articles/cleardb"&gt;ClearDB&lt;/a&gt; Add-On for Heroku to simply attach it like Postgres on your Heroku application. Also, if you wish to add &lt;a href="https://www.mongodb.com/compatibility/mongodb-and-django"&gt;MongoDB&lt;/a&gt; into your Django application on Heroku, you can use &lt;a href="https://devcenter.heroku.com/articles/ormongo"&gt;Object Rocket&lt;/a&gt;(OR Mongo). It is not available in the free tier though, unlike PostgreSQL and MySQL.&lt;/p&gt;&lt;h2 id="configuring-environment-variables"&gt;Configuring Environment Variables&lt;/h2&gt;&lt;p&gt;We need to keep our secrets for the django project out of the deployed code and in a safe place, we can create environment variables and keep them in a &lt;code&gt;.env&lt;/code&gt; file which will be git-ignored. We do not want this &lt;code&gt;.env&lt;/code&gt; file to be open source and thus should not be committed.  &lt;/p&gt;&lt;p&gt;We first need to create a new secret key if you already have a GitHub repository, chances are you would have committed the default secret key open for the world to see, it is an insecure way of deploying django apps in production.&lt;/p&gt;&lt;p&gt;So, open up a terminal and launch a python REPL:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pythonimport secretssecrets.token_hex(24)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652512239319/5AACaTGOD.png" /&gt;&lt;/p&gt;&lt;p&gt;This should generate a secret key that only you know now. So, just copy the key without the quotes and create a file &lt;code&gt;.env&lt;/code&gt; in the root project folder. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;.env&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SECRET_KEY=76419fd6885a677f802fd1d2b5acd0188e23e001042b05a8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file should also be added to the &lt;code&gt;.gitignore&lt;/code&gt; file, so simply append the following in the &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;This file is only created to test the project locally, so we need to also make this key available on heroku. For doing that we need to add Config Variables to the heroku app. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Locate to the Settings Tab in your Heroku Application Dashboard&lt;/li&gt;&lt;li&gt;We have the &lt;code&gt;Config Vars&lt;/code&gt; section in the located tab= We need to reveal those variables and we will be able to see all the variables.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652456988713/5VM6E29_o.png" /&gt;&lt;/p&gt;&lt;p&gt;We already have a &lt;code&gt;DATABASE_URL&lt;/code&gt; variable declared when we attached the &lt;code&gt;django-postgres&lt;/code&gt; database to our application. We will now add one more variable to the Application, i.e. the &lt;code&gt;SECRET_KEY&lt;/code&gt;. Simply, enter the name of the key and also enter the value of the key, so basically a key-value pair. Simply click on the &lt;code&gt;Add&lt;/code&gt; button and this will add the variable to your application.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652515244870/LRyPzJr41.png" /&gt;&lt;/p&gt;&lt;p&gt;You also need to copy the &lt;code&gt;DATABSE_URL&lt;/code&gt; into our local setup file(&lt;code&gt;.env&lt;/code&gt; file). Copy the Database URL and paste it into the &lt;code&gt;.env&lt;/code&gt; file as follows:&lt;/p&gt;&lt;p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DATABASE_URL=postgres://sjxgipufegmgsw:78cbb568e@ec2-52-4-104-184.compute-1.amazonaws.com:5432/dbmuget&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;The format for the postgres URL is as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;postgresql://[user[:password]@][netloc][:port][/dbname]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have now created environment variables for our django application and also added config vars in the heroku app, we now need a way to parse these environment variables into the Django project.  &lt;/p&gt;&lt;h3 id="parsing-environment-variables-using-python-dotenv"&gt;Parsing Environment variables using python-dotenv&lt;/h3&gt;&lt;p&gt;We will use &lt;a href="https://pypi.org/project/python-dotenv/"&gt;python-dotenv&lt;/a&gt; to parse variables into the django settings configurations like &lt;code&gt;SECRET_KEY&lt;/code&gt; and &lt;code&gt;DATABASES&lt;/code&gt;. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Install &lt;code&gt;python-dotenv&lt;/code&gt; with pip with the command :&lt;br /&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install python-dotenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;We need to then modify the default variables in the &lt;code&gt;settings.py&lt;/code&gt; file. Firstly, we will load in the &lt;code&gt;.env&lt;/code&gt; file for accessing the environment variables for the configuration of the project.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Append the following code, to the top of the &lt;code&gt;settings.py&lt;/code&gt; file, make sure don't override the configuration so remove unnecessary imports and configurations.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# &amp;lt;project_name&amp;gt;/settings.py&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have imported the package &lt;code&gt;dotenv&lt;/code&gt; basically the &lt;code&gt;python-dotenv&lt;/code&gt; into the &lt;code&gt;settings.py&lt;/code&gt; file and the module &lt;code&gt;os&lt;/code&gt; for loading the &lt;code&gt;.env&lt;/code&gt; file. The &lt;code&gt;load_dotenv&lt;/code&gt; function helps in loading the &lt;code&gt;key-value&lt;/code&gt; pairs which are the configuration variables that can act as actual environment variables. We provide in a file to the &lt;a href="https://saurabh-kumar.com/python-dotenv/"&gt;load_dotenv&lt;/a&gt; function which is the &lt;code&gt;.env&lt;/code&gt; file in our case, you can pick up any location for the &lt;code&gt;.env&lt;/code&gt; file but make sure to change the location while parsing the file into the &lt;code&gt;load_dotenv&lt;/code&gt; function. &lt;/p&gt;&lt;p&gt;After loading the variables into the &lt;code&gt;settings.py&lt;/code&gt; file, we now need to access those variables and set the appropriate variables the configuration from the variables received from the &lt;code&gt;load_dotenv&lt;/code&gt; function. The &lt;code&gt;os.getenv&lt;/code&gt; function to access the environment variables. The &lt;code&gt;os.getenv&lt;/code&gt; function takes a parameter as the &lt;code&gt;key&lt;/code&gt; for the environment variable and returns the value of the environment variable.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have secretly configured the &lt;code&gt;SECRET_KEY&lt;/code&gt; for the django project. If you have any other variables as simple key-value pairs like &lt;code&gt;AUTH&lt;/code&gt; passwords, username, etc. you can use this method to get the configuration variables. &lt;/p&gt;&lt;h3 id="loading-database-configuration"&gt;Loading Database configuration&lt;/h3&gt;&lt;p&gt;Databases are a bit different as compared to other simple configurations in django. We need to make a few adjustments to the default database configuration. We will install another package &lt;code&gt;dj-database-url&lt;/code&gt; to configure &lt;code&gt;DATABASE_URL&lt;/code&gt;. Since the databse_url has a few components we need a way to extract the details like the &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;database_name&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt;. Using the &lt;code&gt;dj-database-url&lt;/code&gt; package we have a few functions that can serve the purpose.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install dj-database-url&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the end of your &lt;code&gt;settings.py&lt;/code&gt; file, append the following code. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dj_database_url&lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dj_database_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn_max_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1800&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We would need an adapter for making migrations to the &lt;code&gt;PostgreSQL&lt;/code&gt; database i.e. the &lt;code&gt;psycopg2&lt;/code&gt; package. This is a mandatory step if you are working with &lt;code&gt;postgres&lt;/code&gt; database. This can be installed with the simple pip install:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install psycopg2# If it does not work trypip install psycopg2-binary# if still error persists try installing setuptoolspip install -U setuptoolspip install psycopg2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, that we have configured the database, we can now apply migrations to the fresh database of postgres provided by heroku. We will simply run the migrate command and in the heroku app the PostgreSQL database would have been modified and an appropriate schema should be applied.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652602284553/oTtGev28-.png" /&gt;&lt;/p&gt;&lt;p&gt;Make sure to update the &lt;code&gt;requirements.txt&lt;/code&gt; file before pushing the project to Heroku for making sure everything works as expected. Since we have installed a few additional packages that are directly used in the &lt;code&gt;settings.py&lt;/code&gt; file, we need to run the &lt;code&gt;pip freeze&lt;/code&gt; command to update the &lt;code&gt;requiremnets.txt&lt;/code&gt; file.&lt;/p&gt;&lt;h2 id="serving-static-files"&gt;Serving Static Files&lt;/h2&gt;&lt;p&gt;Now, if you have some static files like &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;Javascript&lt;/code&gt;, or &lt;code&gt;images&lt;/code&gt;, you need to configure the staticfiles in order to serve them from the heroku server. We will require another config variable for collecting the static files from the selected repository. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;staticfiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, if you have served your static files from the &lt;code&gt;static&lt;/code&gt; folder in the root directory of your django project, you can add the above code in the settings.py file. We will collect all static files in the folder along with the default static files provided by django in the &lt;code&gt;staticfiles&lt;/code&gt; directory. Run the following command if you want to test whether the static files are properly collected and served.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py collectstatic &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652600828657/JgL4nLuiL.png" /&gt;&lt;/p&gt;&lt;p&gt;So, this command will collect all the static files and store them in a single place. We see that the files from the admin section are also copied as well as the custom static files from the project configuration. Now, we can move on to set the config variable for the heroku app.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DISABLE_COLLECTSTATIC = 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can set the &lt;code&gt;DISABLE_COLLECTSTATIC&lt;/code&gt; variable as &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; indicating whether to disable it or not. We have currently enabled the static file collection while deploying the app but you can set it to &lt;code&gt;1&lt;/code&gt; to disable the collection of static files.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652613798420/mbqzf1Kqd.png" /&gt;&lt;/p&gt;&lt;p&gt;Since I first tested the application on heroku, the static files don't work as expected, we need another package to make sure the staticfiles are served property. We will be installing the &lt;code&gt;whitenoise&lt;/code&gt; package which serves as the middleware for serving the static files.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install whitenoise&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the whitenoise middleware &lt;code&gt;whitenoise.middleware.WhiteNoiseMiddleware&lt;/code&gt; to the &lt;code&gt;MIDDLEWARE&lt;/code&gt; list in the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;````pythonMIDDLEWARE = [.........    'whitenoise.middleware.WhiteNoiseMiddleware',]&lt;/p&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;That should be enough to make the most of the deployment on heroku. You will have to make a few adjustments as per your requirements and project.&lt;/p&gt;&lt;h2 id="deploy-from-github"&gt;Deploy from GitHub&lt;/h2&gt;&lt;p&gt;We are now all set to deploy the application on Heroku, we can use the &lt;code&gt;Connect to GitHub&lt;/code&gt; or &lt;code&gt;Heroku CLI&lt;/code&gt; to push the code into production. Heroku CLI is quite easy with a few sets of commands but if your project is deployed on GitHub, you can straightaway let the deployment start the build on a push to a specific branch. This becomes quite automotive and easy to scale while deploying a large-scale application. &lt;/p&gt;&lt;p&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This step is quite important because you need to make sure that all the packages are listed in the &lt;code&gt;requirements.txt&lt;/code&gt; file else you will have to wait for the build to fail and redeploy.&lt;/p&gt;&lt;p&gt;Make sure the server is running first on your local machine, remember the server will be set up from scratch but the database will already have applied migrations if you have applied migrations before after connecting the Heroku Postgres database.&lt;/p&gt;&lt;p&gt;```python manage.py collectstatic&lt;/p&gt;&lt;p&gt;python manage.py runserver```&lt;/p&gt;&lt;p&gt;This will set up the origin of the remote repository that will be pushing the project code. Next, make sure to commit the code which will contain all the required stuff for deploying the code.&lt;/p&gt;&lt;p&gt;Checklist for deploying the code&lt;/p&gt;&lt;p&gt;&lt;code&gt;- requirements.txt- Procfile- runtime.txt- django-project- environment variables / config variables - static file configuration- database configuration- migrate schema of database - gitignore file for ignoring virtualenvs, .env file, staticfiles, etc&lt;/code&gt;&lt;/p&gt;&lt;p&gt;here's a sample &lt;code&gt;.gitignore&lt;/code&gt; for a minimal django project.&lt;/p&gt;&lt;p&gt;```gitignore.env/.venv/env/venv/*.env&lt;/p&gt;&lt;p&gt;*.pycdb.sqlite3staticfiles/```&lt;/p&gt;&lt;p&gt;If you want a full-fledged &lt;code&gt;.gitignore&lt;/code&gt; for a complex django project, you can take the reference from Jose Padilla's &lt;a href="https://github.com/jpadilla/django-project-template/blob/master/.gitignore"&gt;gitignore Template&lt;/a&gt; for a django project.  &lt;/p&gt;&lt;h3 id="git-commit-the-django-project"&gt;Git Commit the Django Project&lt;/h3&gt;&lt;p&gt;```git status &lt;/p&gt;&lt;p&gt;git add .&lt;/p&gt;&lt;p&gt;git commit -m "config for heroku deployment"```Carefully check the status of the git repository before committing and make sure you don't forget anything by mistake, it won't a big problem but it would mess up the build process.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652613991525/hxQgtGOoM.png" /&gt;&lt;/p&gt;&lt;p&gt;After committing the code, we can now push the code to GitHub. We first need to set the remote repository reference to be able to push the code to it. &lt;/p&gt;&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo_name&amp;gt;&lt;/code&gt;This will set up the &lt;code&gt;origin&lt;/code&gt; as the remote repository on GitHub. Once the remote repository is created, we can move into the push of the git repository that will trigger the build. First, navigate to the &lt;code&gt;Deploy&lt;/code&gt; section in the heroku app's dashboard where we want to connect the &lt;code&gt;GitHub&lt;/code&gt; repository and allow the automatic deploy from a branch in this case we have chosen the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;&lt;p&gt;Due to some &lt;code&gt;Heroku&lt;/code&gt; Internal Server Issues, the GitHub integration seems to have broken and isn't working as of May 2022, but it might work later. &lt;/p&gt;&lt;p&gt;Below is a screenshot of my previous project deployed to Heroku using a GitHub repository.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652605497382/5VuQUQ0t0.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;git push origin main&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This will prompt you for your GitHub credentials and will deploy the commits to the remote repository on GitHub. This push on the main branch should also trigger the build process of the heroku app for this django project. You can navigate to the Activity section for the Build logs. &lt;/p&gt;&lt;p&gt;If you have followed the article well, and your repository has all the correct configurations, the build will succeed, else chances are you might have missed a few things and the app might have crashed. You can debug your application build with the simple heroku CLI command:&lt;/p&gt;&lt;p&gt;&lt;code&gt;heroku logs --tail -a &amp;lt;app_name&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This can be quite handy and saves a lot of time in understanding what went wrong in the build. It might be related to database migration, static files, python package not found, and some silly mistakes and errors that can be fixed after committing the code and pushing it to GitHub again.&lt;/p&gt;&lt;p&gt;If you do not want a GitHub repository, you can directly push the code from the local git repository to the remote heroku app center. This will require us the Heroku CLI.&lt;/p&gt;&lt;h2 id="heroku-cli"&gt;Heroku CLI&lt;/h2&gt;&lt;p&gt;We can use the heroku CLI for pushing the code via the simple git repository. We can push the references via the branch and a remote repository on heroku to build our app.  For this, we assume you have heroku installed and logged in. We will require the django project code and heroku cli to build the django web application.&lt;/p&gt;&lt;p&gt;```bashheroku git:remote -a &lt;heroku_app_name&gt;&lt;/p&gt;&lt;h1 id="for-my-case"&gt;for my case&lt;/h1&gt;&lt;p&gt;heroku git:remote -a blog-django-dep```&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614221069/vCAKD0zsz.png" /&gt;&lt;/p&gt;&lt;p&gt;After this, you can commit your code and the project as git repository. We have added the remote repository location on heroku, we can now simply push the code to the remote repository.&lt;/p&gt;&lt;p&gt;&lt;code&gt;git push heroku main&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614125785/uEzFQ9VvQ.png" /&gt;&lt;/p&gt;&lt;p&gt;Here, &lt;code&gt;heroku&lt;/code&gt; is the remote repository location and &lt;code&gt;main&lt;/code&gt; is the branch of the repository. This will push the code to the repository and thereafter create a build to deploy the Django project as a Heroku application.&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614381808/kYTmB3EO2p.png" /&gt;&lt;/p&gt;&lt;p&gt;You can hit the &lt;code&gt;Open App&lt;/code&gt; button on the top right corner and there should be your deployed Django application. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652610395538/xjUiODhoK.png" /&gt;&lt;/p&gt;&lt;h2 id="a-few-tricks-and-gotchas"&gt;A Few Tricks and Gotchas&lt;/h2&gt;&lt;p&gt;There are a few tricks and issues that you might pop into while deploying a django project on heroku, especially the build process. It requires a few iterations to get the complete app setup.&lt;/p&gt;&lt;h3 id="run-command-from-the-dashboard-console"&gt;Run command from the Dashboard console&lt;/h3&gt;&lt;p&gt;If you don't have heroku CLI set up and want to fix a few things on the pushed code to the heroku app, you can use the &lt;code&gt;Run Console&lt;/code&gt; option from the &lt;code&gt;More&lt;/code&gt; Tab on the top right corner of theApplication dashboard. This is a great way to run migrations, configure static files or tweak a few things here and there without messing up the code on GitHub or the remote git repositories. &lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614775294/lgDPwr2yr.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614821950/uTzQVB8sC.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652614845269/BkZhu3SGH.png" /&gt;&lt;/p&gt;&lt;h3 id="deploy-with-docker"&gt;Deploy with Docker&lt;/h3&gt;&lt;p&gt;You can even use the docker container to deploy a Django application on Heroku. It is a great way of learning a lot of deployment strategies and techniques using Docker. You'll get familiar with interesting concepts like virtualization, and containerization, and also learn Docker on the way. You can follow this tutorial on &lt;a href="https://testdriven.io/blog/deploying-django-to-heroku-with-docker/"&gt;Deploying Django applications with Docker on Heroku&lt;/a&gt;. Also, you can check out the official Heroku documentation for &lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;deploying python applications&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="what-are-dynos"&gt;What are Dynos?&lt;/h3&gt;&lt;p&gt;Dynos are simply web processes or workers that serve your web application. Dynos in Heroku are allocated based on the build process, once the slug is created a dyno is created as it runs on a VM container. This simply means there are limitations on how to use the web application and its sleep process. The hobby tier is sufficient for normal testing projects and side projects though you will have to pay and move into advance tiers to increase the dyno allocations and scaling of those web processes. &lt;/p&gt;&lt;p&gt;It's not a simple thing to understand but to keep it simple, it might be a container to process the client's request and serve the page for a finite duration of the interaction. Also, your application will sleep after half an hour, if you try to reload the application every half an hour it will consume your resource allocation for the month and this is how the tiers and divided for paid services on Heroku. You can check out the detail over &lt;a href="https://www.heroku.com/pricing#containers"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, that is one of the ways we can deploy a Django application on Heroku with the PostgreSQL database. You can find the [django-blog project] on [GitHub] for following along with the deployment process.  In the next few parts of the series, we will be hopefully covering other platforms where you can deploy a Django o application.&lt;/p&gt;&lt;p&gt;Hopefully, you liked the above tutorial, if you have any questions. feedback, or queries, you can contact me on the Social handles provided below. Thank you for reading and till the next post Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/bash-game-numberjack'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Learning BASH by making a Number game&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/find-filter-github-issues'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Filter and Find an Issue on GitHub&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-deploy-heroku</guid><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate></item><item><title>Django Project with PostgreSQL Deployment on Railway App</title><link>https://mr-destructive.github.io/techstructive-blog/django-deploy-railway</link><description>Creating and Configuring a Django Application for deployment on Railway.app Platform</description><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;We have already seen the process of deployment of a Django app on Heroku, now we can move to another platform which is &lt;a href="https://railway.app"&gt;Railway App&lt;/a&gt;. This allows a faster and more intuitive way to deploy a Django app(or any sort of web app). This platform has several &lt;a href="https://railway.app/starters"&gt;Starter Apps&lt;/a&gt; for shipping your app in several clicks, definitely, it would require some configuration and tweaking a bit.&lt;/p&gt;&lt;p&gt;We will be following similar steps from the &lt;a href="https://mr-destructive.github.io/techstructive-blog/series/django-deployment/"&gt;Django-Heroku Deployment Guide&lt;/a&gt; for configuring and setting up our Django project for the deployment on the Railway app. We explore a few different ways to create and deploy a Django project on Railway.&lt;/p&gt;&lt;h2 id="creating-a-project-on-railway-app"&gt;Creating a Project on Railway App&lt;/h2&gt;&lt;p&gt;Once we have our Django project setup, we can move ahead and create a Railway Project. A Railway project is a collection of environments, plugins, services, and deployment variables. By heading on the &lt;a href="https://railway.app/new"&gt;New Project&lt;/a&gt; webpage, you can log in or sign up for a free account and create a simple project.&lt;/p&gt;&lt;p&gt;Here we can have a few options:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a Django App Template (Djangopy Starter)&lt;/li&gt;&lt;li&gt;Pull a Project from a GitHub Repository (Deploy from GitHub Repo)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We'll look into each of them, the first one is by allowing the &lt;code&gt;Railway&lt;/code&gt; bot to create a prebuilt Django template on our GitHub account. The second option is for fetching and deploying an existing Django project repository on GitHub.&lt;/p&gt;&lt;h2 id="railway-django-project-template"&gt;Railway Django Project Template&lt;/h2&gt;&lt;p&gt;Railway provides a simple Django project template, it consists of a single app and a simple view that displays a &lt;code&gt;HttpResponse&lt;/code&gt;. The Django project template provided by Railway is open source and available on &lt;a href="https://github.com/railwayapp/starters/tree/master/examples/djangopy"&gt;GitHub&lt;/a&gt;. With this method, you won't require any django project to create by yourself, it would be a template of django project created by the railway bot. Though for extending and building a meaningful django project, you will have to clone the repository and make necessary changes to it.&lt;/p&gt;&lt;p&gt;Create a Project by heading on to the &lt;a href="https://railway.app/new"&gt;New Project&lt;/a&gt; Tab and search for &lt;code&gt;Django&lt;/code&gt;, you should see a &lt;code&gt;django&lt;/code&gt; project as a starter pack.&lt;/p&gt;&lt;p&gt;&lt;img alt="New Railway Django Project" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652945887/blog-media/django-deployment/railway-django-new-project.png" /&gt;&lt;/p&gt;&lt;p&gt;Once you select the Django project, we have an initial configuration tab opened up for us. It is mandatory to fill the &lt;code&gt;SECRET_KEY&lt;/code&gt; environment variable as it makes your django project more secure. Also, do change the name of the &lt;code&gt;repository&lt;/code&gt; as it will be the name of your repository name in your GitHub account.&lt;/p&gt;&lt;p&gt;To create a &lt;code&gt;SECRET_KEY&lt;/code&gt; key, you can move into your terminal and do some python wizardry.&lt;/p&gt;&lt;p&gt;Open a Python REPL, by entering the command &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt;. Import the &lt;code&gt;secrets&lt;/code&gt; module and run the function &lt;code&gt;token_hex(24)&lt;/code&gt; which will generate a key of length 24.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pythonimport secretssecrets.token_hex(24)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Python Secret Key Generation" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652946842/blog-media/django-deployment/python-secret-key-gen.png" /&gt;&lt;/p&gt;&lt;p&gt;Now, copy the &lt;code&gt;SECRET_KEY&lt;/code&gt; without quotes into the prompt and this will create a repository on your GitHub with the provided name. The &lt;code&gt;Railway&lt;/code&gt; Bot will create a django project with the name &lt;code&gt;djangopy&lt;/code&gt; in that repository with some pre-configured settings.&lt;/p&gt;&lt;p&gt;&lt;img alt="Django Proejct Create" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652947362/blog-media/django-deployment/create-project-django.png" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt="Railway Bot creating Djangopy" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652947344/blog-media/django-deployment/railway-bot-djangopy.png" /&gt;&lt;/p&gt;&lt;p&gt;This will create a simple repository on your GitHub but also a django application deployed on Railway along with PostgreSQL Database attached to it.&lt;/p&gt;&lt;p&gt;&lt;img alt="Railway Django Project Dashboard" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652947689/blog-media/django-deployment/deployed-project-dashboard.png" /&gt;&lt;/p&gt;&lt;p&gt;So, this has deployed the project on Railway with this &lt;a href="https://djangopy-production-43cb.up.railway.app/"&gt;https://djangopy-production-43cb.up.railway.app/&lt;/a&gt; URL Link. The name of the link can be configured from the Settings Tab in Dashboard Section and editing the Service Domains and even adding a Custom domain.&lt;/p&gt;&lt;p&gt;So this is how we deploy a basic django application on railway app. Further, you can modify the contents of the Github repository and push the code by committing the changes and it will pick it from there and also deploy it automatically, thereby creating a sort of CI-CD.&lt;/p&gt;&lt;p&gt;We'll be demonstrating this in the next section which is a method to deploy the project from a custom GitHub repository i.e. by setting up everything ourselves and then attaching the Railway app for deployment. The benefit of this method is that we can configure some already existing Django applications by tinkering a bit.&lt;/p&gt;&lt;h2 id="deploying-from-github-repository-to-railway"&gt;Deploying from GitHub repository to Railway&lt;/h2&gt;&lt;p&gt;This is the second method for deploying the Railway project. For this we need a proper Django Project, we will set up a django application from scratch, I have already created a simple CRUD application in Django for a Blog on &lt;a href="https://github.com/Mr-Destructive/django-blog"&gt;GitHub&lt;/a&gt;. This won't be a Django guide for setting up views and creating models, I've explained all the setup of the django-blog in my &lt;a href="https://mr-destructive.github.io/techstructive-blog/series/django-basics/"&gt;Django Basics series&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="creating-a-django-application"&gt;Creating a Django Application&lt;/h3&gt;&lt;p&gt;For deploying an app, we definitely need an app, we need to create a basic Django application to deploy on the web. We'll be creating a simple blog application with a couple of views and a simple model structure. As for the database, we'll be using Postgres as Railway has an database service for it and it is pretty easy to configure.&lt;/p&gt;&lt;h4 id="set-up-a-virtual-environment"&gt;Set up a virtual environment&lt;/h4&gt;&lt;p&gt;We need to set up a virtual environment in order to keep the Django project neat and tidy by managing the project-specific dependencies and packages. We can use the &lt;a href="https://pypi.org/project/virtualenv/"&gt;virtualenv&lt;/a&gt; package to isolate a python project from the rest of the system.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# install the virtualenv packagepip install virtualenv# create a virtual env for the projectvirtualenv .venv# activate the virtualenvWindows:.venv\Scripts\activateLinux/macOS:source .venv/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will set up the project nicely for a Django project, you now install the core Django package and get started with creating a Django application.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# install django&lt;/span&gt;pip install django&lt;span class="c1"&gt;# start a django project&lt;/span&gt;django-admin startproject blog .&lt;span class="nb"&gt;cd&lt;/span&gt; blog&lt;span class="c1"&gt;# create a application in django project&lt;/span&gt;python manage.py createapp api&lt;span class="c1"&gt;# Create some models, views, URLs, templates&lt;/span&gt;&lt;span class="c1"&gt;# run the server&lt;/span&gt;python manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We assume you already have a Django project configured with some basic URLs, views, and templates or static files as per your project and requirements, for this tutorial I will be using the simple blog application from my previous Django tutorials as a reference. As said earlier, you can follow along with my &lt;a href="https://techstructiveblog.hashnode.dev/series/django-basics"&gt;Django Basics&lt;/a&gt; series and refer to the Blog Application project on &lt;a href="https://github.com/Mr-Destructive/django-blog"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="configuring-the-django-application"&gt;Configuring the Django Application&lt;/h3&gt;&lt;p&gt;Make sure to create and activate the virtual environment for this django project. This should be done to manage the dependencies and packages used in the project. If you are not aware of the virtual environment and django setup, you can follow up with this &lt;a href="https://mr-destructive.github.io/techstructive-blog/django-setup-script/"&gt;post&lt;/a&gt;.&lt;/p&gt;&lt;h4 id="creating-a-runtimetxt-file"&gt;Creating a runtime.txt file&lt;/h4&gt;&lt;p&gt;Now, Firstly we need to specify which type and version of language we are using. Since Django is a Python-based web framework, we need to select the python version in a text file.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;runtime.txt&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python-3.9.5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;Here, the version can be anything as per your project and the packages installed.  &lt;/p&gt;&lt;h4 id="creating-requirementstxt-file"&gt;Creating requirements.txt file&lt;/h4&gt;&lt;p&gt;We'll first create a &lt;code&gt;requirements.txt&lt;/code&gt; file for storing all the dependencies and packages installed in the application. This will help in installing dependencies while deploying the application. We can either use a &lt;code&gt;requirements.txt&lt;/code&gt; file using &lt;code&gt;virtualenv&lt;/code&gt; or a &lt;code&gt;Pipfile&lt;/code&gt; using Pipenv. Both serve the same purpose but a bit differently. &lt;/p&gt;&lt;p&gt;Assuming you are in an isolated virtual environment for this Django project, you can create a requirements.txt file using the below command:&lt;/p&gt;&lt;p&gt;Make sure the virtualenv is activated before running the command:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a simple text file that contains the package names along with the versions used in the current virtual environment. A simple Django requirements file would look something like this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;asgiref==3.4.1Django==3.2.11pytz==2021.3sqlparse==0.4.2typing_extensions==4.0.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="pip freeze command" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652956558/blog-media/django-deployment/railway_requirements_freeze.png" /&gt;&lt;/p&gt;&lt;p&gt;This is vanilla Django without any additional dependencies but if you have integrated other functionalities like Django Rest Framework, PostgreSQL, Crispy Forms, Schedulers, etc. there might be additional dependencies that become quite crucial for the smooth working of the project.  &lt;/p&gt;&lt;p&gt;If you are using pipenv, you don't need to make any efforts to manually activate and manage the virtual environment, the dependencies are installed and taken care of by the pipenv installer. You just need to make sure to install any package with &lt;code&gt;pipenv install&lt;/code&gt; and not &lt;code&gt;pip install&lt;/code&gt; for better and improved package tracking.&lt;/p&gt;&lt;p&gt;So, that's all we need to take care of packages and keep a list of these integrated packages for the project. You need to update the requirements.txt file every time you install any new package or modify the dependencies for a project. Simply use the command &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in the activated virtual environment.  &lt;/p&gt;&lt;h4 id="creating-a-procfile"&gt;Creating a Procfile&lt;/h4&gt;&lt;p&gt;Next up, we have the &lt;code&gt;Procfile&lt;/code&gt;, a procfile is a special file that holds information about the processes to be run to start or activate the project. In our case, for django we need a web process that can manage the server.&lt;/p&gt;&lt;p&gt;A Procfile is a simple file without any extension, make sure to write &lt;code&gt;Procfile&lt;/code&gt; as it is the name of the file in the root folder of the project. Inside the file add the following contents:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Procfile&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gunicorn&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;project_name&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;.wsgi&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;For the Procfile, Railway has a built &lt;a href="https://github.com/railwayapp/starters/blob/master/examples/djangopy/Procfile"&gt;Procfile&lt;/a&gt; in the Django Template, you can refer to it and create it as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;web&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;migrate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gunicorn&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;project_name&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;.wsgi&lt;span class="w"&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see we have defined the &lt;code&gt;web&lt;/code&gt; process using &lt;code&gt;gunicorn&lt;/code&gt;, &lt;a href="https://pypi.org/project/gunicorn/"&gt;Gunicorn&lt;/a&gt; is a python package that helps in creating WSGI HTTP Server for the UNIX operating systems. So, we need to install the package and update the package dependency list. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install gunicornpip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="configuring-environment-variables"&gt;Configuring Environment Variables&lt;/h4&gt;&lt;p&gt;We need to keep our secrets for the django project out of the deployed code and in a safe place, we can create environment variables and keep them in a &lt;code&gt;.env&lt;/code&gt; file which will be git-ignored. We do not want this &lt;code&gt;.env&lt;/code&gt; file to be open source and thus should not be committed.&lt;/p&gt;&lt;p&gt;We first need to create a new secret key if you already have a GitHub repository, chances are you would have committed the default secret key open for the world to see, it is an insecure way of deploying django apps in production.&lt;/p&gt;&lt;p&gt;This should generate a secret key that only you know now. So, just copy the key without the quotes and create a file &lt;code&gt;.env&lt;/code&gt; in the root project folder. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;.env&lt;/strong&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SECRET_KEY=76419fd6885a677f802fd1d2b5acd0188e23e001042b05a8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;The &lt;code&gt;.env&lt;/code&gt; file should also be added to the &lt;code&gt;.gitignore&lt;/code&gt; file, so simply append the following in the &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is just one of the environment variables in our django project, further, we will also be adding a few other variables like database credentials, debug status, etc.&lt;/p&gt;&lt;p&gt;We have now created environment variables for our django application, we now need a way to parse these environment variables into the Django project.  &lt;/p&gt;&lt;h4 id="parsing-environment-variables-using-python-dotenv"&gt;Parsing Environment variables using python-dotenv&lt;/h4&gt;&lt;p&gt;We will use &lt;a href="https://pypi.org/project/python-dotenv/"&gt;python-dotenv&lt;/a&gt; to parse variables into the django settings configurations like &lt;code&gt;SECRET_KEY&lt;/code&gt; and &lt;code&gt;DATABASES&lt;/code&gt;. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Install &lt;code&gt;python-dotenv&lt;/code&gt; with pip with the command :  &lt;/li&gt;&lt;/ul&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install python-dotenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to then modify the default variables in the &lt;code&gt;settings.py&lt;/code&gt; file. Firstly, we will load in the &lt;code&gt;.env&lt;/code&gt; file for accessing the environment variables for the configuration of the project.&lt;/p&gt;&lt;p&gt;Append the following code, to the top of the &lt;code&gt;settings.py&lt;/code&gt; file, make sure don't override the configuration so remove unnecessary imports and configurations.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# &amp;lt;project_name&amp;gt;/settings.py&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have imported the package &lt;code&gt;dotenv&lt;/code&gt; basically the &lt;code&gt;python-dotenv&lt;/code&gt; into the &lt;code&gt;settings.py&lt;/code&gt; file and the module &lt;code&gt;os&lt;/code&gt; for loading the &lt;code&gt;.env&lt;/code&gt; file. The &lt;code&gt;load_dotenv&lt;/code&gt; function helps in loading the &lt;code&gt;key-value&lt;/code&gt; pairs which are the configuration variables that can act as actual environment variables. We provide in a file to the &lt;a href="https://saurabh-kumar.com/python-dotenv/"&gt;load_dotenv&lt;/a&gt; function which is the &lt;code&gt;.env&lt;/code&gt; file in our case, you can pick up any location for the &lt;code&gt;.env&lt;/code&gt; file but make sure to change the location while parsing the file into the &lt;code&gt;load_dotenv&lt;/code&gt; function. &lt;/p&gt;&lt;p&gt;After loading the variables into the &lt;code&gt;settings.py&lt;/code&gt; file, we now need to access those variables and set the appropriate variables the configuration from the variables received from the &lt;code&gt;load_dotenv&lt;/code&gt; function. The &lt;code&gt;os.getenv&lt;/code&gt; function to access the environment variables. The &lt;code&gt;os.getenv&lt;/code&gt; function takes a parameter as the &lt;code&gt;key&lt;/code&gt; for the environment variable and returns the value of the environment variable.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have secretly configured the &lt;code&gt;SECRET_KEY&lt;/code&gt; for the django project. If you have any other variables as simple key-value pairs like &lt;code&gt;AUTH&lt;/code&gt; passwords, username, etc. you can use this method to get the configuration variables. &lt;/p&gt;&lt;h4 id="add-gitignore-file"&gt;Add gitignore file&lt;/h4&gt;&lt;p&gt;We would need a &lt;code&gt;.gitignore&lt;/code&gt; file for only committing the project and pushing it to the remote repository. Here, we will set up a minimal &lt;code&gt;.gitignore&lt;/code&gt; file in our root repository.&lt;/p&gt;&lt;p&gt;Here's a sample &lt;code&gt;.gitignore&lt;/code&gt; for a minimal django project.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.env/.venv/env/venv/*.env*.pycdb.sqlite3staticfiles/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want a full-fledged &lt;code&gt;.gitignore&lt;/code&gt; for a complex django project, you can take the reference from Jose Padilla's &lt;a href="https://github.com/jpadilla/django-project-template/blob/master/.gitignore"&gt;gitignore Template&lt;/a&gt; for a django project.  &lt;/p&gt;&lt;p&gt;That would be good to go for creating and serving up the project while deploying the project on Railway App.&lt;/p&gt;&lt;h3 id="git-commit-the-django-project"&gt;Git Commit the Django Project&lt;/h3&gt;&lt;p&gt;Now, we can safely commit the code and push it to a GitHub repository. This will make sure you have a basic django proejct on GitHub from which we can build the Railway app into deployment.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git status git add .git commit -m &amp;quot;config for railway deployment&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Carefully check the status of the git repository before committing and make sure you don't forget anything by mistake, only commit the files which you think are important and ignore the rest.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote add rail https://github.com/Mr-Destructive/django-blog/tree/railwaygit push rail railway&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Django Project Push GitHub" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652956515/blog-media/django-deployment/railway_push_github.png" /&gt;&lt;/p&gt;&lt;h3 id="creating-the-railway-project"&gt;Creating the Railway project&lt;/h3&gt;&lt;p&gt;Now, since we have a django project nicely configured and setup on GitHub, we can pull out a railway project and fetch the project from the GitHub repository.&lt;/p&gt;&lt;video width="800" height="450" controls&gt;  &lt;source src="https://res.cloudinary.com/techstructive-blog/video/upload/v1652970864/blog-media/django-deployment/railway_project_init.webm" type="video/mp4"&gt;&lt;/video&gt;&lt;p&gt;&lt;img alt="Railway Proejct from GitHub" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652970665/blog-media/django-deployment/railway-proejct-github.png" /&gt;&lt;/p&gt;&lt;h4 id="spinning-up-the-database"&gt;Spinning up the database&lt;/h4&gt;&lt;p&gt;We also need a database that we can attach in the django project in our Railway application. We can integrate a &lt;code&gt;PostgreSQL&lt;/code&gt; database as a service running in our Railway project instance. We can do that by locating the &lt;code&gt;+New&lt;/code&gt; tab on the project dashboard and attaching a &lt;code&gt;Database&lt;/code&gt; in the drop-down menu. &lt;/p&gt;&lt;video width="800" height="450" controls&gt;  &lt;source src="https://res.cloudinary.com/techstructive-blog/video/upload/v1652963718/blog-media/django-deployment/postgres_spinup_railway_d2xkpt.mp4" type="video/mp4"&gt;&lt;/video&gt;&lt;p&gt;After creating a database service, we need the credentials of the database or the &lt;code&gt;DATABASE_URL&lt;/code&gt; of the PostgreSQL in order to integrate it into the django settings. We can locate into the &lt;code&gt;Connect&lt;/code&gt; of the PostgreSQL service and grab the URL of the database. This can be stored in the main django application serves as an environment variable. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DATABASE_URL=postgresql://postgres:SE74bEw@containers-51.railway.app:6919/railway&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="PostgreSQL database variable config" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652964755/blog-media/django-deployment/postgres_database_config.png" /&gt;&lt;/p&gt;&lt;p&gt;In the Django Starter Project provided by Railway, we should have a PostgreSQL database integrated as a Service. So, we can consume the database in our django project. &lt;/p&gt;&lt;p&gt;We will add the &lt;code&gt;DATABASE_URL&lt;/code&gt; config variable into the &lt;code&gt;.env&lt;/code&gt; file and also add it into the main Django project service so that it can communicate to the database. You need to copy the &lt;code&gt;DATABSE_URL&lt;/code&gt; into our local setup file(&lt;code&gt;.env&lt;/code&gt; file). Copy the Database URL and paste it into the &lt;code&gt;.env&lt;/code&gt; file as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DATABASE_URL=postgres://sjxgipufegmgsw:78cbb568e@ec2-52-4-104-184.compute-1.amazonaws.com:5432/dbmuget&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The format for the Postgres URL is as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;postgresql://[user[:password]@][netloc][:port][/dbname]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="loading-database-configuration"&gt;Loading Database configuration&lt;/h4&gt;&lt;p&gt;Databases are a bit different as compared to other simple configurations in django. We need to make a few adjustments to the default database configuration. We will install another package &lt;code&gt;dj-database-url&lt;/code&gt; to configure &lt;code&gt;DATABASE_URL&lt;/code&gt;. Since the databse_url has a few components we need a way to extract the details like the &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;database_name&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt;. Using the &lt;code&gt;dj-database-url&lt;/code&gt; package we have a few functions that can serve the purpose.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install dj-database-url&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the end of your &lt;code&gt;settings.py&lt;/code&gt; file, append the following code. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dj_database_url&lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dj_database_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn_max_age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1800&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We would need an adapter for making migrations to the &lt;code&gt;PostgreSQL&lt;/code&gt; database i.e. the &lt;code&gt;psycopg2&lt;/code&gt; package. This is a mandatory step if you are working with &lt;code&gt;postgres&lt;/code&gt; database. This can be installed with the simple pip install:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install psycopg2# If it does not work trypip install psycopg2-binary# if still error persists try installing setuptoolspip install -U setuptoolspip install psycopg2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, that we have configured the database, we can now apply migrations to the new database of Postgres provided by Railway. We will simply run the migrate command and in the Railway Project the PostgreSQL database would have been modified and an appropriate schema should be applied.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Railway PostgreSQL db migrate" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652965335/blog-media/django-deployment/railway_database_migrate.png" /&gt;&lt;/p&gt;&lt;p&gt;Make sure to update the &lt;code&gt;requirements.txt&lt;/code&gt; file before pushing the project to Railway app for making sure everything works as expected. Since we have installed a few additional packages that are directly used in the &lt;code&gt;settings.py&lt;/code&gt; file, we need to run the &lt;code&gt;pip freeze&lt;/code&gt; command to update the &lt;code&gt;requiremnets.txt&lt;/code&gt; file.&lt;/p&gt;&lt;h4 id="serving-static-files"&gt;Serving Static Files&lt;/h4&gt;&lt;p&gt;Now, if you have some static files like &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;Javascript&lt;/code&gt;, or &lt;code&gt;images&lt;/code&gt;, you need to configure the static files in order to serve them from the Railway app server. We will require another config variable for collecting the static files from the selected repository. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;staticfiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, if you have served your static files from the &lt;code&gt;static&lt;/code&gt; folder in the root directory of your django project, you can add the above code in the settings.py file. We will collect all static files in the folder along with the default static files provided by django in the &lt;code&gt;staticfiles&lt;/code&gt; directory. Run the following command if you want to test whether the static files are properly collected and served.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py collectstatic &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="image.png" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652600828657/JgL4nLuiL.png" /&gt;&lt;/p&gt;&lt;p&gt;So, this command will collect all the static files and store them in a single place. We see that the files from the admin section are also copied as well as the custom static files from the project configuration. Now, we can move on to set the config variable for the Railway app in the Variables Tab.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DISABLE_COLLECTSTATIC = 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can set the &lt;code&gt;DISABLE_COLLECTSTATIC&lt;/code&gt; variable as &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; indicating whether to disable it or not. We have currently enabled the static file collection while deploying the app but you can set it to &lt;code&gt;1&lt;/code&gt; to disable the collection of static files.&lt;/p&gt;&lt;p&gt;Since I first tested the application on Railway, the static files don't work as expected, we need another package to make sure the staticfiles are served property. We will be installing the &lt;code&gt;whitenoise&lt;/code&gt; package which serves as the middleware for serving the static files.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install whitenoise&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the whitenoise middleware &lt;code&gt;whitenoise.middleware.WhiteNoiseMiddleware&lt;/code&gt; to the &lt;code&gt;MIDDLEWARE&lt;/code&gt; list in the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;whitenoise.middleware.WhiteNoiseMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That should be enough to make the most of the deployment on Railway app. You will have to make a few adjustments as per your requirements and project.&lt;/p&gt;&lt;h2 id="deploy-to-github"&gt;Deploy to GitHub&lt;/h2&gt;&lt;p&gt;Finally, we will have all the pieces connected, only we need to push the code to the GitHub repository in order to trigger a build on the railway app. So, we make sure we commit every critical thing that are in our django project and include every sensitiv information in the gitignore file.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This step is quite important because you need to make sure that all the packages are listed in the &lt;code&gt;requirements.txt&lt;/code&gt; file else you will have to wait for the build to fail and redeploy.&lt;/p&gt;&lt;p&gt;Make sure the server is running first on your local machine, remember the server will be set up from scratch but the database will already have applied migrations if you have applied migrations before after connecting the Railway database service.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py collectstaticpython manage.py runserver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will set up the origin of the remote repository that will be pushing the project code. Next, make sure to commit the code which will contain all the required stuff for deploying the code.&lt;/p&gt;&lt;p&gt;Checklist for deploying the code&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;- requirements.txt- Procfile- runtime.txt- django-project- environment variables / config variables - static file configuration- database configuration- migrate schema of database - gitignore file for ignoring virtualenvs, .env file, staticfiles, etc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin mainorigin -&amp;gt; remote repository URLmain   -&amp;gt; branch name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Deployed Railway Project" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652966755/blog-media/django-deployment/railway-production-ss.png" /&gt;&lt;/p&gt;&lt;h2 id="railway-cli"&gt;Railway CLI&lt;/h2&gt;&lt;p&gt;Railway also provides a cool CLI, it has some quite handy features like creating and managing services, local development environment, etc. We'll just dive into a few nice features of the CLI tool.&lt;/p&gt;&lt;p&gt;We'll first install the CLI on our local system, for that the guide is quite limited in a way for a few options to choose from like &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, and &lt;code&gt;scoop&lt;/code&gt;. For me, the shell was the way to go, but it had a few issues with permission, so I made a few changes in the &lt;a href="https://github.com/railwayapp/cli/blob/master/install.sh"&gt;install.sh&lt;/a&gt; script ran on my machine and it worked fine.&lt;/p&gt;&lt;p&gt;&lt;img alt="Install Railway CLI" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652944836/blog-media/django-deployment/railway-install.png" /&gt;&lt;/p&gt;&lt;p&gt;Now, that we have the &lt;code&gt;Railway CLi&lt;/code&gt; set up we can run a few commands like:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;railway loginOR# if it doesn&amp;#39;t workrailway login --browserlessOR# with nodenpx railway login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt="Railway CLI Login" src="https://res.cloudinary.com/techstructive-blog/image/upload/v1652967978/blog-media/django-deployment/railway-cli-login.png" /&gt;&lt;/p&gt;&lt;p&gt;This will sign you in with your railway account.&lt;/p&gt;&lt;p&gt;We now need to link our project and execute and work around the command in that project from the railway app. To link a project from a railway account, you have to use the &lt;code&gt;link&lt;/code&gt; command. The link command takes in a parameter as the project id which can be obtained from the project dashboard settings tab. &lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;railway link &amp;lt;proejct_id&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;video width="800" height="450" controls&gt;  &lt;source src="https://res.cloudinary.com/techstructive-blog/video/upload/v1652969451/blog-media/django-deployment/railway-proejct-link.webm" type="video/mp4"&gt;&lt;/video&gt;&lt;p&gt;Now, we can explore some more commands like &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, and so on. The &lt;code&gt;run&lt;/code&gt; command is pretty solid and provides an interface to run commands for your project for instance in Django, create a superuser, manage dependencies, collectstatic files, etc. This allows us to set up and run commands into the actual production environment just from the CLI.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# railway run (command to be executed)railway run python manage.py createsuperuser# deploy the projectrailway up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;video width="800" height="450" controls&gt;  &lt;source src="https://res.cloudinary.com/techstructive-blog/video/upload/v1652968693/blog-media/django-deployment/railway-cli-run-cmd.webm" type="video/mp4"&gt;&lt;/video&gt;&lt;p&gt;So, this was all about creating and deploying a django application on Railway. Here are some reference links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Mr-Destructive/django-blog/tree/railway"&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://django-blog-production.up.railway.app/"&gt;Live Webpage&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So, that's how we deploy a Django project on the Railway app. We have seen two of the many ways to create and deploy a Django application on Railway. We also integrated a PostgreSQL service provided by Railway in our Django Project. Using the Railway CLI, we were able to manage and create Projects from the terminal, also interaction of the railway project was achieved along with the production build from CLI.&lt;/p&gt;&lt;p&gt;Hopefully, you liked the above tutorial, if you have any questions. feedback, or queries, you can contact me on the Social handles provided below. Thank you for reading and till the next post Happy Coding :)&lt;/p&gt;&lt;div class='prevnext'&gt;    &lt;style type='text/css'&gt;    :root {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    [data-theme="light"] {      --prevnext-color-text: #1f2022;      --prevnext-color-angle: #ffeb00;      --prevnext-subtitle-brightness: 3;    }    [data-theme="dark"] {      --prevnext-color-text: #eefbfe;      --prevnext-color-angle: #ff6600;      --prevnext-subtitle-brightness: 3;    }    .prevnext {      display: flex;      flex-direction: row;      justify-content: space-around;      align-items: flex-start;    }    .prevnext a {      display: flex;      align-items: center;      width: 100%;      text-decoration: none;    }    a.next {      justify-content: flex-end;    }    .prevnext a:hover {      background: #00000006;    }    .prevnext-subtitle {      color: var(--prevnext-color-text);      filter: brightness(var(--prevnext-subtitle-brightness));      font-size: .8rem;    }    .prevnext-title {      color: var(--prevnext-color-text);      font-size: 1rem;    }    .prevnext-text {      max-width: 30vw;    }    &lt;/style&gt;    &lt;a class='prev' href='/golang-intro'&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M13.5 8.25L9.75 12L13.5 15.75" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt; &lt;/path&gt;        &lt;/svg&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;prev&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Golang: What and Why?&lt;/p&gt;        &lt;/div&gt;    &lt;/a&gt;    &lt;a class='next' href='/vim-movement-speed'&gt;        &lt;div class='prevnext-text'&gt;            &lt;p class='prevnext-subtitle'&gt;next&lt;/p&gt;            &lt;p class='prevnext-title'&gt;Vim: Enhancing Movement Speed&lt;/p&gt;        &lt;/div&gt;        &lt;svg width="50px" height="50px" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;            &lt;path d="M10.5 15.75L14.25 12L10.5 8.25" stroke="var(--prevnext-color-angle)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"&gt;&lt;/path&gt;        &lt;/svg&gt;    &lt;/a&gt;  &lt;/div&gt;</content:encoded><guid isPermaLink="false">https://mr-destructive.github.io/techstructive-blog/django-deploy-railway</guid><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate></item></channel></rss>