<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://mr-destructive.github.io//TechBlog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mr-destructive.github.io//TechBlog/" rel="alternate" type="text/html" /><updated>2021-07-07T11:48:11+05:30</updated><id>https://mr-destructive.github.io//TechBlog/feed.xml</id><title type="html">Techstructive Blog</title><subtitle>The blog for Constructive Technology. </subtitle><author><name>Meet Gor</name></author><entry><title type="html">Vim: Enhancing Movement Speed</title><link href="https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Enhancing-Movement-speed.html" rel="alternate" type="text/html" title="Vim: Enhancing Movement Speed" /><published>2021-07-05T19:54:30+05:30</published><updated>2021-07-05T19:54:30+05:30</updated><id>https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Enhancing-Movement-speed</id><content type="html" xml:base="https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Enhancing-Movement-speed.html">&lt;p&gt;&lt;img src=&quot;/TechBlog/assets/img/vimove.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;OK! Vim and movent are like bread and butter or failed brakes. To become a proficient Vim user, you need to move in Vim very effectively. You don’t have to think about doing certain things, your fingertips should automatically move without wasting time thinking about it. I am sure, it takes time and effort but OH! it is so rewarding in the end.&lt;/p&gt;

&lt;h3 id=&quot;why-h-j-k-l&quot;&gt;Why H J K L?&lt;/h3&gt;
&lt;p&gt;First things first, unmap arrow keys and make a habit of using h,j,k, and l. Yes, this would not make any sense in the initial stage but that will make no sense for not using it later. 
The thing with H J K L is that they are quite flexible to work with and if you use it with numbers you would navigate much faster than arrow keys. Such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10j&lt;/code&gt; will move you 10 lines down at a time in normal mode. These keys are used with many of the other key shortcuts and commands which just make it most important to begin learning to move around in Vim with H J K L.&lt;/p&gt;

&lt;h2 id=&quot;moving-horizontally&quot;&gt;Moving Horizontally.&lt;/h2&gt;
&lt;p&gt;This is quite the common movement that every programmer uses most of the time. This is also a much-neglected part when movement in Vim is concerned. To the basics, we use the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w&lt;/code&gt;   -&amp;gt;  &lt;strong&gt;move forward by a word (considering punctuations as separate words).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W&lt;/code&gt;   -&amp;gt;  &lt;strong&gt;move forward by a word (punctuations ignored).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move backward by a word (considering punctuations as separate words).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move backward by a word (punctuations ignored).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to end of a word (considering punctuations as separate words).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to end of a word (punctuations ignored).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to the beginning of a sentence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt;  -   &lt;strong&gt;move to the end of a sentence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Those are the most useful and common commands for moving across the line. Don’t forget to use the number before the command to repeat the task for that number of times. Like for example, if you would like to go 6 words ahead type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6w&lt;/code&gt;. This can improve your thinking and typing as well, good signs of a programmer Eh!&lt;/p&gt;

&lt;h2 id=&quot;moving-vertically&quot;&gt;Moving Vertically.&lt;/h2&gt;

&lt;p&gt;To move vertically we can imagine moving within a file or the block of code. For moving in a file, the following are some useful commands.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gg&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the beginning of a file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move to the end of a file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + e&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;move the screen down without moving the cursor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + y&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the screen up without moving the cursor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + f&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move forward one entire screen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + b&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move backward one entire screen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + d&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move forward half screen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + u&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move backward half screen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This just was moving around the screen and now a bit programmatic movement. We will see some keystrokes to move in code blocks or code snippets very efficiently.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gd&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the local declaration of any code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gD&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the global declaration of any code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move between pairs of ( ), { }, [ ] or any other type of such braces.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the next paragraph/ code block/ function/ etc)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;}&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the previous paragraph/ code block/ functions/ etc)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fa&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the next occurrence of the character ‘a’ in a sentence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fa&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the previous occurrence of the character ‘a’ in a sentence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ta&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to before of the next occurrence of the character ‘a’ in a sentence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ta&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to after of the previous occurrence of the character ‘a’ in a sentence.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above might be quite handy key shortcuts in moving in a large code file. Even in files with complex variable names and structures, this can be quite handy.&lt;/p&gt;

&lt;h2 id=&quot;search-and-navigation&quot;&gt;Search and navigation.&lt;/h2&gt;
&lt;p&gt;Searching is quite a time-consuming task, especially when the code is quite complex and has a lot of variables and all. Vim shines in many of such aspects where people think it’s dead. It rises from the ashes to produce a performance-driven experience like any other modern IDEs though it requires a bit of research:) Here are some commands that will make searching and navigating around it quite a lot easier.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; -&amp;gt; &lt;strong&gt;next occurrence of the word under the cursor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; -&amp;gt; &lt;strong&gt;previous occurrence of the word under the cursor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;  -&amp;gt; &lt;strong&gt;next occurrence of the word searched pattern.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;  -&amp;gt; &lt;strong&gt;previous occurrence of the word searched pattern.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The above commands will also work if you search the pattern from the command mode.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pattern&lt;/code&gt;  or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?pattern&lt;/code&gt; Enter and navigate to the next(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;) and previous(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;) occurrence of that pattern match.&lt;/p&gt;

&lt;h2 id=&quot;moving-across-files&quot;&gt;Moving across files.&lt;/h2&gt;

&lt;p&gt;Moving across files without any plugins or file explorer is often considered tricky or impossible for some people but there is a way. You can switch between files using the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + O&lt;/code&gt;  -&amp;gt;   &lt;strong&gt;move in the previously opened file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + I&lt;/code&gt;  -&amp;gt;  **move in the next file. **&lt;/p&gt;

&lt;p&gt;We also can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + ^ &lt;/code&gt; to move the previous two opened files.&lt;/p&gt;

&lt;p&gt;If you want to switch from buffers, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bn&lt;/code&gt; for moving into the next buffer, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bp&lt;/code&gt; to move in the previous buffer. You always have an option to move from a buffer using the file name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:b filename&lt;/code&gt; or using the index as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bindex&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;moving-between-tabs&quot;&gt;Moving between Tabs.&lt;/h2&gt;

&lt;p&gt;People rarely use Tabs as far as I have seen, but they are quite useful and provide the polish off just as robust IDEs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tabnew filename&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;create a Tab of a file.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gt&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the next tab.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngt&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the nth tab.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gT&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move to the previous tab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tabo&lt;/code&gt;  -&amp;gt; **close all the tabs except the current one.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tabc&lt;/code&gt;  -&amp;gt; &lt;strong&gt;close the tab.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tabm n&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the current tab to nth position.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;movement-in-marks&quot;&gt;Movement in Marks.&lt;/h2&gt;

&lt;p&gt;Marks are used for some quite large files and code-bases. It is used to move from one mark(kind of a bookmark) to another using few key commands, marks are generally created when you would go to a particular code block or any part of the file again and again. Some of the quick navigation using maps are the following.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mn&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;set the current position as mark ‘a’.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;` &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the position of mark ‘n’.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;` &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to the position where vim was last exited.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;` &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the position when the last edit was made in the file.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;split-windows-movement&quot;&gt;Split Windows Movement&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + w + r&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the split down.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + w + R&lt;/code&gt;  -&amp;gt; &lt;strong&gt;move the split up.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + w + h&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the left split.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + w + j&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the split down.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + w + k&lt;/code&gt;  -&amp;gt; &lt;strong&gt;jump to the upper split.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + w + l&lt;/code&gt;  -&amp;gt;  &lt;strong&gt;jump to the left split.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use Caps H J K L to move the leftmost, bottom, uppermost, rightmost split respectively. 
That just was quick to make you enough faster than previous hassles.&lt;/p&gt;

&lt;p&gt;That was probably it, these were some tricks and shortcuts to move around Vim pretty effectively and smoothly. Moving around Vim can be quite complicated at once, but it’s just finding the key shortcuts to make you feel and glid in VIm. There might be quite a lot of shortcuts missing, If you have any quicker shortcuts, Please let me know in the comments.  Happy Viming :)&lt;/p&gt;</content><author><name>Meet Gor</name></author><summary type="html">Introduction OK! Vim and movent are like bread and butter or failed brakes. To become a proficient Vim user, you need to move in Vim very effectively. You don’t have to think about doing certain things, your fingertips should automatically move without wasting time thinking about it. I am sure, it takes time and effort but OH! it is so rewarding in the end.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//TechBlog/assets/img/vimove.png" /><media:content medium="image" url="https://mr-destructive.github.io//TechBlog/assets/img/vimove.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Vim: Keymapping Guide</title><link href="https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Keymapping.html" rel="alternate" type="text/html" title="Vim: Keymapping Guide" /><published>2021-07-05T19:47:34+05:30</published><updated>2021-07-05T19:47:34+05:30</updated><id>https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Keymapping</id><content type="html" xml:base="https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Keymapping.html">&lt;p&gt;&lt;img src=&quot;/TechBlog/assets/img/vimkmap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Keymapping or Key binding is a process in which a user or a system can assign certain keys or commands to perform a particular task or commands. This can be quite useful in Vim as well as in other text editors to avoid some repetitive tasks and save time. In Vim this can be a great power to have for programmers as it can be really very flexible to set up for any programming language and it’s 
 environment.&lt;/p&gt;

&lt;p&gt;In Vim, you can map a particular keystroke combination to trigger a command or any operation. You can also map a key in place of a weird key combination as well. You can map a key to integrate several commands and make it run at a single key or without much of a hassle. Key Mapping is quite powerful in Vim, only your creativity and imagination are the limits here. Vim can really shine in such aspects where the user has the freedom to tailor the editor and his development environment as per his/her needs.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-structure-of-key-binding&quot;&gt;Understanding the structure of Key binding&lt;/h2&gt;
&lt;p&gt;You can basically map a key depending on the current mode you are in. So that means you can have the same key mapped to different commands depending on the mode. That is really flexible and powerful. Vim allows you to basically map in almost every mode such as normal, insert, visual, command, and any other existing modes. Let us see what a basic key mapping looks like.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{mode}{attribute}map {key} {command}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The key mapping is broken down by adding the mode to map the key, an optional attribute to change/modify the way the mapping behaves and we finally have the key and the command pair. If you want to test a map you can temporarily map in the command mode using the syntax for the map command or if you want a permanent mapping, you can add the mappings in your vimrc file.&lt;/p&gt;

&lt;p&gt;For a basic example let us map c to paste from the clipboard.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:map c &quot;+p&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command maps the “c” key in the &lt;strong&gt;normal/visual mode&lt;/strong&gt; by default to paste the contents from the clipboard. It is just an example of how a basic key mapping or binding can be used to save your time and efforts. This is a very small example to demonstrate the concept of mapping in Vim but it scales quite fantastically and smoothly.&lt;/p&gt;

&lt;p&gt;Now let’s see how to view the mapping inside of the current vim buffer. We can simply type map, imap, or nmap in the command mode to view the mappings in the respective modes. This will display the maps which are currently present inside of the vim buffer, some might be temporary and most of them will be permanent.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:map 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you type in map being in the command mode, it will list out the maps. If you want to stop seeing the list just press q, and you will be back in the editor. You can also view the maps in the normal, visual, insert, or any other modes by prefixing n, v, i, or other modes with map.&lt;/p&gt;

&lt;h2 id=&quot;key-mapping-in-modes&quot;&gt;Key Mapping in Modes&lt;/h2&gt;
&lt;p&gt;To map a key binding explicitly in the normal mode or any other modes, we have to prefix the word such as n for normal, v for visual or i for insert, and so on. The map will only work in the provided mode so the same keys may have several different maps depending on the current mode, but that can create a bit of confusion so avoid doing that. Let’s map a key in the normal mode for example,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:nmap &amp;lt;C-s&amp;gt; :w&amp;lt;CR&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is pretty bad for Vim beginners as it will spoil the real Vim experience of saving with :w, If you feel comfortable using Ctrl + s to save a file, the above map will be perfect. It will map the key Ctrl + s by pressing :w and then pressing enter to save changes to the file.&lt;/p&gt;

&lt;p&gt;We can also map certain non-alphabetical keys such as CTRL, ALT, and others, it will help you in saving time to leave a mode and enter the mode again to edit the text. The following is a perfect example of such.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:imap &amp;lt;C-c&amp;gt; &amp;lt;ESC&amp;gt;&quot;+pa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above command is &lt;strong&gt;mapped in insert mode&lt;/strong&gt; as the mode is set to insert at the command’s beginning. The CTRL+c keys are mapped to first Escaping out of insert mode and then pasting from the “+ register which is the device clipboard here. In the end, we again get back to insert mode just to the right of the current cursor position. So, that is how we can map the keys to do the task and save a bit of time.&lt;/p&gt;

&lt;h2 id=&quot;adding-keymaps-in-vimrc-file&quot;&gt;Adding Keymaps in vimrc file&lt;/h2&gt;
&lt;p&gt;So you can now map in any available modes in Vim and test it out in te=he current buffer, but if you notice when you close the buffer, your custom keymaps will not be functioning as they remain in the buffer until you close it. To make it permanent you need to type the exact map command to the vimrc file. Just don’t add “:” as it is not a command mode, it should be only the pure command of the map.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &amp;lt;C-s&amp;gt; :w&amp;lt;CR&amp;gt;
nmap &amp;lt;C-p&amp;gt; &quot;+p
vmap &amp;lt;C-y&amp;gt; &quot;+y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above commands are pasted in the vimrc file. These keymaps once sourced will stay in permanently unless you remove them from the file.&lt;/p&gt;

&lt;h2 id=&quot;keymap-modifications&quot;&gt;Keymap Modifications&lt;/h2&gt;
&lt;p&gt;We can also add extra arguments to the keymaps such as noremap and remap and others. In remap, the keymap is recursive which means the key pair will get mapped to the keys mapped already somewhere. The keymap will redefine its map depending on the already existing maps.  It is preferred to use noremap as it will not mix up the existing maps and have a fresh key binding. The mapping in Vim is quite versatile and there are quite a lot of modifications you could do to make your key binding feel and work according to you. So for further un depth understanding of modifications of keymap in Vim you can check out their documentation  [here](https://vim.fandom.com/wiki/Mapping_keys_in_Vim_-&lt;em&gt;Tutorial&lt;/em&gt;(Part_1%29).&lt;/p&gt;

&lt;h2 id=&quot;keymapping-usecases&quot;&gt;Keymapping Usecases&lt;/h2&gt;
&lt;p&gt;Now, it’s entirely up to you to make keymaps according to your preference and choice. You can use your creativity and knowledge to make powerful and efficient keymaps.&lt;/p&gt;

&lt;p&gt;For some insights, I’d like to give in some cool and productive keymaps which I personally use very frequently in coding a particular programming language.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap py :!python %&amp;lt;CR&amp;gt;                          &quot; Python run macro
nnoremap cpp :!c++ % -o %:r &amp;amp;&amp;amp; ./%:r &amp;lt;CR&amp;gt;           &quot; C++ compile and run macro
nnoremap sh :!chmod +x % &amp;amp;&amp;amp; source %&amp;lt;CR&amp;gt;            &quot; Bash sourcing macro 
nnoremap c :!clang % -o %:r &amp;amp;&amp;amp; ./%:r &amp;lt;CR&amp;gt;           &quot; C compile and run macro 
nnoremap jv :!javac % &amp;amp;&amp;amp; java %:r &amp;lt;CR&amp;gt;              &quot; Java compile and run macro
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above mapping will run the file or compile and run the file you are currently editing in Vim. That is just an overview of how you can use key mappings in Vim for any programming language or tool. Vim allows you to modify and make the keys do the heavy lifting very easily and save a lot of time and frustration. This is how you implement DRY(don’t repeat yourself) perfectly. I personally think this is just perfect to do certain things which are quite common and sometimes daunts you to do this again. So just have a look and play around with Vim keymaps, it is the power with which one can excel in saving time and energy. This is just flawless. OK, That was too much from my side.&lt;/p&gt;

&lt;h2 id=&quot;keymapping-and-macros&quot;&gt;Keymapping and Macros&lt;/h2&gt;
&lt;p&gt;Some Keymappings provided above are quite interesting for a person trying to understand macros and key binding. A macro is a bunch of commands packed in together to access it very efficiently, Not the exact definition, but still, it just means to simplify things and saves time. Keymapping is the same thing but to map with the keys.&lt;/p&gt;

&lt;p&gt;From some snippets and explanations of VIm keymaps, it must be easier now for a beginner to understand Keymappings in Vim and how to customize accordingly.&lt;/p&gt;

&lt;p&gt;I hope it helped, Thank you for listening to my understanding of Vim keymapping. Below are some of my keymaps currently in vim for windows. Some of them were already shown in the code snippets.
&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1623654888460/pBfJO2jkZ.png&quot; alt=&quot;vimkmap.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, Keymaps are quite powerful and can be a bit difficult to set up in a single try. Keep experimenting with keymaps and make Vim the powerhouse of productivity and customization. Happy Viming :)&lt;/p&gt;</content><author><name>Meet Gor</name></author><summary type="html">Introduction Keymapping or Key binding is a process in which a user or a system can assign certain keys or commands to perform a particular task or commands. This can be quite useful in Vim as well as in other text editors to avoid some repetitive tasks and save time. In Vim this can be a great power to have for programmers as it can be really very flexible to set up for any programming language and it’s environment.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//TechBlog/assets/img/vimkmap.png" /><media:content medium="image" url="https://mr-destructive.github.io//TechBlog/assets/img/vimkmap.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Vim: Terminal Integration</title><link href="https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Terminal.html" rel="alternate" type="text/html" title="Vim: Terminal Integration" /><published>2021-07-05T19:40:42+05:30</published><updated>2021-07-05T19:40:42+05:30</updated><id>https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Terminal</id><content type="html" xml:base="https://mr-destructive.github.io//TechBlog/2021/07/05/Vim-Terminal.html">&lt;p&gt;&lt;img src=&quot;/TechBlog/assets/img/vimterm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;vim-and-terminal&quot;&gt;Vim and Terminal!?&lt;/h2&gt;
&lt;p&gt;Vim was made to work with the command line. Many beginners do not understand what are the true capabilities of Vim, myself included:) Vim can run terminal commands without leaving the text editor, open an instance of a terminal, work with shell environments, and other things depending on the use case.&lt;/p&gt;

&lt;h2 id=&quot;running-terminal-shell-commands-from-within-vim&quot;&gt;Running Terminal/ shell commands from within Vim&lt;/h2&gt;

&lt;p&gt;You can run the commands from inside of Vim by just using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:!&lt;/code&gt; before the command, this means you have to be in command mode. Just after being in command mode, the ! or bang operator will execute the command typed after it from the terminal(Linux/ macOS) or your default shell(Windows -&amp;gt; CMD/Powershell).&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!pwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above command from vim will redirect to the terminal and show the output of the command and return on pressing any key. In this case, it will execute the PWD command and just wait for the user to enter any key to return to Vim.&lt;/p&gt;

&lt;p&gt;The following is an example of how it could be used from Vim in Windows using Powershell as the default shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1624885870237/Ie5C-3u1B.gif&quot; alt=&quot;Animation.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Windows, dir is equivalent of ls for Linux. That was not the best example of how a terminal can be used at its best, You can also use a logical operator from within vim to run multiple commands at once.&lt;/p&gt;

&lt;h3 id=&quot;running-programs-code-from-vim-on-terminal&quot;&gt;Running programs/ code from Vim on terminal&lt;/h3&gt;

&lt;p&gt;This becomes quite a great feature for making Vim from a text editor to an IDE, this can be paired with Keymaps i.e when the user types certain keys, the command gets executed making the code run from the terminal. I have already used this feature to set up Vim for python, bash, and other programming languages. Also, I have written an article about  &lt;a href=&quot;https://dev.to/mrdestructive/vim-keymapping-guide-3olb&quot;&gt;keymapping&lt;/a&gt;  and Vim setup for  &lt;a href=&quot;https://dev.to/mrdestructive/setting-up-vim-for-python-ej&quot;&gt;Python&lt;/a&gt;  and  &lt;a href=&quot;https://techstructiveblog.hashnode.dev/vim-setup-for-bash-scripting&quot;&gt;Bash&lt;/a&gt;, this will give you an idea of how to setup vim for any programming language.&lt;/p&gt;

&lt;p&gt;Vim can really shine in this kind of feature as it just becomes flawless and a smooth experience even for a beginner. We just have to run the compile the code and run its executable/ output file, rather for python and other interpreted languages, we have to just pass the file name to the interpreter and that’s it.&lt;/p&gt;

&lt;h2 id=&quot;opening-instance-of-terminal-within-vim&quot;&gt;Opening instance of Terminal within Vim.&lt;/h2&gt;

&lt;p&gt;Vim can also create an instance of the terminal within its window by making a split. This is quite similar to VS Code and other Text editors that have the functionality to create an instance of the terminal within itself. This feature is useful for developing complex systems and depending on the use case, it can be quite important and efficient as well.&lt;/p&gt;

&lt;p&gt;The terminal can be created in various ways the most preferred way is by typing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term&lt;/code&gt; from Vim. 
This will create a horizontal split from the current editor and split it into half. You can change the size of the split using the mouse according to your preference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1624888468392/wR0JT8SBN.gif&quot; alt=&quot;vimtermsplit.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here Vim has certain variables and shortcuts to make things even simpler, say you want to parse the current file to the terminal for execution. You can surely type the name manually or you can be a bit smarter and use % instead, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; symbol will parse the file name along with the extension in the terminal. Also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%:r&lt;/code&gt; will parse filename without the extensions(.txt/.py/etc) to the terminal.&lt;/p&gt;

&lt;p&gt;There are many things you can do with terminals surely, but with Vim that even goes further than the limits. Terminal/command line is quite important in any development environment as it is an interface for the user to interact with the Operating System. Vim is quite powerful and behaves as a gecko for programmers because it changes itself according to our needs flawlessly and &lt;strong&gt;efficiently&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1624891655340/5f81Dpp_O.gif&quot; alt=&quot;vimpython.gif&quot; /&gt;
Integrating Terminal into a Text Editor truly lights up the environment for development. It becomes an easy and enjoyable experience to test out the code without wasting much time on the actual execution process. Surely it needs time to set up the environment to speed things, for that understanding of the programming and development environment is required. Happy Viming :)&lt;/p&gt;</content><author><name>Meet Gor</name></author><summary type="html">Vim and Terminal!? Vim was made to work with the command line. Many beginners do not understand what are the true capabilities of Vim, myself included:) Vim can run terminal commands without leaving the text editor, open an instance of a terminal, work with shell environments, and other things depending on the use case.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//TechBlog/assets/img/vimterm.png" /><media:content medium="image" url="https://mr-destructive.github.io//TechBlog/assets/img/vimterm.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Setting up Vim for Python</title><link href="https://mr-destructive.github.io//TechBlog/2021/06/06/Vim-for-Python.html" rel="alternate" type="text/html" title="Setting up Vim for Python" /><published>2021-06-06T11:35:25+05:30</published><updated>2021-06-06T11:35:25+05:30</updated><id>https://mr-destructive.github.io//TechBlog/2021/06/06/Vim-for-Python</id><content type="html" xml:base="https://mr-destructive.github.io//TechBlog/2021/06/06/Vim-for-Python.html">&lt;p&gt;&lt;img src=&quot;https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1623332093524%2Fdvd_SENBt.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;amp;w=1920&amp;amp;q=75&quot; alt=&quot;Vim set up for Python&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Vim is quite a powerful text editor which can add performance to the already fast typed language Python. Vim can be highly customizable and efficient to use as it has the power of &lt;strong&gt;adding custom plugins and plugins managers, key mappings&lt;/strong&gt;, and the most critical weapon of vim - Access to the terminal straight away.
This is not a full-featured guide of using vim for python, it’s just a quick setup for using python on vim blazingly fast!!&lt;/p&gt;

&lt;h2 id=&quot;plugin-managers&quot;&gt;Plugin Managers&lt;/h2&gt;
&lt;p&gt;So let us start making Vim, the text editor suitable for a python programmer. Firstly we’ll need the vim plugin manager. There are different plugin managers out there, each of them has the same purpose to install, upgrade and manage the plugins for vim. You can install any one of them and get up and running.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vim.org/scripts/script.php?script_id=4828&quot;&gt;Vim Plug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some of the finest and well-supported plugin managers in vim. You can use any of these plugin managers, and get started by installing some plugins.&lt;/p&gt;

&lt;h2 id=&quot;jedi-vim--auto-completion&quot;&gt;JEDI-VIM- Auto completion&lt;/h2&gt;
&lt;p&gt;Firstly I will like to install Jedi for code completion in Python. The plugin can be simple and straightforward to install using any of the above plugin managers. Jedi-Vim provides some neat and clean** syntax analytics and autocompletion for Python in Vim**. You’ll find the docs and installation process here  &lt;a href=&quot;https://github.com/davidhalter/jedi-vim&quot;&gt;JEDI-VIM &lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nerdtree-file-manager&quot;&gt;NERDTree-FIle manager&lt;/h2&gt;
&lt;p&gt;Next, It would be great if we install a file manager for managing the files and folders in the code directories. We can simply use the Nerdtree plugin for this. NerdTree is quite a &lt;strong&gt;fantastic plugin for file management in Vim&lt;/strong&gt;. It simply makes Vim feel like VS Code. The installation and docs can be found here  &lt;a href=&quot;https://github.com/preservim/nerdtree&quot;&gt;NERDTree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nerdtree commands can be longer to write, for that let’s start mapping and for that, we can start editing our Vimrc.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set number
syntax enable
filetype indent on
set tabstop=4
set softtabstop=4
set autoindent 
set encoding=utf-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This can be some addition to your existing vimrc as you might have a setup for plugin managers. You can choose the color scheme of your choice, don’t waste time selecting the color scheme. Feel free and modify the vimrc according to your knowledge and choice.&lt;/p&gt;

&lt;h2 id=&quot;keymappings&quot;&gt;Keymappings&lt;/h2&gt;
&lt;p&gt;We move on to the Key mappings for NERDTree and other features. You can make mappings generally in the normal mode but there might be cases where you need to use maps for visual mode or insert mode as well, that entirely depends on the user :)&lt;/p&gt;

&lt;p&gt;To map in normal mode, we’ll its command to be specific:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &amp;lt;C-n&amp;gt; :NERDTree&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will map CTRL+n to open the NERDTree file manager to the left, saving a bit of time and avoiding frustration. Feel free to add any keymap of your choice, this is just for demonstration. 
You can further automate NERDTree for switching between tabs because it makes you type CTRL+w twice, you can reduce that to just typing w.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap w:&amp;lt;C-w&amp;gt;&amp;lt;C-w&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;integrated-terminal-macros&quot;&gt;Integrated Terminal Macros&lt;/h2&gt;
&lt;p&gt;We can open a terminal window like a split between the editor. We can simply use the command :terminal to split the window horizontally, where the upper split will be terminal and the down window will have the editor. This is quite a neat feature of Vim in that it blends with the terminal so well so that we can switch between the terminal and the editor very quickly. For that, you can create a macro if you need to fire up a terminal again and again.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &amp;lt;C-t&amp;gt; :terminal&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you place the above macro in your vimrc and then type Ctrl+t, the exact thing will happen to fire up a terminal split but with fewer keystrokes and without leaving the normal mode. 
Also, the NERDTree macro can be also fruitful with this as it will make a full-blown IDE-like feeling inside of Vim.
&lt;img src=&quot;https://s6.gifyu.com/images/screenrecording.gif&quot; alt=&quot;Demonstrate macros for NERDTree and terminal split&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-the-code-with-a-snap&quot;&gt;Running the Code with a snap&lt;/h2&gt;

&lt;p&gt;We can automate the process of running python scripts inside of vim. Instead of typing out the entire command for executing python script from vim. We can use keymaps for it as they can significantly boost the time required to run and debug the code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap py :!python %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a small map but can save a lot of time and give some motivation to use vim as you run the code blazingly faster than other editors. I have used py, but it can cause some problems as p is already mapped for pasting. So it’s better to use other key combinations such as ty, yh, or any other key combination of your choice. Try it out and add your own flavor that’s how we all learn.&lt;/p&gt;

&lt;p&gt;So, that’s the basic set-up for python on vim, you can make more custom mappings, find more plugins and test out which work out the best for your workflow. Happy Coding and Viming ;)&lt;/p&gt;</content><author><name>Meet Gor</name></author><summary type="html">Introduction Vim is quite a powerful text editor which can add performance to the already fast typed language Python. Vim can be highly customizable and efficient to use as it has the power of adding custom plugins and plugins managers, key mappings, and the most critical weapon of vim - Access to the terminal straight away. This is not a full-featured guide of using vim for python, it’s just a quick setup for using python on vim blazingly fast!!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1623332093524%2Fdvd_SENBt.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=1920&amp;q=75" /><media:content medium="image" url="https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1623332093524%2Fdvd_SENBt.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=1920&amp;q=75" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Setting up Vim for BASH Scripting</title><link href="https://mr-destructive.github.io//TechBlog/2021/06/06/Vim-for-BASH.html" rel="alternate" type="text/html" title="Setting up Vim for BASH Scripting" /><published>2021-06-06T04:52:07+05:30</published><updated>2021-06-06T04:52:07+05:30</updated><id>https://mr-destructive.github.io//TechBlog/2021/06/06/Vim-for-BASH</id><content type="html" xml:base="https://mr-destructive.github.io//TechBlog/2021/06/06/Vim-for-BASH.html">&lt;p&gt;&lt;img src=&quot;https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1623323683461%2FgNzWLnAJ1.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;amp;w=1920&amp;amp;q=75&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;vim-and-bash&quot;&gt;Vim and BASH?&lt;/h2&gt;
&lt;p&gt;Bash Scripting is a powerful skill to have as a programmer because we find Linux almost everywhere and to get through it you must have a command over its interface which is generally the BASH shell. Vim is a great option for doing this, or probably the best out there! Because Vim is pre-installed in almost every Linux distribution. This is not an in-depth setup for BASH on Vim, it is a simple editorial on starting up BASH scripting on the Vim editor. So without wasting time on “Vim features” let’s dive in with the setup for BASH in Vim.&lt;/p&gt;

&lt;h2 id=&quot;boilerplate-macro&quot;&gt;Boilerplate macro&lt;/h2&gt;
&lt;p&gt;Setting up a bash script doesn’t require much code but still in some cases it can be a bit hassle and to avoid the repetitive task, one can easily set up a macro for the boilerplate BASH script.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap bs i#!/bin/bash/&amp;lt;ESC&amp;gt;o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ok that was pretty dumb but it can scale pretty quickly and it will be nice to tailor it as per needs, here’s some snippet with function pre-loaded.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap bs i#!/bin/bash/&amp;lt;ESC&amp;gt;o&amp;lt;ESC&amp;gt;ofunction main(){&amp;lt;ESC&amp;gt;o&amp;lt;ESC&amp;gt;o}&amp;lt;ESC&amp;gt;ki&amp;lt;S-TAB&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://s6.gifyu.com/images/bsclip.gif&quot; alt=&quot;type bs to load boiler-plate code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the key bs is typed in normal mode, you enter into insert mode as per the command macro, then we type in the required text and escape to move to the next line and continue the same stuff. This could be extended further like making some input or printing out some text and any other formatted text that you could think it as repetition.&lt;/p&gt;

&lt;h2 id=&quot;sourcing-scripts&quot;&gt;Sourcing Scripts&lt;/h2&gt;
&lt;p&gt;So, after creating the file, sourcing the script, and running it can be a bit slow for some people, as you have to go to the terminal and toggle in the permission to run the script and then run, But pull on your seatbelts as this is VIM! You can die due to slowness!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap sh :!chmod +x % &amp;amp;&amp;amp; source %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://s6.gifyu.com/images/shclip.gif&quot; alt=&quot;type sh to run script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the sh keys are typed in the normal mode, the preceding command after ! (bang) will be executed in the terminal, the &amp;amp;&amp;amp; keywords will execute the second command only when the first command is successfully executed.
 That just can so fast! Imagine doing this for long scripts and especially for debugging, it will waste 2 minutes every time you leave the editor and for 10 times you do the debugging, you will carelessly was roughly 20 minutes! Improve your debugging skills surely :)&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;
&lt;p&gt;There are very few plugins out there for BASH as for VIM, but it’s quite to write scripts even without any plugins. One of the most supported and popular plugins for BASH in Vim is  &lt;a href=&quot;https://www.vim.org/scripts/script.php?script_id=365&quot;&gt;Bash-Support-Vim&lt;/a&gt; for auto-completion and &lt;a href=&quot;https://www.shellcheck.net&quot;&gt;Shell-Check&lt;/a&gt; for finding/correcting any bugs or error in the script . 
The mentioned plugin is quite awesome and it can greatly improve the speed of scripting for BASH, some commands such as shortcuts for writing if-else, while, for loops, commenting and other aspects in the scripting. The thorough documentation for such commands is also provided by the  &lt;a href=&quot;https://wolfgangmehner.github.io/vim-plugins/bashsupport.html&quot;&gt;plugin website&lt;/a&gt;. 
This can be used for autocompleting keywords and writing nested if-else and other logical operators in BASH scripting. Again, you can do absolutely fine without plugins in Vim as it is heavily customizable to the user’s need and can be very rewarding to set up your own configuration for BASH. You can use standard Vim(barebones) for auto-completion as well with the command CTRL+N and CTRL-P to move down and up respectively.&lt;/p&gt;

&lt;h2 id=&quot;some-more-tricks&quot;&gt;Some More Tricks&lt;/h2&gt;
&lt;p&gt;BASH in Vim can be quite versatile to use as it provides some custom addons to make the script more functional and easier to understand. Some tricks such as using autocompletion can be quite inconvenient to use at once but it can get really smooth after some runs at writing the scripts.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In BASH Scripts there are quite a lot of brackets to play with that’s why to jump around swiftly around such parentheses or brackets you can use &lt;strong&gt;% to move from the opened to closed brackets or vice versa&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You can execute any terminal command from Vim, be sure to be in command mode and press ! after the command, you would like to execute. This will run the command from the terminal and you don’t have to leave the editor, it saves a ton of time and it’s blazingly fast.&lt;/li&gt;
  &lt;li&gt;With the above trick, you kind of have a superpower within Vim to make, build, source, run the files or scripts within Vim, that is not repetition but it can run bash within bash. Ok! that’s was pretty fast. Don’t die of quickness now!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing BASH scripts in Vim can be also boosted by using some built-in commands such as adding comments for multiple lines at once and some unexplored stuff which can be learned in the way to understanding the flow of Vim and BASH together. Happy Coding and Viming :)&lt;/p&gt;</content><author><name>Meet Gor</name></author><summary type="html">Vim and BASH? Bash Scripting is a powerful skill to have as a programmer because we find Linux almost everywhere and to get through it you must have a command over its interface which is generally the BASH shell. Vim is a great option for doing this, or probably the best out there! Because Vim is pre-installed in almost every Linux distribution. This is not an in-depth setup for BASH on Vim, it is a simple editorial on starting up BASH scripting on the Vim editor. So without wasting time on “Vim features” let’s dive in with the setup for BASH in Vim.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1623323683461%2FgNzWLnAJ1.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=1920&amp;q=75" /><media:content medium="image" url="https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1623323683461%2FgNzWLnAJ1.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=1920&amp;q=75" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why and How to make and use Vim as a text editor and customizable IDE</title><link href="https://mr-destructive.github.io//TechBlog/2021/02/20/Vim-Guide.html" rel="alternate" type="text/html" title="Why and How to make and use Vim as a text editor and customizable IDE" /><published>2021-02-20T15:05:20+05:30</published><updated>2021-02-20T15:05:20+05:30</updated><id>https://mr-destructive.github.io//TechBlog/2021/02/20/Vim-Guide</id><content type="html" xml:base="https://mr-destructive.github.io//TechBlog/2021/02/20/Vim-Guide.html">&lt;p&gt;![Vim Text-editor](https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1624085488326%2FcxHH-7IRC.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;amp;w=1920&amp;amp;q=75&lt;/p&gt;

&lt;p&gt;We all are asked to use visual studio code and other rich looking editors as a beginners text editor or an IDE but that makes a habit of a rich and pleasing interface of running and debugging programs, and that is the reason we don’t feel good to use command line or the terminal. Terminal or Command line are quite important to learn and are powerful as well.&lt;/p&gt;

&lt;p&gt;Vim is a text editor, not any text editor but a special and one of the fastest out there if you use it wisely. Vim can be used in the terminal which means it can run terminal commands inside the editor interface. That makes it quite a great option to improve your terminal command skills and also for enhancing your Linux knowledge. You can run program files from vim itself just with a few keystrokes. This text editor is preinstalled in most Linux distributions and hence you could quickly edit some files without going anywhere.&lt;/p&gt;

&lt;p&gt;So that being said, vim is not easy to learn, you have to put some effort to reap the fruits of saving time in the longer run. It takes time to get used to the commands and key combination of Vim.&lt;/p&gt;

&lt;h2 id=&quot;download-vim&quot;&gt;Download VIM&lt;/h2&gt;

&lt;p&gt;But, let us get our feet wet in learning a few commands in Vim.&lt;/p&gt;

&lt;p&gt;To download vim you can go to the official  &lt;a href=&quot;https://www.vim.org/download.php&quot;&gt;Vim website&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Firstly let us understand how to open vim from the command line or the terminal&lt;/p&gt;

&lt;p&gt;If you are on windows you have to add the vim.exe file’s path to the environment variable PATH. After that open CMD or terminal for windows 10 and type vim and enter. You are in Vim.&lt;/p&gt;

&lt;p&gt;If you are in Linux or macOS, then open the terminal and type vim and enter.&lt;/p&gt;

&lt;p&gt;After you are in Vim, you will surely be trying to type something right? else you are not a geek ; )&lt;/p&gt;

&lt;h2 id=&quot;vim-basics&quot;&gt;VIM Basics&lt;/h2&gt;

&lt;p&gt;You won’t see anything happening even if you are typing. This is because are 4 basic modes in Vim, understand it like a room.  The modes are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Normal Mode&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Insert Mode&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Command Mode&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Visual Mode&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wait for a second, you should learn how to move in vim first but you cannot learn everything at once, So take it bit by bit.&lt;/p&gt;

&lt;p&gt;To navigate around vim like blazing fast you can use h,j,k, and l.  I know it’s wired but you will get used to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;h&lt;/strong&gt;  -&amp;gt; move left.    ( hop left)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;l&lt;/strong&gt;   -&amp;gt; move right.   (opposite of left)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;k&lt;/strong&gt;  -&amp;gt; move up.       ( keep it up)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;j&lt;/strong&gt;   -&amp;gt; move down.   ( jump down!!)&lt;/p&gt;

&lt;p&gt;If you want to apply certain movements several times you can use numbers before hjkl to move the number of times in that direction.&lt;/p&gt;

&lt;p&gt;Let’s say you type 23j , here you will go down 23 lines. You can also use : and number to jump to a particular line of that number, :12 moves you to the 12th line.&lt;/p&gt;

&lt;p&gt;The default mode is the &lt;strong&gt;Normal mode&lt;/strong&gt; where you can navigate in your file, like a passageway between different rooms. Each other mode is accessible via Normal mode. You have to enter normal mode before switching to the other three modes. By default, after opening vim you are in Normal mode. You start inserting text in the file while being in Normal mode but you can replace text and edit the existing text in the file. &lt;strong&gt;Press ESC to enter Normal mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main mode in VIM is &lt;strong&gt;Insert mode&lt;/strong&gt;, where the actual typing and text editing takes place, &lt;strong&gt;Enter i to enter insert mode&lt;/strong&gt;. After entering i you can type anything you want. After you feel satisfied with writing in VIM, you can escape out of the insert mode (room) and enter the normal mode (passageway). Now the biggest question VIM beginners ask &lt;strong&gt;“HOW ON EARTH SHOULD I EXIT OUT OF VIM ??”&lt;/strong&gt; . Take a breath dear, you need to save your file first. To do that let’s explore a different mode.&lt;/p&gt;

&lt;p&gt;The next crucial mode is &lt;strong&gt;Command mode&lt;/strong&gt;, where you have to remember some commands to do something. Let’s continue from where we left. To save our file,  &lt;strong&gt;Press :  and Voila!! you are in Command mode&lt;/strong&gt;. After it depends you want to save the file, quit vim, save the file and quit vim or quit vim without saving the file. OK, that is too much to take in one go. Be sure to be in Command mode to press the following keys (i.e. press colon before any keys if you were in normal mode).&lt;/p&gt;

&lt;p&gt;**w  **     -&amp;gt; save file.&lt;/p&gt;

&lt;p&gt;**q  **      -&amp;gt; quit vim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wq&lt;/strong&gt;     -&amp;gt; save file and quit vim.&lt;/p&gt;

&lt;p&gt;**q! **      -&amp;gt; quit vim without saving the file.&lt;/p&gt;

&lt;p&gt;These are a few of the commands available in VIM :)&lt;/p&gt;

&lt;p&gt;So now let’s talk about &lt;strong&gt;Visual mode&lt;/strong&gt;, the little helper mode (room) to do cut/ copy in VIM. There are many ways to edit or add text in Visual mode. You have options to choose from character by character, line by line, or block by block. &lt;strong&gt;To enter Visual mode press v&lt;/strong&gt;. This gets you into character by character highlighting whether you want to cut the text or copy (yank) the text. After selecting the portion you can either cut that portion or copy it in vim register.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;y&lt;/strong&gt;     -&amp;gt; Copy the selected portion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d&lt;/strong&gt;     -&amp;gt; Cut the selected portion.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;V (Shift+V) to enter Line Visual mode&lt;/strong&gt;, this selects or highlights the portion line by line and not single letter by letter.&lt;/p&gt;

&lt;p&gt;You can also use &lt;strong&gt;Ctrl+V to enter Block Visual mode&lt;/strong&gt;, this selects a block of code.&lt;/p&gt;

&lt;p&gt;Here is a good way to remember switching between basic modes in VIM -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1613912016216/SXavZAkPH.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Switching between basic modes in VIM&lt;/p&gt;

&lt;p&gt;It seems to be quite slower than VS Code, doesn’t it? Ya, I know it’s kinda slow but with time it picks up pace, just like a train. Spend time in VIM and it will be worth it. No Text editor is so powerful as VIM, it is so for a reason. If you are curious to dive deeper just dive in fully or stay in VS Code and your fancy.  There is a great community around VIM and you’ll be happy surely to be a part of it. Oh! The quick fact even VS Code has an extension for VIM ;)&lt;/p&gt;

&lt;h2 id=&quot;some-more-basics&quot;&gt;Some more Basics&lt;/h2&gt;

&lt;p&gt;You can do most of the basic programming using this but to be a bit faster you can use some tweaked commands to do stuff like,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;     -&amp;gt; Enter insert mode to the character at the beginning. ( i puts you in insert mode to the cursor)&lt;/p&gt;

&lt;p&gt;**a **  -&amp;gt; Enter insert mode adjacent right to the cursor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;   -&amp;gt; Enter insert mode at the end of the line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;o&lt;/strong&gt;    -&amp;gt; Enter insert mode a line below cursor.&lt;/p&gt;

&lt;p&gt;O   -&amp;gt; Enter insert mode a line above cursor.&lt;/p&gt;

&lt;p&gt;These commands are an optimized way to enter insert mode in a suitable way. These commands can be used as per needs and quite significantly improve editing speed.&lt;/p&gt;

&lt;p&gt;You can also shift from one mode to Normal mode by pressing Ctrl+C or Ctrl+{. Whatever you feel good with.&lt;/p&gt;

&lt;p&gt;Pasting is a programmer’s everyday task. No, it’s good as a beginner and only if you are not running as it is. In VIM you can paste from your previously copied text using Visual mode or deleted chunk just using p to paste. Remember if you are on a character it will paste on starting from where your cursor is, which means your character on the current cursor will be overwritten. You can also use “0p to paste from the copied buffer.&lt;/p&gt;

&lt;p&gt;If you are pasting from an external source i.e. out of VIM, you have to use “+p . It pastes from the next character from the cursor.&lt;/p&gt;

&lt;p&gt;If you want to search a word in a file, you can use navigation commands like hjkl but there’s a faster way around, If you press / and type the word you are searching for, you will get the first instance of that word. If there are multiple instances of the same word, you can press n to got the next instance. You can also press Shift+N to move to the previous instance of the word.&lt;/p&gt;

&lt;p&gt;Some more word searching ahead. Say if you are already on the word which you want to find its instance, then you could press * to move to its next instance and # will do the same backward. Oh ! that was smooth.&lt;/p&gt;

&lt;p&gt;You can see that we are just using our keyboards while using vim. This is a great feature of old but gold text editors like vim and others that make you faster on the keyboard and avoid mouse traps.&lt;/p&gt;

&lt;p&gt;If you want to jump to the end of the block or a paragraph you can use { and } to go to the beginning and the end of it respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;    -&amp;gt; to the end of the file.&lt;/p&gt;

&lt;p&gt;**gg ** -&amp;gt; to the beginning of the file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;     -&amp;gt; move the cursor to the end of the screen.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:%s/old/new/g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in Command mode -&amp;gt; replace the old word with a new word throughout the file(g)&lt;/p&gt;

&lt;p&gt;Ctrl p   in Insert mode    -&amp;gt; auto-complete reference from current file.&lt;/p&gt;

&lt;p&gt;So these are some quick and pretty good commands to get started with and feel VIM. But this is just VIM used 25% efficiency, you would have to go to the command line or terminal to run and compile the program you have written. It could waste a lot of time. But as a beginner, this is pretty decent and helps to learn the core programming, behind the scenes of compiling and learning new stuff and commands. It gets pretty exciting if you have got the basics cleared. But be sure to make it through.&lt;/p&gt;

&lt;p&gt;It’s time to use VIM to its actual powers. VIM + terminal. It can get quite fast. So beware!!!&lt;/p&gt;

&lt;h1 id=&quot;running-programs-from-vim&quot;&gt;Running Programs from VIM&lt;/h1&gt;

&lt;p&gt;It turns out that you could go to the command mode and run terminal commands from there just use! before the command first.&lt;/p&gt;

&lt;p&gt;Linux/Mac Users: use terminal from vim&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!ls   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;//-&amp;gt; ls command from vim&lt;/p&gt;

&lt;p&gt;Windows: use CMD from vim&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;-&amp;gt; dir command from vim&lt;/p&gt;

&lt;p&gt;You could also use other commands which are appropriate to be executed from vim.&lt;/p&gt;

&lt;p&gt;Here is where the trick comes in, you don’t have to quit vim now to compile or run the program.&lt;/p&gt;

&lt;p&gt;Let’s say you are writing a C++/C code and you have a clang compiler. Then you could use c++ and c respectively command with appropriate file handles to compile from vim. Here’s the command,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!c++ % -o %:r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, % stands for the current file and :r removes the extension of the file. So we are creating an executable file without the extension and hence :r. And to execute the file, simply type,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!%:r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this will execute the program. If Windows users face an issue like a file is not identified as a batch file or executable file, you should add .exe after :r to make it an exe file.&lt;/p&gt;

&lt;p&gt;For Python or other interpreted language, it is quite simple, just the interpreters name with the file name as it is&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!python filename.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:!python %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You could find your preferred language’s CLI tool and set it up for your environment and get it plugged with VIM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mapping in VIM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But this is not it! There is a long way to master VIM. It’s not possible to know everything about anything. So for getting faster I’ll introduce VIM’s fastest tool and the part where it really shines. Mapping!!&lt;/p&gt;

&lt;p&gt;You could map (assign) some keys to do a particular task in different modes. Just imagine typing cpp and running the program or py and running the program,no need to go to the mouse to click run button and close the window. It gets really blazing fast. Only your creativity is the limit. Mapping commands are also called macros.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap cpp :!c++ % -o %:r  &amp;amp;&amp;amp;  %:r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap py :!python %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above commands, nmap means in Normal mode MAP cpp and then followed by the command which for this case it is executed in the command mode. There can be various permutations you could make like imap or vmap in Insertion mode and Visual mode and so on.  From mapping,its basically left-hand side mapped to right-hand side. The key combination to the left and command to be executed to the right.&lt;/p&gt;

&lt;p&gt;You will surely say, “Do I have to do it every time I run the program or every time I use VIM?”&lt;/p&gt;

&lt;p&gt;Well, You can :) but you should not. Because there’s a way around it and this is the fuel of VIM or the soul for its Speed.&lt;/p&gt;

&lt;p&gt;Yes, I am talking about VIM CONFIGURATION FILE or vimrc&lt;/p&gt;

&lt;h1 id=&quot;vim-run-commands-filevimrc&quot;&gt;VIM Run Commands File(vimrc)&lt;/h1&gt;

&lt;p&gt;This is really a nasty feature of vim. You could tailor your vim editor as per your needs. You have to write the command once and it will run from the vimrc file. Making a vimrc file is a bit overwhelming in the beginning so, you should have a concrete knowledge of VIM commands and you should remember commands as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make a file called ~/.vimrc&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You should be using VIM to edit it or write it of course! Type vim ~/.vimrc in terminal or cmd&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter some commands such as set file type indent on , set number , you can find a  &lt;a href=&quot;https://vim.fandom.com/wiki/Example_vimrc&quot;&gt;sample vimrc file &lt;/a&gt; on google and understand its commands and uses.
Paint your plain canvas vimrc with your own creativity.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here you can add the mappings and other key combinations that you might have been using while learning VIM to your vimrc. VIM also has plugins and more customizable tweaks that can enhance your productivity.&lt;/p&gt;

&lt;p&gt;You could always get more help in VIM by using :help commandname. Also you can learn from vimtutor from terminal or CMD.&lt;/p&gt;

&lt;p&gt;If you want to dive in more deeper , i link some few resources and video links to get your vim skills to new level.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.vim.org/docs.php&quot;&gt;VIM Official Documentation. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vim.fandom.com/wiki/Vim_Tips_Wiki&quot;&gt;VIM fandom Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://catswhocode.com/vim-commands/&quot;&gt;130+ VIM commands. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide&quot;&gt;Vim Interactive Guide.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=H3o4l4GVLW0&amp;amp;list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R&quot;&gt;Vim as your editor.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vim is a tool that can get quite handy for programmers and it stands out from rest of the text editors. By using Vim you will be in very rare people who can make something from almost nothing. Because in VIM you make everything from commands to mapping from customization to functionality. This cannot be done overnight for sure and you would  say you are wasting time in the initial stage but no, you are actually building a foundation for more efficiency and speed. If still you want to use VS Code ,you can use it freely . Because it won’t matter much , at the end of the day its programming skills that win the race.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is quite a huge topic and everything could not be explained in a article, it should be self-explored and learnt from various sources to get its best functioning as per needs. This was a quick guide how and why you should be using VIM as a text editor or as a customizable IDE. As you might have seen its functionality is quite customizable and it is quite powerful tool for a programmer. Happy Coding and VIMing ;)&lt;/strong&gt;&lt;/p&gt;</content><author><name>Meet Gor</name></author><summary type="html">![Vim Text-editor](https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1624085488326%2FcxHH-7IRC.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;amp;w=1920&amp;amp;q=75</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1624085488326%2FcxHH-7IRC.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=1920&amp;q=75" /><media:content medium="image" url="https://techstructiveblog.hashnode.dev/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1624085488326%2FcxHH-7IRC.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=1920&amp;q=75" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>