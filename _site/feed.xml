<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://mr-destructive.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mr-destructive.github.io//" rel="alternate" type="text/html" /><updated>2021-09-18T15:45:55+05:30</updated><id>https://mr-destructive.github.io//feed.xml</id><title type="html">Techstructive Blog</title><subtitle>The blog for Constructive Technology. </subtitle><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><entry><title type="html">Object-Oriented Programming in C++: Access Modifiers</title><link href="https://mr-destructive.github.io//c++/object-oriented-programming/2021/09/18/OOP-in-Cpp-P2.html" rel="alternate" type="text/html" title="Object-Oriented Programming in C++: Access Modifiers" /><published>2021-09-18T15:12:29+05:30</published><updated>2021-09-18T15:12:29+05:30</updated><id>https://mr-destructive.github.io//c++/object-oriented-programming/2021/09/18/OOP-in-Cpp-P2</id><content type="html" xml:base="https://mr-destructive.github.io//c++/object-oriented-programming/2021/09/18/OOP-in-Cpp-P2.html">&lt;p&gt;&lt;img src=&quot;/assets/img/oopcpp-2.png&quot; alt=&quot;OOP-C++-Part-2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Moving on to Part 2 of Object-Oriented Programming in C++, we will look into the concept of access modifiers which we skipped in the first section. This won’t be a comprehensive guide on access modifiers as it requires some other concepts like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inheritance&lt;/code&gt; which we will introduce in the next few sections. This series will be like connecting the pieces of OOP together and building a good foundation.&lt;/p&gt;

&lt;p&gt;In this part, we will discuss the access modifiers and their related concepts. The below is a gist of what will be cob\verd in this part.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Understanding Access Modifiers&lt;/li&gt;
  &lt;li&gt;Type of Access Modifiers
    &lt;ol&gt;
      &lt;li&gt;Private
        &lt;ul&gt;
          &lt;li&gt;Getters&lt;/li&gt;
          &lt;li&gt;Setters&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Public&lt;/li&gt;
      &lt;li&gt;Protected
        &lt;ul&gt;
          &lt;li&gt;Introduction to Derived and Friend classes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without wasting any time, let’s roll in.&lt;/p&gt;

&lt;h2 id=&quot;what-are-access-modifiers&quot;&gt;What are Access Modifiers&lt;/h2&gt;

&lt;p&gt;Access Modifiers as the name suggests they are used to change the accessibility of properties and methods in a Class. That means if we want a certain scope of our code to access the class members we can specify that using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access modifiers&lt;/code&gt;. Access Modifiers form the basics or the pillar for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data Encapsulation&lt;/code&gt; in OOP.&lt;/p&gt;

&lt;h3 id=&quot;data-encapsulation&quot;&gt;Data Encapsulation&lt;/h3&gt;

&lt;p&gt;Data Encapsulation is terminology in OOP to keep all the components in a single entity or unit. Here the components are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;methods&lt;/code&gt; and they are contained in a single unit called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;.  We need to carefully use the class members i.e. properties and methods in order to avoid security and limiting certain members to be available for a specific scope or block of code.&lt;/p&gt;

&lt;p&gt;Hence, the Encapsulation of class members helps in structuring the class in a secure and allows access in a particular expected way.&lt;/p&gt;

&lt;h2 id=&quot;types-of-access-modifiers-in-c&quot;&gt;Types of Access Modifiers in C++&lt;/h2&gt;

&lt;p&gt;We do have certain modifiers or limiters for accessing class members in C++. We can either keep the class members limited to the class itself (and friend class), keep them open to the global scope, or restrict them to certain classes only(derived and friend classes).&lt;/p&gt;

&lt;p&gt;Let’s discuss them one by one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;private&quot;&gt;Private&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This access modifier allows us to access the class members only to the class methods and the friend functions and classes. We will discuss what friend classes are in the next few parts of the series. This restricts the usage of the class members directly from the main function or other scopes in our program. You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private:&lt;/code&gt; to indicate the below declared properties and methods are private to the class.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Name
{ 
    private:
        int name;
        //other properties and methods
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OR (don’t specify anything it &lt;strong&gt;is private by default&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Name
{ 
    int name;
    //other properties and methods
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is assigned to every member of the class by default. So that is why we explicitly told to make it public in an example in the previous part of the series. Let’s see what happens if we do not make it public.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal{
	int legs;
	string name;
	void print()
    	{
		cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
	}
};

int main()
{

	Animal dog;
	dog.name=&quot;Floyd&quot;;
	dog.legs=4;
	dog.print();
	
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631940306089/l4zOKB-RY.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see we cannot directly use those properties and methods which are set as private. It is a convention to keep properties private and create public methods to access those from the rest of the program. The public methods used to access and modify the value of the private properties are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getters&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setters&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h4 id=&quot;getters&quot;&gt;Getters&lt;/h4&gt;

&lt;p&gt;Getters are the public methods of a class that are used to access a value to the private properties of that class. It is a function that returns the data of that particular property. We access the function as normally as we access the public functions.&lt;/p&gt;

&lt;p&gt;We define the getter function as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datatype getpropertyname()
{
    return propertyname;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can access the getter function as a normal public function, but this function returns a value, so we can store it in a variable and do all sorts of things.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;classname objname;
court&amp;lt;&amp;lt;objname.getpropertyname()&amp;lt;&amp;lt;endl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;setters&quot;&gt;Setters&lt;/h4&gt;

&lt;p&gt;Setters are the public methods of a class that are used to assign/modify the value of the private properties of that class. It is a function that simply assigns the private properties to data of the data which is passed in as an argument to the function. We access the function as normally as we access the public functions. We have to pass in the value to assign the property to the function.&lt;/p&gt;

&lt;p&gt;We define the setter function as:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;datatype setpropertyname(datatype x)
{
    propertyname = x;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can access the setter function as a normal public function, but this function takes in a parameter, so need to pass in the value to assign it the same as the correspondent data type of that property.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;classname objname;
objname.setpropertyname(data);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, after applying the getter and setter concept to our example, we can use them and make the properties private without any issues.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal{
	int legs;
	string name;
	public:

    // take in a parameter of type same as of the property 
	void setName(string dogname)   
	{
		name=dogname; 
        // assign the property a value same as of the parameter       
	}

    // return type should be same as of the property 
	string getName()   
	{
		return name;
	}

	void setleg(int noflegs)
	{
		legs=noflegs;
	}

	int getleg()
	{
		return legs;
	}
};

int main()
{
	Animal dog;
	dog.setName(&quot;Flyod&quot;);
	dog.setleg(4);
	cout&amp;lt;&amp;lt;dog.getName()&amp;lt;&amp;lt;endl;
	cout&amp;lt;&amp;lt;dog.getleg()&amp;lt;&amp;lt;endl;
	
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631949135706/zVd5cMPKa.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631956955383/MKp5YDMv5.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above code runs successfully, and hence we make our program more secure and provide limited access to the rest of the components. You can see how we have passed the data as the parameter to the setter function, it should be the appropriate data-type with the property you are trying to set and also the same return type for the getter function.&lt;/p&gt;

&lt;p&gt;The code is also much readable and structured for others to read and understand. It might seem a silly thing but it really improves the maintainability in the longer run.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;public&quot;&gt;Public&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This might be familiar till now, we have been using this access modifier till now and it is quite straightforward to understand. We have created the getter and setter function using this access modifier.&lt;/p&gt;

&lt;p&gt;So, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; access modifier makes the class members be accessible anywhere in the program. This might be OK for many small applications but it is not ideal to use them for production-level applications as it might cause undesired consequences i.e. BUGS.&lt;/p&gt;

&lt;p&gt;We need to explicitly write public in the class definition, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; is set by default. So, as a simple example, as we saw in the previous part, it can be a lot easier to go with the public to understand OOP but the main OOP really shines in aspects like Encapsulation and Inheritance of Classes, which we will surely see in the upcoming parts.&lt;/p&gt;

&lt;p&gt;This is the example from the previous part:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
	public:
		int legs;
		string name;
	    	void print()
        	{
		    cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
	    	}
};

int main()
{
	Animal dog;            // create an object of class Animal

	dog.name=&quot;Floyd&quot;;     // assign the class property to actual data in memory
	dog.legs=4;                 
	dog.print();          // call a method(function) associated to object&apos;s class
	
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631795000896/kUvcfVU7Y.png&quot; alt=&quot;public-class&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631958067712/yU8uvd5KQ.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As explained earlier, it is accessible to the main function or other scopes as well. We can access them using the dot separator(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;) to assign it or to call the method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;protected&quot;&gt;Protected&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is quite a handy access modifier, as it allows us to have the flexibility to keep the class members private and accessible to its derived or friend class. We will see the derived and friend classes in the next few parts. But for now, let’s understand in an abstracted way.&lt;/p&gt;

&lt;h4 id=&quot;derived-classchild-class-sub-class&quot;&gt;Derived Class(Child Class/ Sub Class)&lt;/h4&gt;

&lt;p&gt;This is a concept in Inheritance, i.e. to pass the members of a class to another. So, there has to be two classes, the main(parent class) and another class that will inherit or take in the members from the parent class. So, the derived class has access to its public and protected members only.&lt;/p&gt;

&lt;h4 id=&quot;friend-class&quot;&gt;Friend class&lt;/h4&gt;

&lt;p&gt;A friend class is a class that is allowed to access its &lt;strong&gt;private&lt;/strong&gt; and protected properties or methods. It is kind of a special tag assigned to a class that it can access certain class’ members. We will see it in detail afterward, right now, it’s enough to understand, friend class is a class that can access a particular class’ members may it be private or protected.&lt;/p&gt;

&lt;p&gt;The difference between a friend and a derived class is that a friend class can access the private members of the class to which it is a friend, but a derived class can’t. Friend class also can’t be inherited. Again, we will see this is in detail.&lt;/p&gt;

&lt;p&gt;So, it doesn’t make sense for me to explain protected here. But just assume friend classes and derived classes are a thing.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
	public:
		int legs;
		string type;
		
		void print()
		{
			cout&amp;lt;&amp;lt;type&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
		}

	protected:
		string name;
};


int main()
{

	Animal dog;
	dog.type=&quot;dog&quot;;
	dog.legs=4;
    	dog.name=&quot;Floyd&quot;;
	dog.print();
	
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631956345308/epOckpl6X.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gives an error as protected members can be accessed only by derived or friend classes since we are accessing it from the main function, it’s not allowed in the global scope. We can only access the protected members from the derived or friend classes.&lt;/p&gt;

&lt;p&gt;So, let’s derive a class from the base class(Animal), and after that, we can see protected members in action.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
	public:
		int legs;
		string type;
		
		void print()
		{
			cout&amp;lt;&amp;lt;type&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
		}

	protected:
		string name;
};

class Pet:public Animal 
{
	public:
		void print()
		{
			name=&quot;Floyd&quot;;
			cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;&quot; is a &quot;&amp;lt;&amp;lt;type&amp;lt;&amp;lt;endl;
			cout&amp;lt;&amp;lt;type&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
		}

};

int main()
{

	Pet dog;
	dog.type=&quot;dog&quot;;
	dog.legs=4;
	dog.print();
	
	return 0;
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631956708698/HJTOZN9sw.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631956815750/a2y5QLiPT.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have accessed the protected property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; in the derived class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet&lt;/code&gt;. Yes, this is how we derive a class in C++,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// A child class serived from base class
class NewClassName: public BaseClassName
{
     // properties and methods
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, after deriving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pet&lt;/code&gt; class from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt; class, we have access to its public and protected class as well. We simply assigned one of the protected members from its base class i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and used it in the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how you can use protected members in a derived class, also you can do it in friend class, but we will look at that in a separate part. Remember you can &lt;strong&gt;use getters and setters as well to assign and access those protected members&lt;/strong&gt;.  Keeping it simple and easy to understand is what a protected access modifier can provide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protected access modifiers are quite great and provide much more flexibility than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; and more privacy than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; access modifiers.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;which-to-use-when&quot;&gt;Which to use when?&lt;/h2&gt;

&lt;p&gt;It is often a good practice to use private members, but it might be not possible to make everything private, so we can use certain properties as private, some methods as public and protected as well as per requirement and complexity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631953460021/_4WlLGDI_.png&quot; alt=&quot;acmod.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the above chart, you can analyze your problem and work a way around to find the perfect secure match for your application.&lt;/p&gt;

&lt;p&gt;Rember to use public members only when you have to explicitly use through the program. If you find that, this member shouldn’t be introduced in certain scope then use make it private or protected.&lt;/p&gt;

&lt;p&gt;If there is some kind of hierarchy in the program and its components, analyze and make a structure of it to have a better understanding of the program flow.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So, from this part, we were able to understand the access modifiers and got somewhat of a dive into Inheritance. There were some concepts like Friend and Derived classes, Inheritance, Encapsulation which were just explained in short, but they are a topic that deserves separate attention. We’ll discuss them in the upcoming parts.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Hope you understood the concepts in a better way. Until then, as always, Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="c++" /><category term="object-oriented-programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/oopcpp-2.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/oopcpp-2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Object-Oriented Programming in C++: Classes and Objects</title><link href="https://mr-destructive.github.io//c++/object-oriented-programming/2021/09/16/OOP-in-Cpp-P1.html" rel="alternate" type="text/html" title="Object-Oriented Programming in C++: Classes and Objects" /><published>2021-09-16T19:45:40+05:30</published><updated>2021-09-16T19:45:40+05:30</updated><id>https://mr-destructive.github.io//c++/object-oriented-programming/2021/09/16/OOP-in-Cpp-P1</id><content type="html" xml:base="https://mr-destructive.github.io//c++/object-oriented-programming/2021/09/16/OOP-in-Cpp-P1.html">&lt;p&gt;&lt;img src=&quot;/assets/img/oopcpp-1.png&quot; alt=&quot;OOP-C++-Part-1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;We all know that C++ is famously known for Object-Oriented Porgramming, but what is Object-Oriented Programming? Well, this is the article, where we will explore the basics of Object-Oriented Programming, its building blocks i.e Classes and Objects, and get familiar with its basic semantics in C++. Let’s get into it straight away!&lt;/p&gt;

&lt;h2 id=&quot;what-is-object-oriented-programming&quot;&gt;What is Object-Oriented Programming?&lt;/h2&gt;

&lt;p&gt;Object-Oriented Programming(OOP) is a way to structure and design a program or an application. Object-Oriented Programming deals with creating classes and objects and it’s related terminologies. OOP helps in following the principles like DRY(Don’t Repeat Yourself) and KISS(Keep it Simple Stupid). Using OOP certain applications and problems can be solved in a simple and efficient way. It helps in better understanding and readability of the code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Virus is a class and COIVD-19 is an object of the Virus class XD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In OOP we create a collection of the data and functionalities by organizing in a structure called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;. We then instantiate or create the actual data by creating an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; of the particular class. Once we have created a class, we can simply create as many objects as we need to. Objects are basically the storage of the actual data in memory. Let’s explore them in the next few sections.&lt;/p&gt;

&lt;p&gt;NOTE: There are a lot of terminologies in OOP, just remember the basics of those terms and not the different names of those terms.&lt;/p&gt;

&lt;h2 id=&quot;what-are-classes&quot;&gt;What are Classes&lt;/h2&gt;

&lt;p&gt;Classes are the structure or template of the data and its associated behavior. The data or the variables in the classes are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attributes&lt;/code&gt;(also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data members&lt;/code&gt;). We also have functions that define the behavior of the properties or the data present in the class and are called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A Class in C++ should be defined outside of the main function. In C++, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; is a reserved word and hence it is used to declare and define a class. It has a general structure like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Name
{
    // properties and methods
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a convention to use the initial letter of a Class Name Uppercased. We can define class methods outside the class body as well, we will see it in the next few parts of the series.&lt;/p&gt;

&lt;p&gt;Let’s create a basic class in C++,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Animal
{
	public:
		int legs;
		string name;
	void print()
    {
		cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
	}
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here in the above code, we have a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal&lt;/code&gt; and it has 2 properties called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;legs&lt;/code&gt; which is an int and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; a string. We also have a method called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; which displays the current object’s name and the leg count. We will see what is the current object in the next section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631797771422/6jCNpCYz_q.png&quot; alt=&quot;oopcpp1-class.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We use those properties or the variables defined in the class in our application either by accessing them through the objects or in the methods of that class. The variables or properties in classes are not assigned to any memory address i.e. they are just kind of a blueprint or placeholder tags to match for the data.&lt;/p&gt;

&lt;h3 id=&quot;access-specifier&quot;&gt;Access Specifier&lt;/h3&gt;
&lt;p&gt;We have written &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; before the definition of the properties of the class, it is an access modifier. Don’t worry we will see it in detail in the next few parts of the series, just for time being understand that we can change whether we want the main function(or any function globally) to access the class’ properties or not.&lt;/p&gt;

&lt;p&gt;We are saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; which means we can access the properties of this class anywhere outside the class. This is not a good practice but just for simplicity of understanding, we are using public. &lt;strong&gt;If you do not specify anything like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;, it is by default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;, which means the properties of the class are not accessed anywhere outside the class&lt;/strong&gt;. Let keep it simple right now.&lt;/p&gt;

&lt;p&gt;We also have other concepts like defining the methods outside/inside the class, header files, constructors, destructors, and many others related to a class definition, we will cover it in the next few parts.&lt;/p&gt;

&lt;h2 id=&quot;what-are-objects&quot;&gt;What are Objects&lt;/h2&gt;

&lt;p&gt;Now, we have created a class but where is the data actually? It will be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objects&lt;/code&gt;, We actually assign the data or properties to a memory address by creating the objects of that particular class.&lt;/p&gt;

&lt;p&gt;We can create objects of a particular class in C++ by writing the name of the class that this object will belong to and the name of the object,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classname objectname;&lt;/code&gt;. This will create or assign memory to the properties of the class to the object.&lt;/p&gt;

&lt;p&gt;After the object has been created, we can assign the value to the properties of the class in the object. We can access the properties of the class by referencing the name of the object with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; and the name of the property or variable of the class, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objectname.propertyname&lt;/code&gt;, we can assign the value simply by using the assignment operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; and give the properties the value, input from the user or however you like it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Animal
{
	public:
		int legs;
		string name;
	void print()
    {
		cout&amp;lt;&amp;lt;name&amp;lt;&amp;lt;&quot; has &quot;&amp;lt;&amp;lt;legs&amp;lt;&amp;lt;&quot; legs.\n&quot;;
	}
};

int main(){

	Animal dog;            // create an object of class Animal

	dog.name=&quot;Floyd&quot;;     // assign the class property to actual data in memory
	dog.legs=4;                 
	dog.print();          // call a method(function) associated to object&apos;s class
	
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631795000896/kUvcfVU7Y.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If Animal is the class, then the dog here is the object. As simple as you can think. We are technically &lt;strong&gt;instantiating an object&lt;/strong&gt; when we say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Animal dog&lt;/code&gt;.  We assign the variables the memory as defined in the class. We give some value to the properties using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;(dot syntax), after the class name.&lt;/p&gt;

&lt;p&gt;So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dog.legs = 4;&lt;/code&gt; will assign the value of 4 in the memory address of the object’s property(dog is the class and legs is the property).&lt;/p&gt;

&lt;p&gt;Similarly, we can call the function associated with the class as we do for properties but we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; to indicate to calling the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631799152681/UhNDYdEXK.png&quot; alt=&quot;oopcpp1-obj.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So that is how we create objects in C++.&lt;/p&gt;

&lt;h2 id=&quot;why-and-when-to-use-oop&quot;&gt;Why and When to use OOP&lt;/h2&gt;

&lt;p&gt;Object-Oriented programming makes quite complex problems and applications structure and scale quite easily and enhances the readability of the codebase. We can use OOP to create the applications for bigger and real-life applications, it allows us to add new features quite easily and thereby improving the maintaining ability.&lt;/p&gt;

&lt;p&gt;The following might be the reasons to use OOP in an application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If the application cannot be stated in a single sentence, you need to create the components into classes and hence use OOP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is quite easy to maintain OOP applications even if there are a lot of maintainers to the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you see certain parts of the code repeating in many places, OOP is the way to go.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want your application to be secure in terms of data from the rest of the components, OOP is again a great option as you can use Encapsulation to the advantage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So, we have studied the concept of Object-Oriented Programming and how to define classes and create objects in C++. There are a lot of concepts in OOP to grab up in the next few parts of the series, but this should build the foundation of OOP as a paradigm or a way of thinking when it comes to problem-solving and programming.&lt;/p&gt;

&lt;p&gt;I hope you have got a good introduction to the basics of Object-Oriented Programming and its semantics in C++. Thank you for reading. In the next part, we will explore the Access Modifiers/Specifiers in the Classes. Until then Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="c++" /><category term="object-oriented-programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/oopcpp-1.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/oopcpp-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My Journey as a Technical Writer</title><link href="https://mr-destructive.github.io//2021/09/14/My-Journey.html" rel="alternate" type="text/html" title="My Journey as a Technical Writer" /><published>2021-09-14T19:30:37+05:30</published><updated>2021-09-14T19:30:37+05:30</updated><id>https://mr-destructive.github.io//2021/09/14/My-Journey</id><content type="html" xml:base="https://mr-destructive.github.io//2021/09/14/My-Journey.html">&lt;p&gt;&lt;img src=&quot;/assets/img/myjourney.png&quot; alt=&quot;My Journey&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello World! I am Meet Gor, a self-taught web developer, Linux enthusiast, and a newbie technical writer. I am currently studying in an Engineering college pursuing my B. Tech in I.T.  I love to explore new programming languages and technologies, create innovative projects, love to write stories and blogs like this.&lt;/p&gt;

&lt;h2 id=&quot;how-it-started&quot;&gt;How it started&lt;/h2&gt;

&lt;p&gt;When I was learning Vim, I found the need to write some kind of cheatsheet for myself. So I started writing it, soon I realized I had written a kind of an article instead of a cheatsheet XD There were a lot of chunks of it unorganized but meaningful in some sense. So, from there I started to research on article writing. I found the term perfect for my techno feelings to express i.e. “Technical Writing”.  I soon landed on Hashnode, I knew Medium, GeeksforGeeks but found Hashnode absolutely perfect and much more viable to the creativity of an author.&lt;/p&gt;

&lt;h3 id=&quot;starting-on-hashnode&quot;&gt;Starting on Hashnode&lt;/h3&gt;
&lt;p&gt;My  &lt;a href=&quot;https://techstructiveblog.hashnode.dev/why-and-how-you-should-use-vim-as-a-text-editor-and-ide&quot;&gt;first article&lt;/a&gt;  was published on  &lt;a href=&quot;https://hashnode.com/@Mr-Destructive/joinme&quot;&gt;Hashnode&lt;/a&gt;, which I absolutely love and adore. That was a bit big article about 12 minutes for a beginner me writing everything about Vim which I knew about that time.  The response was not that bad, I received a couple of reactions and comments to pump me up but I never felt confident to write more articles.&lt;/p&gt;

&lt;h3 id=&quot;geeksforgeeks-internship&quot;&gt;GeeksforGeeks Internship&lt;/h3&gt;
&lt;p&gt;Until I found an &lt;strong&gt;Internship at GeeksforGeeks for a Technical Writer&lt;/strong&gt; role.  &lt;a href=&quot;https://www.google.com/aclk?sa=l&amp;amp;ai=DChcSEwj-_8TAq_7yAhUtlUsFHdI4AD4YABAAGgJzZg&amp;amp;ae=2&amp;amp;sig=AOD64_1xL_mUI1OLWumXOK-H1jF4wRP8eg&amp;amp;q&amp;amp;nis=1&amp;amp;adurl&amp;amp;ved=2ahUKEwjSlb_Aq_7yAhXMb30KHXM6BPsQ0Qx6BAgCEAE&quot;&gt;Geeksforgeeks&lt;/a&gt;  is a start-up for Computer science students to learn and grow with free as well as paid courses and mentors. In a couple of months, I wrote some 10-12 articles about Shell scripting. There I really found my interest and the confidence I wanted.  It was really a great experience working here and loved the freedom it provided to the authors with genuine and constructive feedback along with a decent stipend.  &lt;a href=&quot;https://auth.geeksforgeeks.org/user/meetgor/articles&quot;&gt;Here&lt;/a&gt;  you can find my work.&lt;/p&gt;

&lt;h3 id=&quot;the-start-of-the-techstructive-blog&quot;&gt;The start of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Techstructive Blog&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Soon, on June 6th something stuck in my mind that I should write about how to use Vim for doing various things. So, the first idea was what currently I was learning in College i.e Python, I started writing about the Vim set up for python and I completed it within 2 hours. I published it on Hashnode and &lt;strong&gt;from there I never looked back. I started writing an article every 3-4 days&lt;/strong&gt;. That summed up for 3 months making 21 articles till September. I also made my personal open-source blog called &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Techstructive Blog&lt;/code&gt;&lt;/a&gt; using Jekyll and hosted it on Github pages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631625512256/eyN6xO92G.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did experiments with a lot of blogging tools and frameworks like  &lt;a href=&quot;https://www.patricksoftwareblog.com/flask-tutorial/&quot;&gt;Netlify with Flask&lt;/a&gt;,  &lt;a href=&quot;https://github.com/meeb/django-distill&quot;&gt;Django distill&lt;/a&gt;,  &lt;a href=&quot;https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog&quot;&gt;Gatsby Js&lt;/a&gt;, etc and finally landed on  &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt;  with  &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;  as it is quite customizable and a lot easier to add certain components as well.&lt;/p&gt;

&lt;h2 id=&quot;why-i-kept-going&quot;&gt;Why I kept going?&lt;/h2&gt;

&lt;p&gt;It’s not hard to keep up with what you love to do. Even if you are not that interested in doing something, just having curiosity and consistency can turn any work into a skill. Here are the reasons why I love to keep going as a Technical writer ( some of them are from the Bootcamp session from @&lt;a href=&quot;@didicodes&quot;&gt;Edidiong Asikpo&lt;/a&gt; and @&lt;a href=&quot;@quincy&quot;&gt;Quincy Larson&lt;/a&gt; :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Over a span of 5-6 months I have learned a lot than I had in my past 2 years, I understood that I am writing for myself first and not only for other people.&lt;/li&gt;
  &lt;li&gt;It helps me in improving my online presence and clearly showcases my skills and interests.&lt;/li&gt;
  &lt;li&gt;Able to sum up ideas and document them well.&lt;/li&gt;
  &lt;li&gt;Maintain a record of learning for your future self.&lt;/li&gt;
  &lt;li&gt;Learning to get things done by writing articles consistently in an allotted time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-i-kept-going&quot;&gt;How I kept going?&lt;/h2&gt;

&lt;p&gt;I am writing articles almost daily one for my blog and another day for GeeksforGeeks. I have a schedule and follow it almost punctually. I have never run out of ideas and motivation till now, every time I feel that there’s no motivation in me, something or the other pops up just like this  &lt;a href=&quot;https://hashnode.com/bootcamp&quot;&gt;Hashnode Bootcamp - The Art &amp;amp; business of Technical writing&lt;/a&gt;. Some youtube videos, Hackathon, Bootcamps, Project, conversations with friends just can impact in a constructive and a drastic way, they create a refreshed experience and allow you to clarify the doubt in yourself. Just you have to be open to ideas and feedback from other people and learn in harmony.&lt;/p&gt;

&lt;h2 id=&quot;my-writing-workflow&quot;&gt;My writing workflow&lt;/h2&gt;

&lt;p&gt;This is really a neglected part when you ask a technical writer as it can really improve your productivity.  I use Hashnode and Vim both for writing out the markdown script. I like to write the subheadings or the content which I want to explain in that article. That really makes a bigger idea in a small chunk and I repeat the process until I feel that is the lowest abstracted way I can explain something. I record some screencasts in gifs on ScreenToGif recorder, MS Paint and Canva as an Image editor,  &lt;strong&gt;Hashnode makes uploading and accessing images, gifs so easy and it’s quick too, really Hashnode is just flawless for a tech writer.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s been my story soo far. I have grown from a noob coder to a somewhat confident nerd who can quickly write functional scripts, jump in Vim with more speed, and of course, teach someone something that can be helpful. It also is a way for me to relax and enjoy the process of programming.&lt;/p&gt;

&lt;p&gt;Thanks a lot if you have been reading till here. 
&lt;strong&gt;Thank you Hashnode for providing such a great opportunity to create a side hustle here&lt;/strong&gt;. As always Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/myjourney.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/myjourney.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Vim for Competitive Programming</title><link href="https://mr-destructive.github.io//vim/comnpetitive-programming/2021/09/13/Vim-for-cp.html" rel="alternate" type="text/html" title="Vim for Competitive Programming" /><published>2021-09-13T17:42:30+05:30</published><updated>2021-09-13T17:42:30+05:30</updated><id>https://mr-destructive.github.io//vim/comnpetitive-programming/2021/09/13/Vim-for-cp</id><content type="html" xml:base="https://mr-destructive.github.io//vim/comnpetitive-programming/2021/09/13/Vim-for-cp.html">&lt;p&gt;&lt;img src=&quot;/assets/img/vimcp.png&quot; alt=&quot;Set up Vim for CP&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Vim is not a bad text editor when it comes to using it for Competitive Programming. It’s kind of one way or the other, you would love it or you could trash it as it can waste a tremendous amount of time to write code every time. But once you are in a decent setup including some key-bindings and plugins can improve your speed in using Vim. I personally have used it since the beginning and haven’t regretted it even a tiny bit till date. It’s a flawless and enjoyable experience. I’ve used C++ for my CP journey, C is quite similar as well, but C++ has more library support and is a bit easier to write comparatively.&lt;/p&gt;

&lt;p&gt;Using Vim for CP is a bit challenging in the initial stage but just stay consistent and you’ll be in flying colors on the other side. Here, I’ll give some quick key-bindings and plugins to include to Vim to enhance the workflow for Competitive Programming.&lt;/p&gt;

&lt;h2 id=&quot;quick-boilerplate-code&quot;&gt;Quick Boilerplate code&lt;/h2&gt;

&lt;p&gt;Firstly, let’s create a key-binding for the boilerplate code. We just need to map the key with the code we need to write which will be integrated with Vim commands.&lt;/p&gt;

&lt;p&gt;For C++&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap cpf i#include&amp;lt;iostream&amp;gt;&amp;lt;Esc&amp;gt;ousing namespace std;&amp;lt;Esc&amp;gt;o&amp;lt;CR&amp;gt;int main(){&amp;lt;Esc&amp;gt;o&amp;lt;Esc&amp;gt;oreturn 0;&amp;lt;Esc&amp;gt;o}&amp;lt;Esc&amp;gt;kki
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For C:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap cp i#include&amp;lt;stdio.h&amp;gt;&amp;lt;Esc&amp;gt;o&amp;lt;CR&amp;gt;int main(void){&amp;lt;Esc&amp;gt;o&amp;lt;Esc&amp;gt;oreturn 0;&amp;lt;Esc&amp;gt;o}&amp;lt;Esc&amp;gt;kki
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Java:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &amp;lt;C-j&amp;gt; iclass &amp;lt;ESC&amp;gt;&quot;%pxxxxxa {&amp;lt;ESC&amp;gt;opublic static void main(String args[]){&amp;lt;Esc&amp;gt;o&amp;lt;Esc&amp;gt;o}&amp;lt;Esc&amp;gt;o}&amp;lt;Esc&amp;gt;kki&amp;lt;Tab&amp;gt;&amp;lt;Tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, you get the idea of creating such macros for your own programming language. I don’t think Python can have boilerplate code, even it has it’s quite small compared to C/C++/Java/etc. You can include those codes into the key map. Let me explain the map to you.&lt;/p&gt;

&lt;p&gt;Let’s look at the Java example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nnoremap&lt;/code&gt; is the map command with attributes like non-recursive and the mode of mapping. In this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; stands for normal mode map i.e. the map will get triggered in the normal mode, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nore&lt;/code&gt; stands for non-recursive behavior of the map. For further readings, you can read my &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/06/14/Vim-Keymapping.html&quot;&gt;Vim-keymapping Guide&lt;/a&gt; article. The map itself has the right and a left part, kind of a map of the key and command to execute. You can use any key to trigger it, I have used CTRL+J or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; to activate the map. The command is quite long but let’s break it down into smaller chunks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;, we enter into insert mode and we type in class and hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; key and this is a special trick to deal with java for the class name as it should be the name of the file itself. We use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; register for copying the current file’s entire name (with extension), so we have to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.java&lt;/code&gt; part so, you see five x’s to delete those after we have pressed a to get into insert mode just ahead of the cursor. We then insert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&lt;/code&gt; for the class and again hit escape to go back to normal mode.&lt;/li&gt;
  &lt;li&gt;We type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt; to go into insert mode to the next line, type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public static void main(String args[])&lt;/code&gt; and this is the same stuff of escaping and going in next line.&lt;/li&gt;
  &lt;li&gt;Finally, we hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kk&lt;/code&gt; to move up twice and enter the insert mode with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; and hit tab twice to get the indentation correct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, you can add more as per your preference of pre-defined constants and functions and the rest stuff involved in your language of choice.&lt;/p&gt;

&lt;h2 id=&quot;running-code-by-a-key-binding&quot;&gt;Running Code by a Key-binding&lt;/h2&gt;

&lt;p&gt;After the boilerplate code being taken care of, we can now move to the building and running of the code file in Vim. We can add some more custom key bindings to auto compile and run the code within Vim.&lt;/p&gt;

&lt;p&gt;We can compile the code with the compilers or interpreters for the languages from the Vim using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; which executes the commands from the terminal and pass in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; i.e. the current file name and output file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%:r&lt;/code&gt; i.e. current file name without the extension in case of C/C++/Java.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compile -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c++ hello.cpp -o hello&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%:r&lt;/code&gt; for Windows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./%:r&lt;/code&gt; for Linux/macOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have added those two commands i.e (compile and run) using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; to make things more clear and compact. 
For C++&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap cpp :!c++ % -o %:r &amp;amp;&amp;amp; %:r&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For C&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap c, :!gcc % -o %:r &amp;amp;&amp;amp; %:r&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Java&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap ,j :!javac % &amp;amp;&amp;amp; java %:r&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Python&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap py :python %&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, you can apply this to any programming language you use. Also kindly note that their could be some differences for compiling the code in Linux and Windows so just be careful which command you use in which Operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631540728028/2puTZUXwK.gif&quot; alt=&quot;vimjv.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above gif demonstrates the usage of those commands and key bindings to make the workflow of running and building process much easier and smoother.&lt;/p&gt;

&lt;h2 id=&quot;opening-terminal-to-compile-and-run-code&quot;&gt;Opening Terminal to compile and run code&lt;/h2&gt;

&lt;p&gt;We can use the terminal to compile and run code if you wish to do it this way as well. Vim is quite a terminal-friendly editor, you can open any terminal from Vim.&lt;/p&gt;

&lt;p&gt;You can enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term&lt;/code&gt; to open the default terminal in a horizontal split. YOu can explicitly enter the terminal/shell name to open it like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term bash&lt;/code&gt; to open bash, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term powershell&lt;/code&gt; to open PowerShell, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:term zsh&lt;/code&gt; to open zsh, and so on. This is quite a great utility that vim provides with it. You can switch between windows using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; or CTRL+W &lt;strong&gt;twice&lt;/strong&gt; or use HJKL keys along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; to move with ease. More on Vim and Integrated Terminals in &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/06/29/Vim-Terminal.html&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can now explore the terminal world yourself and execute the commands from therein.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;When it comes to Vim, there are a ton of plugins made for everything you can imagine and couldn’t imagine. We can use Plugin managers to manage those plugins for us or manually manage those yourself. You can go with one of the three well-known plugin managers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vim-Plug&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vundle&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pathogen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using those plugin managers, we can install plugins like some of the useful ones are:&lt;/p&gt;

&lt;h3 id=&quot;nerdtree&quot;&gt;NERDTree&lt;/h3&gt;

&lt;p&gt;NERDTree is a great plugin for beginners and also for people doing competitive programming as it saves a bit of time as well. You can install the NERDTree plugin from the GitHub docs. You can read about the detail of configuring the NERDTree plugin in &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/08/31/Vim-NERDTree.html&quot;&gt;this article&lt;/a&gt;. This plugin allows you to have a graphical representation of the files and folder structures in the current directory. You can extend its capabilities to auto-refresh and auto open/close using some custom configuration as provided in the above-mentioned article.&lt;/p&gt;

&lt;p&gt;You basically open the NERDTree with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:NERDTree&lt;/code&gt; after installing and configuring. YOu can make key-bindings and shortcuts to use as you like and prefer.&lt;/p&gt;

&lt;h3 id=&quot;autocompletion-and-lsp&quot;&gt;Autocompletion and LSP&lt;/h3&gt;

&lt;p&gt;Autocompletion is quite important when it comes to competitive programming as you have to save time on the &lt;strong&gt;stuff you know&lt;/strong&gt; and let the application process it for you. We do have some plugins for auto-completion and also LSPs for this specific task. LSP is quite great and provides much more accurate predictions when it comes to autocompletion. You can check out the LSP &lt;a href=&quot;https://github.com/prabirshrestha/vim-lsp&quot;&gt;unofficial plugin for vim&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;For normal plugins like &lt;a href=&quot;https://github.com/vim-scripts/AutoComplPop&quot;&gt;AuotoComplPop&lt;/a&gt; are also decent and provide a great beginner experience.&lt;/p&gt;

&lt;p&gt;Not many plugins would be required for competitive programming just some autocompletion and a nice interface with a file system will work for the basic set-up but that is not the end, you can extend it as per your needs and skills. Vim is quite epic in terms of the customization it can offer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631768130787/ccDyyJ45y.gif&quot; alt=&quot;vimcpt.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, for C++, I have demonstrated the use of key mappings and also showed the usage of the terminal inside of Vim, this is quite a flawless experience to integrate and use the terminal as per choice and preference.&lt;/p&gt;

&lt;h2 id=&quot;conslusion&quot;&gt;Conslusion&lt;/h2&gt;

&lt;p&gt;So from this article, we were able to set up Vim for competitive programming by adding some custom key mappings and plugins for different languages. This was not a complete guide, I could not include every language’s configuration here, surely you can ask me anytime in the comments, GitHub, Twitter or just mail me I can try to configure a programming language on Vim. Thanks for reading.&lt;/p&gt;

&lt;p&gt;Happy Viming and Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="vim" /><category term="comnpetitive-programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/vimcp.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/vimcp.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Filter and Find an Issue on GitHub</title><link href="https://mr-destructive.github.io//github/open-source/2021/09/09/Find-Issues-GitHub.html" rel="alternate" type="text/html" title="Filter and Find an Issue on GitHub" /><published>2021-09-09T17:42:30+05:30</published><updated>2021-09-09T17:42:30+05:30</updated><id>https://mr-destructive.github.io//github/open-source/2021/09/09/Find-Issues-GitHub</id><content type="html" xml:base="https://mr-destructive.github.io//github/open-source/2021/09/09/Find-Issues-GitHub.html">&lt;p&gt;&lt;img src=&quot;/assets/img/githubissues.png&quot; alt=&quot;Find Github Issues&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Are you stuck in finding an open-source project to contribute to?&lt;/p&gt;

&lt;p&gt;We will see how you can pick up an issue on GitHub appropriate as per your preferences of languages, labels, complexity, and thus you can find a Community or a project to work and continue with further contributions.&lt;/p&gt;

&lt;p&gt;This process might not be as efficient but is quite helpful for beginners or people getting started to contributing to Open Source.&lt;/p&gt;

&lt;h2 id=&quot;understand-the-search-bar&quot;&gt;Understand the search bar&lt;/h2&gt;

&lt;p&gt;I assume you have your GitHub account already created. If not go ahead at &lt;a href=&quot;https://github.com/join&quot;&gt;Github&lt;/a&gt; and create one. On the Home page, you can easily navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Issues&lt;/code&gt; tab and you will see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631190578909/UBpq3rb0H.png&quot; alt=&quot;Issues tab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you won’t find any issues if you haven’t created any. But if you look at the search bar, you will find the reason why it is empty or why there are only the issues that you have created. You will see that in the search bar there is a filter called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author:Username&lt;/code&gt;, which filters the issues which are created by you. You definitely don’t want this as you want to search and find other issues by other people/communities. So, simply remove the text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author:Username&lt;/code&gt; from the search bar. Keep rest as it is for now. Now if you press enter after removing the author filter, you will see all the issues on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631185853484/e0PyTbgip.png&quot; alt=&quot;Issues removed author&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There will be a ton of them, very random in terms of programming languages, frameworks, projects, difficulty, type, etc. they are basically the issues created recently on GitHub.&lt;/p&gt;

&lt;p&gt;In the next section, we will see how to filter those issues as per the programming languages/tools to which you might like to contribute to.&lt;/p&gt;

&lt;h2 id=&quot;add-languages&quot;&gt;Add languages&lt;/h2&gt;

&lt;p&gt;We can add filters to the issues as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language:name&lt;/code&gt;, this will filter all the Issues which have the languages in their codebase.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631190679194/8Od1tsdKp.png&quot; alt=&quot;Issues language filter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, I have filtered the issues which have language as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;, you can use any language/tool you might want and would love to find some interesting projects to contribute and learn from.&lt;/p&gt;

&lt;p&gt;If you want to search by multiple programming languages you can separate the names of those programming languages by a comma &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also separate programming languages with space and enclosing all of them under double quotes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;p&gt;Let’s search for issues with C, C++, and Java as their programming languages, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language:c,cpp,java&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language:&quot;c cpp java&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above filter will give out all the issues which are created from programming languages either C/C++/Java.&lt;/p&gt;

&lt;p&gt;You can find more filter options on the &lt;a href=&quot;https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-issues-and-pull-requests&quot;&gt;GitHub docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;add-labels&quot;&gt;Add labels&lt;/h2&gt;

&lt;p&gt;You can find issues as per labels marked on them, many issues have a label marked on them to improve their visibility and meta-information about the issue.&lt;/p&gt;

&lt;p&gt;We have some labels which GitHub has created already for common scenarios in projects.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bug&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;documentation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duplicate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enhancement&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good first Issue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help wanted&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalid&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;question&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wontfix&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can even create our own labels by providing the label name and a description.&lt;/p&gt;

&lt;p&gt;To search for labels, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label:name of the label&lt;/code&gt;. You can any of the above 9 label tags or any other tag name that you think is popular other than those 9.&lt;/p&gt;

&lt;p&gt;You would have to use double quotes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;) to add certain labels with multiple words like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good first issue&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;help wanted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;If you search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label:&quot;good first issue&quot;&lt;/code&gt;, you will get all of the issues(newest first) which have a label &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good first issues&lt;/code&gt; tagged on them.&lt;/p&gt;

&lt;p&gt;Similarly, for multiple issues, you can add comma-separated labels as well. Just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label:bug,&quot;good first issue&quot;&lt;/code&gt; will search for either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bug&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;good first issue&lt;/code&gt; or both.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631190841185/vrYTLoaaNu.png&quot; alt=&quot;Issues label&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-sorting-options&quot;&gt;More Sorting Options&lt;/h2&gt;

&lt;p&gt;In the rightmost part of the search bar, in the Sort button, you can click on there and find a couple of options like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oldest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;least commented&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recently updated&lt;/code&gt;, and so on. If you click on any of them you will see the changes reflected on the list of issues as well as the search bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1631189621396/jO58HkYxH.png&quot; alt=&quot;Issues sort&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After this the stage is yours, you can look at any issue and Understand its objective, then ask yourself can you solve this issue? if yes then read the contribution guidelines, and the rest is sheer skills like git, programming, documentation, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you can go ahead and start applying the filters on issues and make some contributions to Open-Source on GitHub. We covered some methods and tricks to find and filter out the issues on GitHub based on the programming languages/tools and the labels attached to them.&lt;/p&gt;

&lt;p&gt;This technique can be good for beginners as well as people who want to find quick issues to solve. Feel free to explore and try out different filters and find the issue you are confident to work on. Good Luck!
Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="github" /><category term="open-source" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/githubissues.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/githubissues.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why use Vim ?</title><link href="https://mr-destructive.github.io//vim/2021/09/05/Why-Vim.html" rel="alternate" type="text/html" title="Why use Vim ?" /><published>2021-09-05T13:30:55+05:30</published><updated>2021-09-05T13:30:55+05:30</updated><id>https://mr-destructive.github.io//vim/2021/09/05/Why-Vim</id><content type="html" xml:base="https://mr-destructive.github.io//vim/2021/09/05/Why-Vim.html">&lt;p&gt;&lt;img src=&quot;/assets/img/vimwhy.png&quot; alt=&quot;Why vim&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;So, Why would one use Vim? As Vim being the most complicated Text editor when it comes to &lt;strong&gt;closing it&lt;/strong&gt;!! Also, people think it’s not worth the time or it’s just not their type of Text Editor. Well, that’s true, I am not forcing anyone to use Vim, just to tell the reasons why people use Vim. Again, it’s not to show off to anyone that I use Vim, just to appreciate the power of Vim and its community, it’s just amazing!!&lt;/p&gt;

&lt;p&gt;Vim is not a text editor just for anyone, it can be daunting initially but the more you use it, the more you love it. There is nothing called a time-wastage in learning Vim, if you think learning something is waste of time, just don’t learn it! To have understood and got good at something you need to dedicate time and effort to it, there’s no shortcut. When it comes to shortcuts, Vim is the fairyland of it, just use one or create your own. THat’s how cool Vim can be when used properly.&lt;/p&gt;

&lt;p&gt;Some of the most important and crucial reasons why people use Vim are:&lt;/p&gt;

&lt;h2 id=&quot;vim-is-speed&quot;&gt;Vim is Speed!&lt;/h2&gt;

&lt;p&gt;Vim can be opened from the terminal, and that itself can speak that it is lightweight and uses lower system resources and hence causing minimal lag. This might not be an issue for high-end computers but when it comes to low-end machines, Vim behaves as a life-saver. Using certain commands feels so wicked fast and intuitive. Certain commands such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;, and many others are really powerful when it comes to editing in Vim. When you don’t have to think about what keys you should type, you are really getting faster in Vim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s6.gifyu.com/images/screenrecording.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above screencast is from my article &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/python/vim/2021/06/06/Vim-for-Python.html&quot;&gt;Vim: Set up for Python&lt;/a&gt;, which uses some key mappings to run python code directly from Vim itself by executing the shell commands from Vim’s Command mode. A simple map can save a lot of time.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap py :!python %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;number-of-commandsshortcuts&quot;&gt;Number of Commands/shortcuts&lt;/h2&gt;

&lt;p&gt;When it comes to using key-bindings and shortcuts, there is no shortage of them. You can spend days, weeks, months, years but still, there will be some or the other thing to learn in Vim. That can be very intimidating to some people but that’s how life is. &lt;strong&gt;You cannot get perfect at anything but surely better is the word to focus on.&lt;/strong&gt; There is a good little cheatsheet at &lt;a href=&quot;https://devhints.io/vim&quot;&gt;devhints&lt;/a&gt; for beginners to quickly get started. Also, you can follow with the Youtuber- &lt;a href=&quot;https://www.youtube.com/channel/UC8ENHE5xdFSwx71u3fDH5Xw&quot;&gt;ThePrimeagen&lt;/a&gt;, who focuses on switching and using Vim. Vim is has a robust set of command and key-bindings by far compared to other tex-editors. Here are some of my daily used &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/07/18/Vim-Enhancing-Editing-speed.html&quot;&gt;editing commands&lt;/a&gt; and &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/06/26/Vim-Enhancing-Movement-speed.html&quot;&gt;navigation commands&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;power-to-use-it-as-an-ide&quot;&gt;Power to use it as an IDE&lt;/h2&gt;

&lt;p&gt;Vim provides some awesome features such as &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/06/29/Vim-Terminal.html&quot;&gt;terminal integration&lt;/a&gt;, &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/06/14/Vim-Keymapping.html&quot;&gt;Key-mappings&lt;/a&gt;, &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/08/06/Vim-Window-Splits.html&quot;&gt;Window Splits&lt;/a&gt;, etc to take text-editing and developer environment to a next-level. You can literally use Vim as an IDE for many of the programming languages like C/C++, Python, Java, Javascript, GO, etc. Though it can’t replace entire IDE-like features, it is indeed powerful enough to add features in making a custom IDE experience. It might require some time and research to configure it to use it as a full-blown IDE, but it might be a very useful and self-motivating experience. There are definitely many articles, tutorials out to guide you in configuring the editor to an IDE. People might not use Vim for the features it has but also for the lightweights as compared to other IDEs such as Visual Studio, Android Studio, Eclipse, IntelliJ IDEA, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630827706766/cdN6GdnhH.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From, the above screenshot, we can see that I have configured Vim almost like VSCode, Ok! just the look of it is similar but ya we have the file manager as &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/08/31/Vim-NERDTree.html&quot;&gt;NERDTree&lt;/a&gt;, integrated Terminal, and the buffer opened as the editor. You can even add more functionality like autocomplete, keymaps to compile/run/build the code. There is are infinite possibilities when it comes to customization in Vim and to make it a full-blown IDE. OH! And btw my Vim look changes from time to time XD&lt;/p&gt;

&lt;h2 id=&quot;available-almost-everywhere&quot;&gt;Available almost everywhere&lt;/h2&gt;

&lt;p&gt;As said, Vim can be opened via the terminal, and hence it is quite viable when it comes to accessibility. It is pre-installed in almost every Linux-distributions, macOS, FreeBSD, etc. Hence it is quite reliable when it comes to compatibility and cross-platform support. You can start editing in any environment in Vim, so it becomes a good reason to learn to use Vim at least basic editing and opening, closing, etc. Vim being minimal and lightweight, it just becomes easy to work with servers. production-environment, etc. It also isn’t that complicated once you make your head around it. Being available in almost every Operating System has some value to it like it is the most dependable editor out there. Even after 30 years, yes Vim was released in 1991, it is still maintained by its producer &lt;a href=&quot;https://en.wikipedia.org/wiki/Bram_Moolenaar&quot;&gt;Brain Moolenaar&lt;/a&gt;. That is mind-boggling, Vim is truly a vintage text editor silently but widely dominated in terms of its reach in Computing.&lt;/p&gt;

&lt;h2 id=&quot;the-level-of-customizationconfiguration&quot;&gt;The Level of Customization/Configuration&lt;/h2&gt;

&lt;p&gt;It’s kind of a double-sided sword for some people as it can be daunting to customize from scratch and also, it could be a rewarding and pleasurable experience of having the personalized experience.  With the number of pLugins, custom vimrc and color schemes, etc Vim is very prone to personalization. It is &lt;strong&gt;Open Source&lt;/strong&gt;, so we also have it’s distributions such as &lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot;&gt;SpaceVim&lt;/a&gt;, &lt;a href=&quot;https://github.com/spf13/spf13-vim&quot;&gt;SPF-13&lt;/a&gt;, etc. Some more distribution can be found &lt;a href=&quot;https://dev.to/ajeebkp23/some-popular-vim-distributions-a68&quot;&gt;here&lt;/a&gt;. Some Distribution is pref-configured with some basic stuff and is ready to use, so they are quite beginner-friendly and introduce them to Vim in a better way. NeoVim which is an evolution of Vim written in Lua is much more powerful and provides even more customization keeping the basic key-bindings in mind. Editing Vimrc is quite an amazing and intuitive experience as it allows to add functionality or enhance the existing features in Vim.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Text Editors don’t matter, what matters are the problem-solving skills&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vim is a simple and minimal text editor, everyone can use it but not everyone finds the need to use it, that’s fine. It might be ideal for me to use Vim than other editors but it might not be for you. But there is nothing to lose in knowing some basics of Vim. It might be useful somewhere, you never know! And if your favorite editor is not available, Vim might prove to be a great quick solution. Thanks for reading. Happing Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="vim" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/vimwhy.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/vimwhy.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Vim: NERDTree</title><link href="https://mr-destructive.github.io//vim/2021/08/31/Vim-NERDTree.html" rel="alternate" type="text/html" title="Vim: NERDTree" /><published>2021-08-31T20:45:06+05:30</published><updated>2021-08-31T20:45:06+05:30</updated><id>https://mr-destructive.github.io//vim/2021/08/31/Vim-NERDTree</id><content type="html" xml:base="https://mr-destructive.github.io//vim/2021/08/31/Vim-NERDTree.html">&lt;p&gt;&lt;img src=&quot;/assets/img/vimnerdtree.png&quot; alt=&quot;vim nerdtree&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/preservim/nerdtree&quot;&gt;NERDTree&lt;/a&gt; is a great plugin in Vim for managing and navigating Files. Some might prefer fzf, telescope, and other plugins for navigation, NERDTree is not a bad option to begin within Vim. NERDTree allows you to even create/delete/move files and folders flawlessly without much effort, so it becomes a much more viable beginner’s plugin.&lt;/p&gt;

&lt;h2 id=&quot;installing-nerdtree-plugin&quot;&gt;Installing NERDTree Plugin&lt;/h2&gt;

&lt;p&gt;So, let’s start with the Installation of the NERDTree Plugin, it’s quite straightforward and simple.&lt;/p&gt;

&lt;p&gt;You should have a Plugin-Manager for installing this plugin. It’s not mandatory to have one but it becomes much easier to work with. You can choose any between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vundle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vim-Plug&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pathogen&lt;/code&gt; to name a few. It does not really matter with what you use just stick to one but if you are stuck somewhere just switch and it’s not a big trouble to use other Plugin Managers as they are quite similar to each other.&lt;/p&gt;

&lt;h4 id=&quot;vundle&quot;&gt;Vundle&lt;/h4&gt;

&lt;p&gt;To install a plugin using Vundle, you need to configure Vundle first if you have not already done it. You can find the installation docs &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;here&lt;/a&gt;. 
After Vundle has been configured in your vimrc you can simply add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plugin &apos;preservim/nerdtree&apos;&lt;/code&gt; between the call begin and end of Vundle, like :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;call vundle#begin()
  Plugin &apos;preservim/nerdtree&apos;
call vundle#end()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of your other Plugins will go in between those two statements, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call vundle#begin()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call vundle#end()&lt;/code&gt;. 
After saving and sourcing the vimrc file, you need to install the plugin using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:PluginInstall&lt;/code&gt;, and there you are all Done!&lt;/p&gt;

&lt;h4 id=&quot;vim-plug&quot;&gt;Vim-Plug&lt;/h4&gt;

&lt;p&gt;To install a plugin using the Vim-Plug manager, you need to configure Vim-Plug if you have not already configured it in your vimrc. You can find the installation docs at the GitHub README of &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;Vim-Plug&lt;/a&gt;.
After Vim-Plug has been configured in your vimrc you can simply add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plug &apos;preservim/nerdtree&apos;&lt;/code&gt; between the call plug begin and end statements. Just like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;call plug#begin()
  Plug &apos;preservim/nerdtree&apos;
call plug#end()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of your other Plugins will go in between those two statements, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call plug#begin()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call plug#end()&lt;/code&gt;. 
After saving and sourcing your vimrc file, you need to now install those plugins using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:PlugInstall&lt;/code&gt;, and that is it!&lt;/p&gt;

&lt;h4 id=&quot;pathogen&quot;&gt;Pathogen&lt;/h4&gt;

&lt;p&gt;To install any plugin using Pathogen plugin manager, you need to configure PAthogen in your vimrc if you have not done it already. You can find the installation docs on &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen.vim&lt;/a&gt;.
After Pathogen has been configured in your vimrc, you can clone the git repository of that plugin into your local machine and then activate it using Pathogen.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/preservim/nerdtree.git ~/.vim/bundle/nerdtree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After cloning the repository, you can add this to your vimrc where you have configured it. It’s a kind of DIY manager in terms of managing the folders of the plugin.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;call pathogen#infect()
syntax on
filetype plugin indent on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this, you need to run this command to get docs and help with the plugins,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:helptags ~/.vim/bundle/nerdtree/doc/&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:helptags&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And there you are done with the plugin installed.&lt;/p&gt;

&lt;p&gt;There are other Plugin managers as well, but these three are the most widely supported ones and they work out of the box, surely explore for yourself and find the perfect one for you.&lt;/p&gt;

&lt;h2 id=&quot;activating-and-using-nerdtree&quot;&gt;Activating and Using NERDTree&lt;/h2&gt;

&lt;p&gt;Now, we actually need to use NERDTree, for that we can type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:NERDTree&lt;/code&gt; in any folder in our local machine, and there should be a window open a vertical split to the left, just like this:
&lt;img src=&quot;https://i.imgur.com/KU2vMxO.png&quot; alt=&quot;NERDTree activate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After this, you can use &lt;C-w&gt; that is **CTRL+W twice** twice to switch back and forth between windows. You can also use **CTRL+W and HJKL** to move in directions in the windows. For further guides and key-bindings in Window-Splits, you can read my article [here](https://mr-destructive.github.io/techstructive-blog/vim/2021/08/06/Vim-Window-Splits.html).&lt;/C-w&gt;&lt;/p&gt;

&lt;p&gt;Now, you can navigate to the file/folders using HJKL or arrows keys(not preferred). You can even use the numbers before the HJKL to jump and hop around the large codebases, this integrates really well with base Vim key-bindings.
You can quiet the NERDTree window by just pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt;, definitely the former is efficient. You can open/collapse the folders also using the enter key to open the file in the current buffer. But hey that’s quite limited, what have you ever seen!&lt;/p&gt;

&lt;h4 id=&quot;open-file-in-splits&quot;&gt;Open File in Splits&lt;/h4&gt;

&lt;p&gt;You can open a file in a horizontal split using the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; on the file. You can open a file in Vertical split using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; key keeping the current highlight in NERDTree on the file which you would like to open. This can be really a great feature to have while opening multiple files and file structures.&lt;/p&gt;

&lt;h4 id=&quot;managing-filesfolders-using-nerdtree&quot;&gt;Managing Files/Folders using NERDTree&lt;/h4&gt;

&lt;p&gt;You can create files using the NERDTree window by pressing m inside the particular folder where you want to. If you want to create a file in the root folder, you can go to the topmost file location and press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; inside the NERDTree window. If you press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;, you will be able to see different kinds of options namely:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add a child node.(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can create a file or a folder using the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; or simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to create the file in the current highlighted location.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Move the Current Node. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can create a file or a folder using the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; or simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to create the file in the current highlighted location.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delete the current Node. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can move the currently highlighted file/folder to any other directory using the file manager itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the current Node in the system Text-Editor.(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can delete the file/folder which is currently selected on the NERDTree menu.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the current Node. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can open the file in the system-default text-editor using the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the Path to the clipboard.(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can copy the current file/folder or a node using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List the Current Node. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can list the file/folder i.e to display its properties the read/write/execute permissions, date modified and created, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run system COmmand in this folder. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;)&lt;/p&gt;

    &lt;p&gt;We can run system commands or shell/terminal commands using the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;, For windows, we open the COMMAND PROMPT, and in Linux and macOS, it is terminal.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can quit that window by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Esc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is some of the Screencast of me demonstrating the NERDTree plugin features and the edit options.
&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630423628366/zZE7R5aL7.gif&quot; alt=&quot;vimnerd.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is just self-explanatory and beginner-friendly sets of commands, it becomes really easy to do this with some custom macros as we’ll talk about in the next sections.&lt;/p&gt;

&lt;h2 id=&quot;macros-to-open-file-tree&quot;&gt;Macros to open file tree&lt;/h2&gt;

&lt;p&gt;You can make a key-binding to open the NERDTree,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &amp;lt;C-n&amp;gt; :NERDTree&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can map anything instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt;, most people use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; but it’s easy to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL+N&lt;/code&gt; for me, it’s just personal preference.&lt;/p&gt;

&lt;p&gt;If you do not like to open NERDTree again and again, you can keep it open whatsoever using the custom key-binding in your vimrc.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd VimEnter * NERDTree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will open the NERDTree automatically for you when you open Vim, Ya I get it, it’s not needed every time but most of the time a developer is switching between the files.&lt;/p&gt;

&lt;h2 id=&quot;enabling-autoreload&quot;&gt;Enabling Autoreload&lt;/h2&gt;

&lt;p&gt;We can auto-reload the NERDTree window when there is a change in the file structure, i.e. a file/folder is deleted/created/moved/etc. We again need to set this in our vimrc:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd BufEnter NERD_tree_* | execute &apos;normal R&apos;
au CursorHold * if exists(&quot;t:NerdTreeBufName&quot;) | call &amp;lt;SNR&amp;gt;15_refreshRoot() | endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will reload the NERDTree when the cursor is in the NERDTree’s window. This could be really time-saving and a nice quick configuration to enhance the efficiency of your Text-editing.&lt;/p&gt;

&lt;h2 id=&quot;enabling-autorefresh-for-change-in-the-current-directory&quot;&gt;Enabling Autorefresh for change in the current directory&lt;/h2&gt;

&lt;p&gt;We can also reload the NERDTree when we change the directory. The above-mentioned command is not sufficient to do that, we have to add another set of configurations.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;augroup DIRCHANGE
    au!
    autocmd DirChanged global :NERDTreeCWD
augroup END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By adding this to your vimrc, you will refresh the NERDTree every time you enter or change the current directory. This is also a great addition to have to save time by reloading the Window for every change in the path, if you are looking for something among a huge code-base, this works a charm.&lt;/p&gt;

&lt;h2 id=&quot;auto-close&quot;&gt;Auto close&lt;/h2&gt;

&lt;p&gt;You need to close the NERDTree manually each time you want to exit out of it, but this can also be automated just for the sake of simplicity and effectiveness in &lt;strong&gt;QUITTING VIM&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;amp;&amp;amp; exists(&quot;b:NERDTree&quot;) &amp;amp;&amp;amp; b:NERDTree.isTabTree()) | q | endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will close the NERDTree window if it is the only open window. That can be frustrating at moments but the majority of the time this is a great addon indeed.&lt;/p&gt;

&lt;h2 id=&quot;packing-it-together&quot;&gt;Packing it together&lt;/h2&gt;

&lt;p&gt;So, we have learned the basics of using and modifying NERDTree according to our needs, to put it together, you can use this snippet directly into your vimrc and enjoy the flawless experience.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; Open nerdtree window on opening Vim
autocmd VimEnter * NERDTree

&quot; Refresh the current folder if any changes
autocmd BufEnter NERD_tree_* | execute &apos;normal R&apos;
au CursorHold * if exists(&quot;t:NerdTreeBufName&quot;) | call &amp;lt;SNR&amp;gt;15_refreshRoot() | endif

&quot;Reload the window if directory is changed
augroup DIRCHANGE
    au!
    autocmd DirChanged global :NERDTreeCWD
augroup END

&quot;Close nerdtree automatically if it is theonly window open
autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;amp;&amp;amp; exists(&quot;b:NERDTree&quot;) &amp;amp;&amp;amp; b:NERDTree.isTabTree()) | q | endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h2&gt;

&lt;p&gt;So, We were able to make Vim a better place to work with. Making it easier to navigate along with files and folders. Configuring the NERDTree Plugin, customizing the look and functionality of Vim as per the needs. 
NERDTree is a great plugin no matter how you use it. It makes Vim more viable as a text editor for daily use and that also in an efficient and clean way. Surely there might be other plugins that are super powerful and blazing fast, NERDTree provides a good UI as well by providing a graphical representation of the File structure that enhances its usage.
That is what Vim is about, learning every day some things to change the way to edit. Thank you for reading. Happy Viming and Coding :)&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/preservim/nerdtree&quot;&gt;NERDTree - docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8793489/nerdtree-reload-new-files/8794468&quot;&gt;Refresh NERDTree&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vi.stackexchange.com/questions/31050/how-can-i-make-nerdtree-update-root-to-the-current-directory-when-i-change-direc&quot;&gt;Reload NERDTree on Directory change&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1447334/how-to-add-nerdtree-to-your-vimrc&quot;&gt;Open NERDTree in Vim by default&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2066590/automatically-quit-vim-if-nerdtree-is-last-and-only-buffer&quot;&gt;Close NERDTree automatically&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="vim" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/vimnerdtree.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/vimnerdtree.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon</title><link href="https://mr-destructive.github.io//hashnode/django/web-development/python/2021/08/27/DevQuotes-Auth0-x-Hashnode.html" rel="alternate" type="text/html" title="Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon" /><published>2021-08-27T23:45:00+05:30</published><updated>2021-08-27T23:45:00+05:30</updated><id>https://mr-destructive.github.io//hashnode/django/web-development/python/2021/08/27/DevQuotes-Auth0-x-Hashnode</id><content type="html" xml:base="https://mr-destructive.github.io//hashnode/django/web-development/python/2021/08/27/DevQuotes-Auth0-x-Hashnode.html">&lt;p&gt;&lt;img src=&quot;/assets/img/dqhashnode.png&quot; alt=&quot;DevQuotes&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;No one can understand the joy in finishing a personal project, except the dreamer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was a while,since I have posted an article here, as I was busy on a project or a hackathon.&lt;/p&gt;

&lt;p&gt;Hello, world! I am Meet a student and a self-taught web developer. I like to make and break stuff, especially when it comes to programming and Linux. I like shell scripting and learning different languages at once, love to learn about Vim and Linux everyday.&lt;/p&gt;

&lt;p&gt;Every time I start a project something else comes and distracts me let that be any other programming language or technology. That leads to creating new projects and leaving the one behind unfinished, I know most of the developers face this.  But this time, thanks to Auth0 X Hashnode Hackathon, I was able to create an almost finished project within almost 10 days. Having a deadline and competition creates a mindset to finish a project on time, that’s my first takeaway from this Hackathon. OH! this is my first Hackathon by the way, and it has been amazing so far.&lt;/p&gt;

&lt;p&gt;** Applying a framework to do something you desire and then everything working smoothly (after fixing 100s of bugs) is such a great feeling that no one can understand except for the person who just dreamt of it. **&lt;/p&gt;

&lt;p&gt;I’ll like to share my project which is a web application for the Auth0 x Hashnode Hackathon. Here it goes.&lt;/p&gt;

&lt;h2 id=&quot;what-is-dev-quotes&quot;&gt;What is Dev Quotes?&lt;/h2&gt;

&lt;p&gt;Dev quotes is a web app designed for publishing and viewing quotes related to programming, developer mindset, and all the technicalities involved in a developer’s life. It’s basically a medium to express the life of developers and get inspired by others.  Here it is &lt;a href=&quot;https://devquotess.herokuapp.com/&quot;&gt;devquotes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;dark-mode&quot;&gt;Dark Mode:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630074051548/TQz9Koh7l.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;light-mode&quot;&gt;Light Mode:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630078314355/VhfLrcjJa.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-dev-quotes&quot;&gt;Why Dev Quotes?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Developers are not the people who only understand how to write code but they’re also the people who can make the code understandable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer, there are often times where you have no motivation left inside, but you never know you might be just a few lines of code away from making another project or fixing a bug. For that, we require some inspiration or a push to break the barrier of.  I am not saying it’s just for developers, it’s designed for developers but everyone is open to understanding the developers’ lives and their struggles.&lt;/p&gt;

&lt;p&gt;I also felt the need to give back some love-crafted web app to the ever-wonderful and supportive dev community. It’s a small application but still, I would like to give in something instead of nothing at all. Start small grow big, hopefully :)&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;Some of the main features of the web application are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write\Edit\Delete Quotes if logged in.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Like / Unlike a Quote.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;See all of your quotes.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Randomized Quotes on Homepage.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dark/Light theme based on Browser’s Preference and local storage.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The app is mobile responsive as well, though the navbar is a bit wonky with the light/dark mode switch toggle, which can be taken care of soon.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630084573444/YEj38dUTD_.png&quot; alt=&quot;dqmob.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-the-making&quot;&gt;In the making&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Have the curiosity to learn, rest is automated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The project was made by using various inspirational articles and videos about making a web application. But the idea stuck in my mind when I was thinking about the people who don’t get inspired as a developer. Like there is no way you can remain sad about being a developer and keep on dealing with imposter syndrome. Every developer has a perspective of programming but there is an infinite number of opportunities if you are curious enough. Just started making the project and got so much into it that I was literally dreaming about it like I saw parts of the webpage. in my dream and I am making it that was genuinely a thing that powered me to complete it.&lt;/p&gt;

&lt;p&gt;The project roughly started on 19th August and almost ended on 26th August, like the actual webpage and its core functionalities. Though on 27th were some styling and extra additions such as the About section and Footer. That was like the most productive week I ever had in my programming journey. That was fun as heck.&lt;/p&gt;

&lt;h2 id=&quot;tech-stack&quot;&gt;Tech Stack&lt;/h2&gt;

&lt;p&gt;The Tech Stack involved with this app is :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Django&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PostgreSQL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML/CSS/JS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;` Bootstrap`&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have not used any front-end end frameworks just because I never found the need to learn them.  I had experience with Django for just 2 months and I am surprised I was able to make it. As obvious I have used Auth0 for authentication in my web application.&lt;/p&gt;

&lt;h3 id=&quot;auth0-integration-for-authentication&quot;&gt;Auth0 integration for Authentication&lt;/h3&gt;

&lt;p&gt;I must tell you using Auth0 was just flawless addition to my app as I have to do almost nothing, just drop some credentials of the Auth0 application with my Django project using a  &lt;a href=&quot;https://auth0.com/docs/quickstarts&quot;&gt;well-documented guide&lt;/a&gt;  for every type of framework. Simply straight-forward was the name for integrating authentication in my app.&lt;/p&gt;

&lt;h4 id=&quot;how-i-used-auth0-with-django&quot;&gt;How I used Auth0 with Django&lt;/h4&gt;

&lt;p&gt;I’ve used Template tags such as if blocks to verify if the user is authenticated or not.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;login-box auth0-box before&quot;&amp;gt;
		
		    &amp;lt;a class=&quot;btn btn-primary btn-sm tn-login &quot; href=&quot;/login/auth0&quot;&amp;gt;Log In&amp;lt;/a&amp;gt;
	    
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was just readily available on their documentation though there were some adjustments as per the project requirements in this code to fit in the place.&lt;/p&gt;

&lt;p&gt;I must say, integrating Auth0 is even easier than using Django User Model in some sense as most of the stuff is handled by the Auth0, on our side, we simply have to create the Auth0 specific app with the credentials from the dashboard rest just works flawlessly till now. How sweet and&lt;/p&gt;

&lt;h3 id=&quot;specifications&quot;&gt;Specifications&lt;/h3&gt;

&lt;p&gt;I won’t go in-depth about the technicalities of the project but would like to address certain things. FIrstly I have mostly used Class-based views for the major part, certain areas are still function-based just for the simplicity of the application and a few of them are handled and documented by Auth0 so just preferred that.&lt;/p&gt;

&lt;p&gt;Another thing is about Models, I just have a simple single model called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quote&lt;/code&gt; which has an Author as a Foreign Key from the Django User Model. I would have also created multiple emojis for the like system but I was too excited and in a rush to see the actual app, So just kept it simple. XD
&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630060555499/246ZKnypP.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The rest of the stuff like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URLs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Templates&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static files&lt;/code&gt; are handled in a neatly organized way as depicted in the below diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630060426600/JHMlrfOKZ.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it might not be clear from that, there are 3 apps -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth0login&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quotes&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;, here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quotes&lt;/code&gt; is kind of the most important app as it has the models, forms, URLs, and the views linked to them here.&lt;/p&gt;

&lt;h3 id=&quot;hosting&quot;&gt;Hosting&lt;/h3&gt;

&lt;p&gt;Hosting as you can guess, it’s on  &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; , quite beginner-friendly and feature-rich. I also have a free addon for PostgreSQL Database here.  It’s limited to 10K rows but that’s sufficient for a starter app like this in my opinion. Also, it has 500 free hours of dyno, which is also sufficient for a small low-traffic app like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630076036133/9ofxnM5VN.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bugs-encountered&quot;&gt;Bugs Encountered&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Love Bugs, they’ll give you experience&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the most exciting and important part if you consider the hackathon because this determines the level of experience that a developer shoes in achieving certain things or features if you will. Faced some typical Django errors as usual but also some unexpected things like Dark mode and light mode clashing together due to poorly written media queries in CSS.&lt;/p&gt;

&lt;p&gt;As usual, the start is often hard, there is no motivation whatsoever in using the admin section to test the database queries and gibberish basic HTML page. In that process, I faced some primary key access issues and was able to understand the concept more clearly by fixing it.&lt;/p&gt;

&lt;p&gt;Another instance was with handling post requests in Django which I’ve failed to do before. I used forms and a hybrid of CSS and bootstrap to style those forms which just works brilliantly. That took some time to figure out the exact working but after a while, it was working charms.&lt;/p&gt;

&lt;h2 id=&quot;future-updates&quot;&gt;Future Updates&lt;/h2&gt;

&lt;p&gt;As said, I would like to add more like buttons expressing different emotions. Some other features to add are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To add more emojis like claps, cheers, and others.&lt;/li&gt;
  &lt;li&gt;To add a profile page in the app that would display all the quotes of the particular author and the details related to him/her.&lt;/li&gt;
  &lt;li&gt;Adding some tags to filter out particular types of quotes.&lt;/li&gt;
  &lt;li&gt;Improve UI-UX a bit more to make it professional and pleasant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Talk is cheap, show me the code - Linus Torvalds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The source code is available at Github on this  &lt;a href=&quot;https://github.com/Mr-Destructive/devquotes&quot;&gt;Link&lt;/a&gt;. 
It’s freely open for any contribution after the hackathon(mid-September).  Some of the files such as the environment variables, virtual environments, cached data are not uploaded for security and obvious reasons.&lt;/p&gt;

&lt;p&gt;Enough of technical talks, let’s see the DEMO,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630073466386/3wgnST5hc.gif&quot; alt=&quot;dqss.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Silent claps…….&lt;/p&gt;

&lt;p&gt;It’s not a great UI-UX but works and is not too shabby in my opinion considering it only has base HTML and CSS with a little Bootstrap and Javascript. But ya, a fully functional Backend that’s what I was looking for a full-stack app with some decent features. Hope it helps some developers stay motivated and hack into some hackathons like this.&lt;/p&gt;

&lt;h3 id=&quot;references-used-while-creating-the-app&quot;&gt;References used while creating the app:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=B40bteAMM_M&amp;amp;list=PLCC34OHNcOtr025c1kHSPrnP18YPB-NFi&quot;&gt;Codemy -John Elder Django tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/3.2/topics/forms/&quot;&gt;Django - Documentation for Forms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28837511/django-template-how-to-randomize-order-when-populating-page-with-objects&quot;&gt;Django template randomizer shuffle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kzN_VCFG9NM&quot;&gt;Auth0 app Django integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;closing-words&quot;&gt;Closing Words&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why developers find solutions to bugs at the stroke of sleeping, that’s multithreading in our brains&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope you liked the project and hopefully will inspire developers to stay motivated and can focus on their goals more than dealing with imposter syndrome and whatnot.&lt;/p&gt;

&lt;p&gt;Thank you for reading and using the app, for any feedbacks, Twitter handles, comment section, Github issues, LinkedIn messages are all freely open. Thanks. Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="hashnode" /><category term="django" /><category term="web-development" /><category term="python" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/dqhashnode.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/dqhashnode.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Django Quick Setup Script</title><link href="https://mr-destructive.github.io//django/web-development/python/2021/08/15/Django-Quick-Setup.html" rel="alternate" type="text/html" title="Django Quick Setup Script" /><published>2021-08-15T18:50:46+05:30</published><updated>2021-08-15T18:50:46+05:30</updated><id>https://mr-destructive.github.io//django/web-development/python/2021/08/15/Django-Quick-Setup</id><content type="html" xml:base="https://mr-destructive.github.io//django/web-development/python/2021/08/15/Django-Quick-Setup.html">&lt;p&gt;&lt;img src=&quot;/assets/img/djangoqss.png&quot; alt=&quot;Django: Quick Set-Up&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Once you learn something very neatly and understand it very clearly, it feels like you are wasting time doing things over and over again. Same things in setting up a Django project, you feel like you could save those typing minutes by making a script.&lt;/p&gt;

&lt;p&gt;In this article, we will make a script a batch script for windows and a BASH script for Linux/macOS. We will make a virtual environment using python and then install the libraries and dependencies like in this case we will install Django. You can also tinker with these scripts and install other dependencies if you want like Django rest framework, crispy forms, markdown, Redis, etc. We will also make a Django project using the positional parameter passed before running the script from the command line.&lt;/p&gt;

&lt;h3 id=&quot;python-development-environment&quot;&gt;Python development environment&lt;/h3&gt;
&lt;p&gt;This article assumes you have a python environment setup. If you don’t you must install Python from the  &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;official website&lt;/a&gt;  as per your operating system. Also, you should have pip installed and configured correctly. You can install pip by following the  &lt;a href=&quot;https://pip.pypa.io/en/stable/&quot;&gt;official documentation&lt;/a&gt;  for the specific operating systems.&lt;/p&gt;

&lt;h2 id=&quot;steps-in-django-project-setup&quot;&gt;Steps in Django Project Setup&lt;/h2&gt;

&lt;p&gt;So, If you are already familiar with the Django project setup, you can directly use the scripts provided in the next few sections. You can also visit  &lt;a href=&quot;https://github.com/Mr-Destructive/django-quick-setup-script&quot;&gt;this GitHub repository&lt;/a&gt;  if you have any issues and errors.&lt;/p&gt;

&lt;p&gt;If you are new to django, let me first explain the process of django project setup.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;initialize-a-virtualenvironment-recommended-but-not-necessary&quot;&gt;Initialize a VirtualEnvironment (Recommended but not necessary)&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Virtual Environment in Python is a great way of localizing the dependencies and frameworks only in the particular folder, it allows the developer to separate things out and keep them distinct, Additionally, when deploying or sharing the repository, the other developers can install the dependencies in the requirement.txt file in their local environment flawlessly.&lt;/p&gt;

&lt;p&gt;So, it is always recommended to use python virtualenv when working with python frameworks or libraries. We can set it up by simple pip install and then giving it a name.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the package/tool using pip.&lt;/p&gt;

&lt;p&gt;After that has been properly installed, we can now give it an appropriate name&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtualenv mytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; is the command and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mytest&lt;/code&gt; can be any name, generally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;venv&lt;/code&gt; is preferred but it should be understandable to the user.  You will now be able to see the folder inside of your current directory named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mytest&lt;/code&gt; or the name you’ve given to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now if you are on windows, you can activate the virtual environment by using the command :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mytest\Scripts\activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here mytest is the name of your virtual env it can be anything as per your choice. This will now activate the virtualenv which will be shown by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(mytest)&lt;/code&gt; before the command prompt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux/macOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Linux or macOS, you can use the command:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source mytest/Scripts/activate.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above command, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mytest&lt;/code&gt; can be anything that you have used while creating the virtualenv. This should activate the vrtualenv and will be indicated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(mytest)&lt;/code&gt; before the prompt in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1629023409389/kEe5AVAsr.png&quot; alt=&quot;image.png&quot; /&gt;
From the above image, we can see that we created and activated an virtualenv in python in a folder. 
So, this is the walkthrough for setting up the virtualenv for a Django project, now we will move to install Django in this environment.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;installing-django-using-pip&quot;&gt;Installing Django using pip&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is quite straightforward. You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install django&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3 install django&lt;/code&gt; or the normal way you install a library from pip.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;creating-a-django-project&quot;&gt;Creating a Django project&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a django project, we use the django-admin command like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;django-admin startproject mywebsite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will create a folder called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mywebsite&lt;/code&gt; or your project name anything you like. Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mywebsite&lt;/code&gt; folder, you will have 2 things: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manage.py&lt;/code&gt; file, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mywebsite&lt;/code&gt; folder . Yes there will be another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mywebsite&lt;/code&gt; folder inside your project which will have the settings, URLs and other global(project-level) configuration files. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manage.py&lt;/code&gt; file is the most important file here. You should never touch/edit this file. We use this file to carry out all the operations from running the server to managing the database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1629032998253/QQ5QXf4v5.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-script--for-windows&quot;&gt;Setup script  for Windows&lt;/h3&gt;

&lt;p&gt;The below is a batch file for Windows Operating System. Save the file in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; extension.&lt;/p&gt;
&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;amp;t=cobalt&amp;amp;wt=none&amp;amp;l=application%2Fx-sh&amp;amp;ds=true&amp;amp;dsyoff=20px&amp;amp;dsblur=68px&amp;amp;wc=true&amp;amp;wa=true&amp;amp;pv=56px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=mkdir%2520%25251%2520%250Acd%2520%25251%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Acall%2520env%255CScripts%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25251%2520.%250Acls%250A&quot; style=&quot;width: 803px; height: 366px; border:0; transform: scale(1); overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Make sure the file is saved in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; file and be in the folder where you would like to create the Django project. After being in the appropriate location, enter the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;commands.bat myproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here I assume that you have named the script file as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commands.bat&lt;/code&gt;, you can name it anything you like, but I like to keep this a convention. After this you don’t need to do anything, everything will be handled by the script. 
You can run the server using&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will have the base django project set up on your system. The below is the live demonstration of the script, I have deliberately removed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cls&lt;/code&gt; command to show the process. It won’t break the script if you add this to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1629024613612/Zsqa54_KD.gif&quot; alt=&quot;djqss.gif&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup-script--for-linuxmacos&quot;&gt;Setup script  for Linux/macOS&lt;/h3&gt;

&lt;p&gt;Copy the code from the below script and save it in a file preferably called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commands.sh&lt;/code&gt;, you can name it anything you want but keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sh&lt;/code&gt; extension after it to identify it as a shell-script.&lt;/p&gt;

&lt;p&gt;After that file is saved locally, you can run the script by passing the positional parameter as the name of the Django project. The command will be like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash commands.sh myproj
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;iframe src=&quot;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;amp;t=blackboard&amp;amp;wt=none&amp;amp;l=application%2Fx-sh&amp;amp;ds=true&amp;amp;dsyoff=20px&amp;amp;dsblur=68px&amp;amp;wc=true&amp;amp;wa=true&amp;amp;pv=56px&amp;amp;ph=56px&amp;amp;ln=false&amp;amp;fl=1&amp;amp;fm=Hack&amp;amp;fs=14px&amp;amp;lh=133%25&amp;amp;si=false&amp;amp;es=2x&amp;amp;wm=false&amp;amp;code=%2523%21%252Fusr%252Fbin%252Fenv%2520bash%250A%250Amkdir%2520%25241%250Acd%2520%25241%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Asource%2520env%255Cbin%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25241%2520.%250Aclear&quot; style=&quot;width: 803px; height: 384px; border:0; transform: scale(1); overflow:hidden;&quot; sandbox=&quot;allow-scripts allow-same-origin&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;From the output of the script, you will have created a Django project inside a virtual environment. We can manually activate the virtual environment. You can experiment it within your system as it can be a lot more customizable. This is just bare bone script to start a Django project but you can add your own things into it.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thus, from this little article, you can get a bit lazier in initializing a bare-bone Django project. We were able to understand the structure of the Django project and how to set up a virtual environment powered by Python.&lt;/p&gt;

&lt;p&gt;After understanding those concepts we then moved on to making a script namely a batch file and a shell script to automate the initialization of the Django project. I hope it might have helped in some or another way, Thanks for reading till here. Happy Coding :)&lt;/p&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="django" /><category term="web-development" /><category term="python" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/djangoqss.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/djangoqss.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Vim: Buffers</title><link href="https://mr-destructive.github.io//vim/2021/08/11/Vim-Buffers.html" rel="alternate" type="text/html" title="Vim: Buffers" /><published>2021-08-11T20:24:29+05:30</published><updated>2021-08-11T20:24:29+05:30</updated><id>https://mr-destructive.github.io//vim/2021/08/11/Vim-Buffers</id><content type="html" xml:base="https://mr-destructive.github.io//vim/2021/08/11/Vim-Buffers.html">&lt;p&gt;&lt;img src=&quot;/assets/img/vimbuff.png&quot; alt=&quot;Vim: Buffers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I have talked about Vim &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/08/03/Vim-Tabs.html&quot;&gt;tabs&lt;/a&gt;,  &lt;a href=&quot;https://mr-destructive.github.io/techstructive-blog/vim/2021/08/06/Vim-Window-Splits.html&quot;&gt;window splits&lt;/a&gt;  in the previous articles, and now I am quite keen on explaining the finest unit of file that you can open using Vim and that is a buffer. Tabs are a collection of windows, Windows are the viewport on buffers (collection to view the buffers), and Buffers are the memory that holds text in the file. So let us explore buffer in detail. This article won’t cover each and every tiny detail about buffers but surely enough to make you understand what a buffer is and how to manage those.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-vim-buffer&quot;&gt;What is a Vim buffer&lt;/h2&gt;

&lt;p&gt;Vim buffers are the chunks of memory that hold the text in a file. Vim buffers are used from opening a file to using, installing, upgrading the Plugins, using file managers, and everything you can edit and work within Vim.&lt;/p&gt;

&lt;p&gt;So, why bother using Vim buffer, you’ll ask. Well, you will need it to make some complex tasks possible in Vim, such as configuring it as your IDE or having much more control over what and how you open and close files in Vim. You might not need it in the broader sense but having a grasp of what you are using and understanding the process under the hood is vital whatsoever.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-buffer&quot;&gt;Creating a buffer&lt;/h2&gt;

&lt;p&gt;No need to create a buffer, if you are editing a file, that’s already a buffer :) If you open Vim, a fresh open, then you already have that current buffer as an empty buffer. You can create an empty buffer by entering the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:enew&lt;/code&gt;. This will actually make a new empty buffer, if you have edited the contents of the previous buffer you need to specify to write/save the buffer in a file.&lt;/p&gt;

&lt;p&gt;You can see the details of the buffers opened currently by using the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ls&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:buffers&lt;/code&gt;. This will open a list of buffers currently loaded in the Vim instance. You will see the output somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628681203173/qSSRrlB2J.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the name of the current buffer which in this case it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;No name&quot;&lt;/code&gt; this will be replaced with a file name if we had a file open. This won’t only print the current buffer but all the loaded buffers in the present Window of Vim. We will explore the details of this command in the next section.&lt;/p&gt;

&lt;h2 id=&quot;navigating-through-the-buffers-list&quot;&gt;Navigating through the buffers list&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628681927410/t9DDPbDEs.gif&quot; alt=&quot;buff1.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the first column in the only row, you can see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; indicating the number of the buffer, secondly, there are indicators &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; and others as well. These are used for referencing the buffers using certain attributes those have like :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; stands for the buffer in the current window.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; stands for the currently active buffer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; stands for the alternate buffer (previously edited).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt; stands for the hidden buffer ( used for navigating to other files without saving changes ).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have additional attributes or indicators for the buffers like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; indicating the buffer is modified.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; indicating the buffer cannot be modified.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; indicating the buffer is read only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use the attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt;, you have to set the option in the current window only, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:set hiddden&lt;/code&gt; to hide the files i.e to edit another file without saving changes to the current buffer(with the file loaded).  If you want a permanent option of hidden files you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set hidden&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vimrc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628683076849/lWQ2ZEj0E.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have enabled a hidden file in the window and you modify the file, you can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; symbol in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ls&lt;/code&gt; command output before the file, indicating that the file has been modified. If you try to quit the window, it will prompt you to save those unsaved modifications.&lt;/p&gt;

&lt;p&gt;This is the power of Vim buffers, you can get really fast in terms of editing multiple files and saving all of them at once. This feature can allow you to work more effectively and flawlessly with Window Splits and Tabs as they can contain multiple buffers within them.&lt;/p&gt;

&lt;p&gt;Now we will see how to move between those buffers. We can pretty effectively use the numbers in the buffer list to directly jump to that buffer. We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:b n&lt;/code&gt; where n is any number of the buffer in the list of buffers to move through the buffers. Optionally we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:buffer n&lt;/code&gt; but that is quite a long command.&lt;/p&gt;

&lt;p&gt;We can move to the previous buffer as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bp&lt;/code&gt;  to move to the previous buffer in the list. Similarly, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bn&lt;/code&gt; to move to the next buffer in the list, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bfirst&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:blast&lt;/code&gt; to move to the first and the last buffer respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628684713072/QzqBC99NV.gif&quot; alt=&quot;buff2.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;moving-through-the-buffers&quot;&gt;Moving through the buffers&lt;/h2&gt;

&lt;p&gt;We can move through our opened buffers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + o&lt;/code&gt; to move backward a buffer and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + i&lt;/code&gt; to move forward a buffer. This can be helpful if you do not want to remember the numbers associated with the buffers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628689030442/KNDDAlJpN.gif&quot; alt=&quot;buff2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can scan through the current buffers opened and jump through them one by one and it becomes quite effective in switching between few files. This could probably be suited for Web development where you can hop between HTML/CSS/JS files or in Android development for java/XML files, and so on you get the idea for using it as per your needs.&lt;/p&gt;

&lt;h2 id=&quot;deleting-buffers&quot;&gt;Deleting buffers&lt;/h2&gt;

&lt;p&gt;Now we will see how to delete the loaded buffers, we can simply use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bd n&lt;/code&gt; where n is the number of the buffer in the list to delete the buffer, optionally we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bd filename&lt;/code&gt; to delete the buffer loaded with that file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628685481565/m4bBHPf5C.gif&quot; alt=&quot;buff2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also delete a number of buffers at a time using a range of buffers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:n,mbd&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; is the first buffer and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; is the last buffer. We will delete every buffer between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; using the above command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628685657441/s4rJ_CRRQ.gif&quot; alt=&quot;buff2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just a quick fact, if you do not delete buffers, they will stay in memory even if you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt; they won’t get erased from the buffer list, you are just exiting the buffer view and not removing the buffer from the current memory. This can get really messy if you are opening too many files and keeping them in memory.&lt;/p&gt;

&lt;h2 id=&quot;creating-splits-in-buffer&quot;&gt;Creating splits in buffer&lt;/h2&gt;

&lt;p&gt;We can even create splits in buffers, basically a window split but we will see this with the view of buffers this time. To create a horizontal split, we can type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:new filename&lt;/code&gt; to open the file in the split. We can even create a vertical split with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:vnew filename&lt;/code&gt; to open a vertical split with the provided file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628686386964/O2HhFqaKa2.gif&quot; alt=&quot;buff2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see some wired things in the ls menu if we open a new tab in the current instance of Vim. The list command shows all the buffers in the current Tab as well as in the previous tab.&lt;/p&gt;

&lt;p&gt;We can also open buffers in splits by using numbers or file names. We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:sb n&lt;/code&gt; to open the contents of the buffer n(any number of buffer), and with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:sb filename&lt;/code&gt; to open the file in a split this will only be a horizontal split.&lt;/p&gt;

&lt;p&gt;We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:sba&lt;/code&gt; to open all the buffers in the split windows. This can be quite handy to find any file which you cannot remember was edited or wanted at the moment, this opens every buffer loaded in the current instance. We can also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:sbp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:sbn&lt;/code&gt; to open the previous and next buffer respectively in a split.&lt;/p&gt;

&lt;p&gt;Additionally, we also have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:vertical ba&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ba&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:ball&lt;/code&gt;)to open all the buffers in vertical and horizontal splits respectively.&lt;br /&gt;
&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628693311069/5y_xbPho7.gif&quot; alt=&quot;buff2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also&lt;/strong&gt;, We have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tab ba&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tab ball&lt;/code&gt; to open all the buffers as tabs in the current instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1628693521966/f1RKu4JwM.gif&quot; alt=&quot;bufftab.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can add more layers of effectiveness or customization using keymaps to split certain buffers and make use of the above set of commands more powerful and make them work according to your needs.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So, from the above sections, we were able to see what happens under the hood when you open, close, or edit a file in Vim. Though it was not an in-depth view of each and every detail of the buffers in Vim. But enough to make you understand what and how buffers work and how to use them to become more effective. Hopefully, you have understood how to perform movements with buffers and create and delete them with tremendous control over what files you could edit. Thank you for reading till here.&lt;/p&gt;

&lt;h3 id=&quot;buffers--window-splits--tabs&quot;&gt;Buffers &amp;lt; Window Splits &amp;lt; Tabs&lt;/h3&gt;

&lt;p&gt;So from these three articles, we were able to understand the terminology of Buffers, Window Splits, and Tabs. These all are the units of the Vim file system/ Way of grouping Files. We can use buffers to load the file from the memory, we can split various buffers into windows which are all contained in a tab. Some might prefer using buffers, splits, or tabs but hey! what are you even talking about? They are all part of tabs so use everything as per need don’t force yourself to use only one thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use buffers for opening few files, if you need to open many files regularly use window splits, If that’s not enough use tabs to separate from different folders or directories&lt;/strong&gt;. Don’t stop Viming, Happy Coding :)&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://vim.fandom.com/wiki/Buffers&quot;&gt;Vim Fandom: Buffers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://vim.fandom.com/wiki/Vim_buffer_FAQ&quot;&gt;Vim Buffers FAQ&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://linuxhint.com/how_vim_buffers_work/&quot;&gt;Linux Hint - Understanding and using VIM Buffers &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Meet Gor</name><email>gormeet711@gmail.com</email></author><category term="vim" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mr-destructive.github.io//assets/img/vimbuff.png" /><media:content medium="image" url="https://mr-destructive.github.io//assets/img/vimbuff.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>